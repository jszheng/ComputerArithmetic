{"config":{"lang":["ja"],"separator":"[\\s\\-\uff0c\u3002]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u5c01\u9762","text":""},{"location":"Appendix/","title":"\u9644\u5f55:\u8fc7\u53bb\u73b0\u5728\u548c\u672a\u6765","text":"<p>Appendix: Past, Present, and Future</p> <p>\u201cWho controls the past controls the future; who controls the present controls the past.\u201d GEORG ORWELL</p> <p>In this appendix, we trace the history of computer arithmetic, from the earliest digital computers to the modern machines that permeate ourdaily lives.We present a few turning points along this amazing chain of events, including the development of early supercomputers,the role played by vector supercomputers (particularly,their contributions to advances in pipelining), the arrival of digital signal processors, and the distillation of all these advanced developments into the tiny processors that power our desktop and laptop computers.We conclude with a discussion of current trends, future outlook, and resources for further study of computer arithmetic.</p>"},{"location":"BackCover/","title":"\u5c01\u5e95","text":""},{"location":"Front/","title":"Computer Arithmetic","text":"<p>Algorithms and Hardware Designs</p> <p>Second Edition</p> <p>2010</p> <p></p> <p></p> <p>by Behrooz Parhami</p> <p>UCSB</p> <p></p>"},{"location":"Preface_1st/","title":"\u7b2c\u4e00\u7248\u5e8f\u8a00","text":""},{"location":"Preface_1st/#_2","title":"\u8ba1\u7b97\u673a\u7b97\u672f\u7684\u80cc\u666f","text":"<p>\u5728\u8fc7\u53bb20\u5e74\u95f4\uff0c\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\u7684\u8fdb\u6b65\u4f7f\u5f97\u6570\u5b57\u8ba1\u7b97\u673a\u786c\u4ef6\u7684\u6027\u80fd\u6301\u7eed\u5448\u6307\u6570\u7ea7\u589e\u957f\uff0c\u5c3d\u7ba1\u5728\u7535\u8def\u5c42\u63d0\u9ad8\u901f\u5ea6\u7684\u6280\u672f\u96be\u5ea6\u5728\u4e0d\u65ad\u63d0\u9ad8\u3002\u5982\u679c\u6ca1\u6709\u7406\u8bba\u4e0a\u7684\u6d1e\u5bdf\u529b\u3001\u5b9e\u9a8c\u7814\u7a76\u548c\u5de5\u5177\u6784\u5efa\u7684\u52aa\u529b\uff0c\u8fd9\u79cd\u73b0\u8c61\u7ea7\u7684\u589e\u957f\u901f\u5ea6\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u8fd9\u4e9b\u52aa\u529b\u6709\u52a9\u4e8e\u5c06\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\u4ece\u4e00\u95e8\u827a\u672f\u8f6c\u53d8\u4e3a\u8ba1\u7b97\u673a\u79d1\u5b66\u548c\u5de5\u7a0b\u4e2d\u6700\u91cf\u5316\u7684\u4e00\u4e2a\u5206\u652f\uff0c\u4e14\u9884\u8ba1\u5728\u4e0d\u4e45\u7684\u5c06\u6765\u4e5f\u4f1a\u7ee7\u7eed\u4e0b\u53bb\u3002\u5bf9\u4e0d\u540c\u5f62\u5f0f\u7684\u5e76\u53d1\u6027\u7684\u7406\u89e3\uff0c\u4ee5\u53ca\u5177\u5907\u5408\u7406\u6709\u6548\u6027\u5e76\u4e14\u7528\u6237\u53cb\u597d\u7684\u7f16\u7a0b\u6a21\u578b\u7684\u53d1\u5c55\uff0c\u662f\u8fd9\u4e00\u6210\u529f\u6545\u4e8b\u7684\u5173\u952e\u63a8\u52a8\u56e0\u7d20\u3002</p> <p>\u5904\u7406\u5668\u6027\u80fd\u6210\u672c\u589e\u957f\u80cc\u540e\u7684\u95ee\u9898\u662f\u786c\u4ef6\u548c\u8f6f\u4ef6\u590d\u6742\u6027\u7684\u7a7a\u524d\u589e\u52a0\u3002\u590d\u6742\u5316\u7684\u8d8b\u52bf\u4e0d\u4ec5\u4e0e\u53ef\u6d4b\u8bd5\u6027\u548c\u53ef\u9a8c\u8bc1\u6027\u76f8\u62b5\u89e6\uff0c\u8fd8\u963b\u788d\u4e86\u53ef\u9002\u5e94\u6027\u3001\u6027\u80fd\u8c03\u6574\uff0c\u4ee5\u53ca\u5404\u79cd\u6743\u8861\u7684\u8bc4\u4f30\uff0c\u6240\u6709\u7684\u8fd9\u4e9b\u6700\u7ec8\u5bfc\u81f4\u4e86\u5f00\u53d1\u6210\u672c\u7684\u98d9\u5347\u3002\u5f53\u524d\u548c\u672a\u6765\u7684\u8ba1\u7b97\u673a\u8bbe\u8ba1\u6240\u9762\u4e34\u7684\u4e00\u4e2a\u5173\u952e\u6311\u6218\u662f\uff1a\u9700\u8981\u901a\u8fc7\u53bb\u9664\u4e00\u5c42\u53c8\u4e00\u5c42\u7684\u590d\u6742\u6027\u6765\u626d\u8f6c\u8fd9\u4e00\u8d8b\u52bf\u3002\u5728\u9009\u62e9\u7b80\u6d01\u3001\u7a33\u5065\u3001\u6613\u4e8e\u9a8c\u8bc1\u7684\u8bbe\u8ba1\u540c\u65f6\uff0c\u8fd8\u8981\u7ee7\u7eed\u5c1d\u8bd5\u65b0\u7684\u8bbe\u8ba1\u65b9\u6cd5\u3002\u5e94\u5f53\u4ece\u8f83\u7b80\u5355\u7684\u7535\u8def\u4e2d\u83b7\u5f97\u6027\u80fd\u4e0e\u6613\u7528\u6027\u7684\u597d\u5904\uff0c\u5e76\u80fd\u968f\u65f6\u9002\u5e94\u5e94\u7528\u7684\u9700\u6c42\u3002</p> <p>\u5728\u8ba1\u7b97\u673a\u8bbe\u8ba1\u8005\u5bf9\u7528\u6237\u53cb\u597d\u6027\u3001\u7d27\u51d1\u6027\u3001\u7b80\u5355\u6027\u3001\u9ad8\u6027\u80fd\u3001\u4f4e\u6210\u672c\u548c\u529f\u8017\u7684\u8ffd\u6c42\u4e2d\uff0c\u8ba1\u7b97\u673a\u7b97\u672f\u8d77\u5230\u4e86\u5173\u952e\u4f5c\u7528\u3002\u5b83\u662f\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\u4e2d\u6700\u53e4\u8001\u7684\u5b50\u9886\u57df\u4e4b\u4e00\u3002\u65e9\u671f\u6570\u5b57\u8ba1\u7b97\u673a\u7684\u5927\u90e8\u5206\u786c\u4ef6\u5f00\u9500\u90fd\u6765\u81ea\u7d2f\u52a0\u5668\u548c\u5176\u5b83\u7b97\u672f/\u903b\u8f91\u7535\u8def\u4e2d\u3002\u56e0\u6b64\uff0c\u7b2c\u4e00\u4ee3\u8ba1\u7b97\u673a\u8bbe\u8ba1\u8005\u7684\u52a8\u673a\u662f\u5728\u53ef\u80fd\u7684\u8303\u56f4\u5185\u5c3d\u53ef\u80fd\u7b80\u5316\u548c\u5171\u4eab\u786c\u4ef6\uff0c\u5e76\u5728\u63d0\u51fa\u65b9\u6848\u524d\u8fdb\u884c\u8be6\u7ec6\u7684\u6027\u4ef7\u6bd4\u5206\u6790\u3002\u6211\u4eec\u4eca\u5929\u4f7f\u7528\u7684\u8bb8\u591a\u5de7\u5999\u7684\u8bbe\u8ba1\u65b9\u6cd5\u5b9e\u9645\u4e0a\u90fd\u6e90\u81ea\u4e8e30\uff5e50\u5e74\u524d\u7b28\u91cd\u3001\u8017\u7535\u7684\u673a\u5668\u4e2d\u3002</p> <p>\u5b9e\u9645\u4e0a\uff0c\u8ba1\u7b97\u673a\u7b97\u672f\u5982\u4eca\u5df2\u7ecf\u975e\u5e38\u6210\u529f\u4e86\uff0c\u4ee5\u81f3\u4e8e\u6709\u65f6\u4f1a\u53d8\u5f97\u975e\u5e38\u900f\u660e\u3002\u5c31\u590d\u6742\u6027\u800c\u8a00\uff0c\u5982\u4eca\u7684\u7b97\u672f\u7535\u8def\u65e9\u5df2\u4e0d\u518d\u5360\u636e\u4e3b\u5bfc\u5730\u4f4d\uff1b\u5bc4\u5b58\u5668\u3001\u5b58\u50a8\u5668\u548c\u7c97\u51fa\u6c14\u7ba1\u7406\u3001\u6307\u4ee4\u53d1\u5c04\u903b\u8f91\u548c\u6d41\u6c34\u7ebf\u63a7\u5236\u903b\u8f91\u624d\u662f\u5f53\u4eca\u5904\u7406\u5668\u82af\u7247\u9762\u79ef\u7684\u4e3b\u8981\u6d88\u8d39\u8005\u3002\u7b97\u672f\u7535\u8def\u7684\u6b63\u786e\u6027\u4e0e\u9ad8\u6027\u80fd\u662f\u4eba\u4eec\u901a\u5e38\u7684\u9884\u671f\uff0c\u50cf1990s\u82f1\u7279\u5c14\u5954\u817e\u7684\u9664\u6cd5\u9519\u8bef\u8fd9\u6837\u7684\u4e8b\u4ef6\u5b9e\u9645\u4e0a\u5f88\u5c11\u53d1\u751f\u3002</p> <p>\u524d\u9762\u6240\u8ff0\u7684\u60c5\u51b5\u6b63\u5728\u8f6c\u53d8\uff0c\u8fd9\u91cc\u6709\u51e0\u4e2a\u539f\u56e0\u3002\u9996\u5148\uff0c\u5728\u6781\u9ad8\u7684\u65f6\u949f\u9891\u7387\u4e0b\uff0c\u7b97\u672f\u7535\u8def\u548c\u5904\u7406\u5668\u5176\u5b83\u90e8\u5206\u95f4\u7684\u63a5\u53e3\u5f00\u59cb\u53d8\u5f97\u975e\u5e38\u5173\u952e\u3002\u7b97\u672f\u5355\u5143\u4e5f\u4e0d\u518d\u80fd\u88ab\u5b64\u7acb\u5730\u8bbe\u8ba1\u548c\u9a8c\u8bc1\u4e86\u3002\u76f8\u53cd\uff0c\u9700\u8981\u8fdb\u884c\u7efc\u5408\u7684\u8bbe\u8ba1\u4e0e\u4f18\u5316\uff0c\u8fd9\u4f7f\u5f97\u5f00\u53d1\u5de5\u4f5c\u53d8\u5f97\u66f4\u52a0\u590d\u6742\u4e14\u6602\u8d35\u3002\u5176\u6b21\uff0c\u8fd8\u8981\u5229\u7528\u65b0\u6280\u672f\u7684\u4f18\u52bf\u4f18\u5316\u7b97\u672f\u7535\u8def\u4ee5\u6ee1\u8db3\u8bbe\u8ba1\u76ee\u6807\uff0c\u5e76\u80fd\u5bb9\u5fcd\u5f31\u70b9\uff0c\u8fd9\u4f7f\u5f97\u6211\u4eec\u9700\u8981\u5bf9\u73b0\u6709\u7684\u8bbe\u8ba1\u6a21\u5f0f\u8fdb\u884c\u91cd\u65b0\u5ba1\u89c6\u3002\u6700\u540e\uff0c\u5c06\u66f4\u9ad8\u7ea7\u522b\u7684\u7b97\u672f\u57fa\u7840\u5355\u5143\u7eb3\u5165\u786c\u4ef6\uff0c\u4f7f\u5f97\u8bbe\u8ba1\u3001\u4f18\u5316\u548c\u9a8c\u8bc1\u5de5\u4f5c\u53d8\u5f97\u9ad8\u5ea6\u590d\u6742\uff0c\u4e14\u76f8\u4e92\u5173\u8054\u3002</p> <p>\u8fd9\u4fbf\u662f\u8ba1\u7b97\u673a\u7b97\u672f\u5728\u5982\u4eca\u4ecd\u5177\u6d3b\u529b\u7684\u539f\u56e0\u3002\u8fd9\u4e2a\u9886\u57df\u7684\u8bbe\u8ba1\u8005\u548c\u7814\u7a76\u4eba\u5458\u4ee5\u60ca\u4eba\u7684\u89c4\u5f8b\u6027\u4ea7\u751f\u4e86\u65b0\u7684\u7ed3\u6784\u3002\u8d85\u524d\u8fdb\u4f4d\u52a0\u6cd5\u5668\u5c31\u662f\u4e00\u4e2a\u5178\u578b\u7684\u4f8b\u5b50\uff1a\u5728\u4e0d\u8fdc\u7684\u8fc7\u53bb\uff0c\u6211\u4eec\u66fe\u8ba4\u4e3a\u6211\u4eec\u77e5\u9053\u6240\u6709\u5173\u4e8e\u8d85\u524d\u8fdb\u4f4d\u52a0\u6cd5\u5668\u7684\u77e5\u8bc6\u3002\u7136\u800c\uff0c\u65b0\u7684\u8bbe\u8ba1\u3001\u6539\u8fdb\u548c\u4f18\u5316\u4ecd\u5728\u4e0d\u65ad\u51fa\u73b0\u3002IEEE 754\u6807\u51c6\u6d6e\u70b9\u683c\u5f0f\u6d88\u9664\u4e86\u8bb8\u591a\u6709\u5173\u6d6e\u70b9\u8ba1\u7b97\u517c\u5bb9\u6027\u4e0e\u8bef\u5dee\u63a7\u5236\u7684\u4f46\u53c8\uff0c\u4ece\u800c\u4ea7\u751f\u4e86\u8bb8\u591a\u5bf9\u5927\u4f17\u5e02\u573a\u5177\u6709\u5438\u5f15\u529b\u7684\u65b0\u8bbe\u8ba1\u4e0e\u4ea7\u54c1\u3002\u9274\u4e8e\u8bb8\u591a\u65b0\u5e94\u7528\u573a\u666f\uff08\u5982\u52a0\u5bc6\u3001\u9519\u8bef\u68c0\u6d4b\u548c\u591a\u5a92\u4f53\uff09\u90fd\u5177\u6709\u7b97\u672f\u5bc6\u96c6\u6027\u7684\u7279\u70b9\uff0c\u8ba1\u7b97\u673a\u7b97\u672f\u5728\u672a\u6765\u51e0\u5e74\u4ecd\u5c06\u7ee7\u7eed\u84ec\u52c3\u53d1\u5c55\u3002</p>"},{"location":"Preface_1st/#_3","title":"\u672c\u4e66\u7684\u76ee\u7684\u4e0e\u7ed3\u6784","text":"<p>\u8ba1\u7b97\u673a\u7b97\u672f\u8fd9\u4e00\u9886\u57df\u5df2\u7ecf\u53d1\u5c55\u6210\u719f\uff0c\u5df2\u7ecf\u6709\u5341\u51e0\u7bc7\u6750\u6599\u548c\u53c2\u8003\u4e66\u88ab\u51fa\u7248\u4e86\u3002\u5176\u4e2d\u4e00\u4e9b\u6d89\u53ca\u8ba1\u7b97\u673a\u7b97\u672f\u7684\u4e00\u822c\u4e66\u7c4d\uff08\u76f8\u5bf9\u4e8e\u7279\u6b8a\u5e94\u7528\u6216\u9ad8\u7ea7/\u975e\u5e38\u89c4\u65b9\u6cd5\uff09\u88ab\u5217\u5728\u4e86\u5e8f\u8a00\u7684\u6700\u540e\uff08\u53c2\u8003\u6587\u732e\u7d22\u5f15\u8bf7\u89c1\u539f\u4e66\u5e8f\u8a00\u672b\uff09\u3002\u8fd9\u4e9b\u4e66\u7684\u6bcf\u4e00\u672c\u90fd\u5177\u6709\u72ec\u7279\u7684\u4f18\u52bf\uff0c\u4e14\u5bf9\u8be5\u9886\u57df\u7684\u5f62\u6210\u548c\u53d1\u5c55\u505a\u51fa\u4e86\u8d21\u732e\u3002\u672c\u4e66\uff0c\u300aComputer Arithmetic: Algorithms and Hardware Designs\u300b\u5c31\u662f\u5750\u7740\u591a\u5e74\u6765\u5f00\u53d1\u5e76\u5b8c\u5584\u7684\u8bb2\u4e49\u7684\u4ea7\u7269\u3002\u4ee5\u4e0b\u662f\u672c\u4e66\u4e0e\u6240\u5217\u4e66\u7c4d\u76f8\u6bd4\uff0c\u6700\u91cd\u8981\u7684\u7279\u70b9\uff1a</p> <ol> <li>**\u6750\u6599\u7ae0\u8282\u6309\u7167\u8bb2\u5ea7\u7684\u89c4\u6a21\u5212\u5206\uff1a**\u5728\u6211\u7684\u6559\u5b66\u65b9\u6848\u4e2d\uff0c\u4e00\u4e2a\u8bb2\u5ea7\u6216\u591a\u6216\u5c11\u662f\u4e00\u4e2a\u72ec\u7acb\u7684\u6a21\u5757\uff0c\u5176\u4e0e\u8fc7\u53bb\u7684\u8bb2\u5ea7\u6709\u8054\u7cfb\uff0c\u4e14\u4f1a\u6307\u51fa\u672a\u6765\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\u6bcf\u4e2a\u8bb2\u5ea7\u90fd\u5fc5\u987b\u6709\u4e00\u4e2a\u4e3b\u9898\u6216\u6807\u9898\uff0c\u4e14\u5fc5\u987b\u4ece\u52a8\u673a\u5230\u7ec6\u8282\u518d\u5230\u7ed3\u8bba\u3002\u5728\u8bbe\u8ba1\u6587\u672c\u65f6\uff0c\u6211\u52aa\u529b\u5c06\u6750\u6599\u5206\u4e3a\u51e0\u7ae0\uff0c\u6bcf\u7ae0\u90fd\u9002\u5408\u7528\u4e8e\u4e00\u4e2a\u8bb2\u5ea7\uff081\uff5e2\u5c0f\u65f6\uff09\u3002\u7b80\u77ed\u7684\u8bb2\u5ea7\u53ef\u4ee5\u4ec5\u6db5\u76d6\u5176\u4e2d\u524d\u9762\u51e0\u4e2a\u5c0f\u8282\uff0c\u800c\u8f83\u957f\u7684\u8bb2\u5ea7\u5219\u53ef\u5904\u7406\u77e5\u8bc6\u6216\u65b9\u6cd5\u7684\u53d8\u79cd\u3001\u6b21\u8981\u7684\u601d\u60f3\u6216\u63a5\u8fd1\u7ae0\u672b\u65f6\u7684\u9ad8\u7ea7\u6750\u6599\u3002\u4e3a\u4f7f\u7ed3\u6784\u5177\u6709\u5c42\u6b21\u6027\uff08\u800c\u4e0d\u662f\u6241\u5e73\u6216\u7ebf\u6027\u7684\uff09\uff0c\u672c\u4e66\u4e00\u5171\u88ab\u5206\u4e3a\u4e86\u4e03\u4e2a\u90e8\u5206\uff0c\u6bcf\u4e2a\u90e8\u5206\u7531\u56db\u7ae0\u7ec4\u6210\uff0c\u6bcf\u7ae0\u5bf9\u5e94\u4e00\u4e2a\u8bb2\u5ea7\uff0c\u6db5\u76d6\u8be5\u9886\u57df\u7684\u4e00\u4e2a\u65b9\u9762\uff08\u89c1\u56feP.1\uff0c\u5728\u672c\u6587\u540e\u9762\u8bf7\u5f80\u4e0b\u7ffb\uff09\u3002</li> <li>**\u5f3a\u8c03\u57fa\u7840\u7406\u8bba\u4e0e\u786c\u4ef6\u8bbe\u8ba1\uff1a**\u5904\u7406\u590d\u6742\u95ee\u9898\u7684\u80fd\u529b\u65e2\u9700\u8981\u5305\u62ec\u8ba1\u7b97\u673a\u7b97\u672f\u7406\u8bba\u57fa\u7840\u7684\u6df1\u523b\u7406\u89e3\uff0c\u4e5f\u9700\u8981\u5e2e\u52a9\u6211\u4eec\u7406\u89e3\u7406\u8bba\u7684\u8bbe\u8ba1\u5b9e\u4f8b\u3002\u8fd9\u4e9b\u8bbe\u8ba1\u4e5f\u540c\u65f6\u4e3a\u7efc\u5408\u63d0\u4f9b\u4e86\u6784\u5efa\u5757\uff0c\u5e76\u5728 \u6210\u672c-\u6027\u80fd \u6bd4\u8f83\u65b9\u9762\u63d0\u4f9b\u4e86\u53c2\u8003\u70b9\u3002\u8fd9\u79cd\u89c2\u70b9\u53cd\u6620\u5728\uff0c\u4f8b\u5982\uff0c\u901a\u8fc7\u5bf9\u5197\u4f59\u6570\u5b57\u8868\u793a\u548c\u76f8\u5173\u7b97\u672f\u7684\u8be6\u7ec6\u4e86\u89e3\uff08\u7b2c3\u7ae0\uff09\uff0c\u53ef\u4ee5\u4f7f\u6211\u4eec\u5bf9\u540e\u9762\u5404\u79cd\u4e58\u6cd5\u5668\u8bbe\u8ba1\u548c\u5b9e\u65f6\u7b97\u672f\u5f97\u5230\u66f4\u597d\u7684\u7406\u89e3\u3002\u53e6\u4e00\u4e2a\u4f8b\u5b50\u89c1\u4e8e\u7b2c22\u7ae0\uff0c\u5176\u4ece\u66f4\u76f4\u89c2\u7684\u51e0\u4f55\u5b66\u89d2\u5ea6\u4ecb\u7ecd\u4e86\u5750\u6807\u65cb\u8f6c\u6570\u5b57\u8ba1\u7b97\u673a\uff0c\u6216\u8005CORDIC\u7b97\u6cd5\u3002</li> <li>**\u5c06\u8ba1\u7b97\u673a\u7b97\u672f\u4e0e\u8ba1\u7b97\u673a\u5176\u5b83\u5b50\u9886\u57df\u8054\u7cfb\uff1a**\u8ba1\u7b97\u673a\u7b97\u672f\u5e38\u53d7\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\u548c\u5176\u5b83\u5b50\u9886\u57df\u7684\u5b57\u6837\uff0c\u540c\u65f6\u4e5f\u80fd\u53cd\u8fc7\u6765\u6ecb\u517b\u8fd9\u4e9b\u9886\u57df\u3002\u8fd9\u79cd\u8054\u7cfb\u7684\u4f8b\u5b50\u6bd4\u6bd4\u7686\u662f\u3002\u4f8b\u5982\u5bf9\u4e8e\u8d85\u524d\u8fdb\u4f4d\u52a0\u6cd5\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u610f\u8bc6\u5230\u5176\u8fdb\u4f4d\u8ba1\u7b97\u5b9e\u9645\u4e0a\u5c31\u662f\u5e76\u884c\u524d\u7f00\u8ba1\u7b97\u7684\u4e00\u4e2a\u7279\u4f8b\uff0c\u800c\u5e76\u884c\u524d\u7f00\u8ba1\u7b97\u5df2\u7ecf\u88ab\u5e76\u884c\u8ba1\u7b97\u7684\u7814\u7a76\u8005\u505a\u51fa\u4e86\u5e7f\u6cdb\u5730\u7814\u7a76\u3002\u795e\u7ecf\u7f51\u7edc\u7684\u7b97\u672f\u5219\u662f\u4e00\u4e2a\u4ecd\u5728\u63a2\u7d22\u7684\u9886\u57df\u3002\u5269\u4f59\u6570\u7cfb\u7edf\uff08residue number system\uff09\u4e3a\u590d\u6742\u6027\u7406\u8bba\u548c\u9ad8\u901f\u7b97\u672f\u7684\u6781\u9650\u611f\u5174\u8da3\u7684\u7814\u7a76\u5458\uff0c\u4ee5\u53ca\u5bb9\u9519\u6570\u5b57\u7cfb\u7edf\u7684\u8bbe\u8ba1\u8005\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5b9d\u8d35\u7684\u5de5\u5177\u3002</li> <li>**\u5e7f\u6cdb\u6db5\u76d6\u4e86\u91cd\u8981\u4e3b\u9898\uff1a**\u672c\u4e66\u51e0\u4e4e\u6db5\u76d6\u4e86\u8ba1\u7b97\u673a\u7b97\u672f\u7684\u6240\u6709\u91cd\u8981\u7b97\u6cd5\u548c\u786c\u4ef6\u8bbe\u8ba1\u4e3b\u9898\uff0c\u4ece\u800c\u4e3a\u8be5\u9886\u57df\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5e73\u8861\u4e14\u5b8c\u6574\u7684\u89c6\u89d2\u3002\u6db5\u76d6\u5185\u5bb9\u5305\u62ec\u975e\u5e38\u89c4\u6570\u5b57\u8868\u793a\u65b9\u6cd5\uff083,4\u7ae0\uff09\u3001\u8d8a\u6765\u8d8a\u91cd\u8981\u7684\u67e5\u627e\u8868\u7b97\u672f\uff0824\u7ae0\uff09\u3001\u5bb9\u9519\u548c\u53ef\u9a8c\u8bc1\u7b97\u672f\uff0819,20\u7ae0\uff09\u3001\u4ee5\u53ca\u7b2c\u4e03\u90e8\u5206\uff0825\uff5e28\u7ae0\uff09\u7684\u4e3b\u9898\uff0c\u8fd9\u4e9b\u5185\u5bb9\u5728\u5176\u5b83\u6559\u6750\u4e2d\u5e76\u6ca1\u6709\u5168\u90e8\u51fa\u73b0\u3002</li> <li>**\u5168\u4e66\u91c7\u7528\uff0c\u5e76\u5c3d\u53ef\u80fd\u5730\u4f7f\u7528\u7edf\u4e00\u4e14\u4e00\u81f4\u7684\u7b26\u53f7\u4e0e\u672f\u8bed\uff1a**\u4f8b\u5982\uff0c\u672c\u4e66\u4e2d \\(r\\)r \u603b\u662f\u4ee3\u8868\u6570\u5b57\u8868\u793a\u7684\u57fa\u6570\uff08radix\uff09\uff0c\u6216\u8005\u5904\u7f5a\u548c\u5e73\u65b9\u6839\u4e2d\u7684\u4f59\u6570\u3002\u867d\u7136\u5176\u5b83\u4f5c\u8005\u5728\u4ed6\u4eec\u6587\u7ae0\u7684\u57fa\u672c\u90e8\u5206\u4e2d\u4e5f\u90fd\u57fa\u672c\u8fd9\u6837\u505a\u4e86\uff0c\u4f46\u8bb8\u591a\u4eba\u4ecd\u503e\u5411\u4e8e\u5728\u9ad8\u7ea7\u7814\u7a76\u4e3b\u9898\u4e2d\u7b80\u5355\u5730\u501f\u7528\u53c2\u8003\u8d44\u6599\u4e2d\u7684\u7b26\u53f7\u548c\u672f\u8bed\u3002\u8fd9\u79cd\u65b9\u6cd5\u7684\u597d\u5904\u662f\u4f7f\u5f97\u539f\u4e66\u548c\u53c2\u8003\u8d44\u6599\u95f4\u7684\u8fc7\u5ea6\u66f4\u5bb9\u6613\uff0c\u4f46\u5bf9\u5927\u591a\u6570\u5b66\u751f\u6765\u8bf4\uff0c\u8fd9\u5b8c\u5168\u662f\u4e00\u79cd\u8ff7\u60d1\uff0c\u4ed6\u4eec\u4f9d\u8d56\u539f\u4e66\uff0c\u9664\u975e\u5199\u8bba\u6587\uff0c\u5e76\u4e0d\u4f1a\u53bb\u53c2\u8003\u539f\u59cb\u53c2\u8003\u8d44\u6599\u3002</li> </ol>"},{"location":"Preface_1st/#_4","title":"\u4e3b\u9898\u6458\u8981","text":"<p>\u672c\u4e66\u5305\u62ec\u4e03\u4e2a\u90e8\u5206\u6bcf\u90e8\u5206\u7531\u56db\u7ae0\u7ec4\u6210\uff0c\u5b83\u4eec\u7684\u5199\u4f5c\u52a8\u673a\u5206\u522b\u5982\u4e0b\uff1a</p> <ol> <li>\u7b2c\u4e00\u90e8\u5206\uff1a\u63d0\u4f9b\u4e00\u4e2a\u53f0\u9636\uff0c\u4ee5\u8ba9\u6211\u4eec\u9886\u7565\u63a5\u4e0b\u6765\u7684\u5185\u5bb9\uff0c\u5e76\u8be6\u7ec6\u5730\u4ecb\u7ecd\u5b9a\u70b9\u6570\u7684\u5404\u79cd\u8868\u793a\u65b9\u6cd5\u3002\u5305\u62ec\u5bf9\u6709\u7b26\u53f7\u6570\u3001\u5197\u4f59\u6570\u8868\u793a\u3001\u5269\u4f59\u6570\u8868\u793a\u7684\u8be6\u7ec6\u8ba8\u8bba\u3002</li> <li>\u7b2c\u4e8c\u90e8\u5206\uff1a\u5305\u62ec\u52a0\u6cd5\u548c\u51cf\u6cd5\uff0c\u5b83\u4eec\u6784\u6210\u4e86\u6700\u57fa\u672c\u7684\u7b97\u672f\u6784\u5efa\uff0c\u5e38\u7528\u4e8e\u5b9e\u73b0\u5176\u5b83\u7b97\u672f\u8fd0\u7b97\u3002\u8ba8\u8bba\u5185\u5bb9\u5305\u62ec\u5e38\u6570\u7684\u52a0\u6cd5\uff08\u8ba1\u6570\u5668\uff09\uff0c\u9ad8\u901f\u52a0\u6cd5\u5668\u7684\u5404\u79cd\u8bbe\u8ba1\uff0c\u4ee5\u53ca\u591a\u64cd\u4f5c\u6570\u52a0\u6cd5\u5668\u3002</li> <li>\u7b2c\u4e09\u90e8\u5206\uff1a\u8fd9\u90e8\u5206\u4e13\u95e8\u8ba8\u8bba\u4e58\u6cd5\uff0c\u4ece\u57fa\u672c\u7684\u79fb\u4f4d/\u52a0\u6cd5\u7b97\u6cd5\u5f00\u59cb\uff0c\u5230\u9ad8\u57fa\u3001\u6811\u5f62\u3001\u9635\u5217\u3001\u4f4d\u4e32\u884c\u3001\u6a21\u4e58\u6cd5\u548c\u5176\u5b83\u5404\u79cd\u4e58\u6cd5\uff0c\u6b64\u5916\u8fd8\u8ba8\u8bba\u4e86\u5e73\u65b9\u8fd9\u79cd\u7279\u6b8a\u60c5\u51b5\u3002</li> <li>\u7b2c\u56db\u90e8\u5206\uff1a\u5305\u62ec\u9664\u6cd5\u7b97\u6cd5\u53ca\u5176\u786c\u4ef6\u5b9e\u73b0\uff0c\u4ece\u6700\u57fa\u672c\u7684\u79fb\u4f4d/\u51cf\u6cd5\u7b97\u6cd5\u5f00\u59cb\uff0c\u5230\u9ad8\u57fa\u3001\u9884\u7f29\u653e\u3001\u6a21\u9664\u6cd5\u3001\u9635\u5217\u3001\u6536\u655b\u9664\u6cd5\u3002</li> <li>\u7b2c\u4e94\u90e8\u5206\uff1a\u6d89\u53ca\u5b9e\u6570\u7b97\u672f\uff0c\u5305\u62ec\u8868\u793a\u5b9e\u6570\u7684\u5404\u79cd\u65b9\u6cd5\u3001\u6d6e\u70b9\u7b97\u672f\u3001\u8868\u793a\u4e0e\u8ba1\u7b97\u4e2d\u7684\u8bef\u5dee\uff0c\u4ee5\u53ca\u9ad8\u7cbe\u5ea6\u548c\u53ef\u9a8c\u8bc1\u7b97\u672f\u3002</li> <li>\u7b2c\u516d\u90e8\u5206\uff1a\u6d89\u53ca\u51fd\u6570\u6c42\u503c\uff0c\u4ece\u5e73\u65b9\u6839\u6c42\u503c\u5f00\u59cb\uff0c\u7136\u540e\u662fCORDIC\u7b97\u6cd5\uff0c\u63a5\u7740\u662f\u4e00\u822c\u7684\u6536\u655b\u548c\u8fd1\u4f3c\u65b9\u6cd5\uff0c\u5305\u62ec\u57fa\u4e8e\u67e5\u627e\u8868\u7684\u65b9\u6cd5\u3002</li> <li>\u7b2c\u4e03\u90e8\u5206\uff1a\u5e7f\u6cdb\u5730\u8ba8\u8bba\u4e86\u8bbe\u8ba1\u548c\u5b9e\u73b0\u65b9\u9762\u7684\u4e3b\u9898\uff0c\u5305\u62ec\u6d41\u6c34\u7ebf\u3001\u4f4e\u529f\u8017\u548c\u5bb9\u9519\u7b97\u672f\u3002\u8fd9\u90e8\u5206\u7684\u6700\u540e\u4e00\u7ae0\u8fd8\u63d0\u4f9b\u4e86\u5386\u53f2\u89d2\u5ea6\u548c\u5b9e\u9645\u8ba1\u7b97\u673a\u4e2d\u7b97\u672f\u5355\u5143\u7684\u4f8b\u5b50\u3002</li> </ol>"},{"location":"Preface_1st/#_5","title":"\u672c\u4e66\u7684\u9605\u8bfb\u6307\u5357","text":"<p>\u5bf9\u4e8e\u6559\u5b66\u4f7f\u7528\uff0c\u672c\u4e66\u7684\u6bcf\u7ae0\u4e3b\u9898\u90fd\u53ef\u57281\uff5e2\u5c0f\u65f6\u7684\u8bb2\u5ea7\u4e2d\u6db5\u76d6\u3002\u5728\u4f5c\u8005\u81ea\u5df1\u7684\u6559\u5b66\u4e2d\uff0c\u6bcf\u7ae0\u5206\u522b\u88ab\u7528\u4e8e1.5\u5c0f\u65f6\u7684\u8bb2\u5ea7\uff0c\u6bcf\u54682\u6b21\uff0c\u4e3a\u671f10\u8f74\uff0c\u4e14\u7701\u7565\u6216\u5408\u5e76\u4e86\u90e8\u5206\u7ae0\u8282\uff0c\u4ee5\u4fbf\u5c06\u6750\u6599\u7eb3\u516518\uff5e20\u6b21\u8bb2\u5ea7\u3002\u4f46\u672c\u6587\u7684\u6a21\u5757\u5316\u7ed3\u6784\u4e5f\u9002\u7528\u4e8e\u5176\u5b83\u8bb2\u5ea7\u5f62\u5f0f\u3001\u81ea\u5b66\u6216\u4ece\u4e1a\u4eba\u5458\u5bf9\u8be5\u9886\u57df\u7684\u56de\u987e\u3002\u5728\u540e\u4e24\u79cd\u60c5\u51b5\uff0c\u8bfb\u8005\u53ef\u628a\u6bcf\u7ae0\u770b\u4f5c\u662f\u4e00\u4e2a\u5b66\u4e60\u5355\u5143\uff08\u6bd4\u5982\u4e00\u5468\uff09\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u8bb2\u5ea7\u3002\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u8bfb\u8005\u8fdb\u5165\u4e0b\u4e00\u7ae0\u524d\uff0c\u6bcf\u7ae0\u7684\u6240\u6709\u4e3b\u9898\u90fd\u5e94\u88ab\u8986\u76d6\u3002\u5728\u6388\u8bfe\u65f6\u95f4\u8f83\u5c11\u7684\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e9b\u4f4d\u4e8e\u7ae0\u8282\u672b\u5c3e\u7684\u5c0f\u8282\u53ef\u4ee5\u88ab\u7701\u7565\uff0c\u6216\u8005\u4ec5\u4ecb\u7ecd\u52a8\u673a\u4e0e\u5173\u952e\u7ed3\u679c\u3002</p> <p>\u6bcf\u7ae0\u90fd\u63d0\u4f9b\u4e86\u4e0d\u540c\u590d\u6742\u7a0b\u5ea6\u7684\u95ee\u9898\uff0c\u4ece\u7b80\u5355\u5730\u6570\u5b57\u4f8b\u5b50\u6216\u8054\u7cfb\u5230\u8981\u6c42\u66f4\u9ad8\u7684\u7814\u7a76\u6216\u5c0f\u578b\u9879\u76ee\u3002\u8fd9\u4e9b\u95ee\u9898\u662f\u672c\u4e66\u4e0d\u53ef\u5206\u5272\u7684\u4e00\u90e8\u5206\uff1a\u5b83\u4eec\u4e0d\u662f\u4e3a\u4e86\u4f7f\u672c\u4e66\u5728\u4f7f\u7528\u65f6\u66f4\u5177\u5438\u5f15\u529b\u800c\u4e8b\u540e\u6dfb\u52a0\u7684\u3002\u5168\u4e66\u5305\u62ec464\u4e2a\u95ee\u9898\uff08\u6bcf\u7ae015\uff5e18\u4e2a\uff09\u3002\u5047\u8bbe\u6bcf\u5468\u6709\u4e24\u6b21\u8bb2\u5ea7\uff0c\u5219\u53ef\u6bcf\u5468\u6216\u6bcf\u4e24\u5468\u5e03\u7f6e\u4e00\u6b21\u4f5c\u4e1a\uff0c\u6bcf\u6b21\u4f5c\u4e1a\u90fd\u4ee5\u76f8\u5e94\u7684\u4e00\u534a\uff082\u7ae0\uff09\u6216\u5168\u90e8\uff084\u7ae0\uff09\u90e8\u5206\u7684\u5177\u4f53\u5185\u5bb9\u4f5c\u4e3a\u6807\u9898\u3002</p> <p>\u8fd9\u91cc\u4e5f\u4e3a\u6559\u5e08\u63d0\u4f9b\u89e3\u7b54\u624b\u518c\u3002\u4f5c\u8005\u5728UCSB\u7684ECE 252B\u8bfe\u7a0b\u7684\u8be6\u7ec6\u6559\u5b66\u5927\u7eb2\u53ef\u5728\u4e0b\u7f51\u5740\u627e\u5230\uff1a</p> <p>http://www.ece.ucsb.edu/~parhami/ece_252b.htm</p> <p>\u4e00\u4e2a\u7528\u4e8e\u5bf9\u5404\u79cd\u7b97\u672f\u7b97\u6cd5\u8fdb\u884c\u6570\u503c\u5b9e\u9a8c\u7684\u6a21\u62df\u5668\u5219\u53ef\u5728\u4e0b\u7f51\u5740\u627e\u5230\uff1a</p> <p>http://www.ecs.umass.edu/ece/koren/arith/simulator/</p> <p>\u7531Israel Koren\u6559\u6388\u63d0\u4f9b\u3002</p> <p>\u6bcf\u7ae0\u672b\u5c3e\u90fd\u5217\u51fa\u4e86\u8ba1\u7b97\u673a\u7b97\u672f\u7684\u7ecf\u5178\u8bba\u6587\u3001\u5173\u952e\u8bbe\u8ba1\u601d\u60f3\u548c\u91cd\u8981\u7684\u6700\u65b0\u7814\u7a76\u8d21\u732e\u7684\u53c2\u8003\u6587\u732e\u3002\u8fd9\u4e9b\u53c2\u8003\u6587\u732e\u4e3a\u6df1\u5165\u7814\u7a76\u6216\u5b66\u671f\u8bba\u6587\u6216\u8005\u9879\u76ee\u63d0\u4f9b\u4e86\u826f\u597d\u7684\u4e03\u70b9\u3002\u5927\u91cf\u7684\u7ecf\u5178\u8bba\u6587\u548c\u8ba1\u7b97\u673a\u7b97\u672f\u4e2d\u7684\u91cd\u8981\u8d21\u732e\u5df2\u5728\u4e24\u5377\u4e2d\u91cd\u5370[Swar90]\u3002</p> <p>\u8ba1\u7b97\u673a\u7b97\u672f\u9886\u57df\u7684\u65b0\u60f3\u6cd5\u4f1a\u51fa\u73b0\u5728\u88ab\u79f0\u4e3a ARITH-n \u7684\u4f1a\u8bae\u4e2d\uff0c\u4e24\u5e74\u4e00\u6b21\uff0c\u5728\u5947\u6570\u5e74\u77e9\u5f62[ARIT]\u3002\u5176\u5b83\u4f1a\u8bae\u5305\u62ec\uff1a</p> <ul> <li>Asilomar Conference on Signals, Systems, and Computers [Asil]</li> <li>International Conference on Circuits and Systems [ICCS]</li> <li>Midwest Symposium on Circuits and Systems [MSCS]</li> <li>International Conference on Computer Design [ICCD]</li> </ul> <p>\u76f8\u5173\u671f\u520a\u5305\u62ecIEEE Transactions on Computers[TrCo]\uff0c\u7279\u522b\u662f\u5176\u4e2d\u6709\u5173\u8ba1\u7b97\u673a\u7b97\u672f\u7684\u671f\u520a\uff1a</p> <ul> <li>IEEE Transactions on Circuits and Systems[TrCS]</li> <li>Computers &amp; Mathematics with Applications[CoMa]</li> <li>IET Circuits, Devices &amp; Systems[CDS], IET Computers &amp; Digital Techniques[CDT]</li> <li>IEEE Transactions on VLSI Systems[TrVL]</li> <li>Journal of VLSI Signal Processing [JVSP]</li> </ul>"},{"location":"Preface_2nd/","title":"\u7b2c\u4e8c\u7248\u5e8f\u8a00","text":"<p>\u81ea\u300aCOMPUTER ARITHMETIC : Algorithms and Hardware Designs\u300b\u7b2c\u4e00\u7248\u51fa\u7248\u4ee5\u6765\uff0c\u5df2\u7ecf\u8fc7\u53bb\u4e86\u5341\u5e74\u3002\u5c3d\u7ba1\u8fc7\u53bb\u5341\u5e74\u7b97\u672f\u7b97\u6cd5\u548c\u5b9e\u73b0\u6280\u672f\u5728\u4e0d\u65ad\u5730\u8fdb\u6b65\uff0c\u4f46\u8be5\u4e66\u7684\u9876\u5c42\u8bbe\u8ba1\u4ecd\u7136\u5f88\u5408\u7406\u3002\u56e0\u6b64\u9664\u4e86\u5305\u62ec\u4e00\u4e2a\u6709\u5173\u53ef\u91cd\u6784\u7b97\u672f\u7684\u65b0\u7ae0\u8282\u5916\uff0c\u56feP.1\u4e2d\u63cf\u8ff0\u7684\u90e8\u5206\uff08Part\uff09\u548c\u7ae0\u8282\u5c06\u5728\u7b2c\u4e8c\u7248\u4fdd\u6301\u4e0d\u53d8\u3002\u65b0\u7684\u4e00\u7ae0\u53d6\u4ee3\u4e86\u539f\u5148\u7684\u7b2c28\u7ae0\uff0c\u5176\u539f\u5148\u5185\u5bb9\u88ab\u5b89\u6392\u5230\u4e86\u9644\u9875\u4e2d\u3002\u4f5c\u8005\u5c42\u8003\u8651\u6dfb\u52a0\u4e00\u4e2a\u9644\u5f55\uff0c\u4ee5\u5217\u51fa\u7f51\u7ad9\u548c\u5176\u5b83\u4e92\u8054\u7f51\u8d44\u6e90\uff0c\u4ee5\u4f9b\u8fdb\u4e00\u6b65\u5b66\u4e60\u3002\u4f46\u4e92\u8054\u7f51\u8d44\u6e90\u7684\u4f4d\u7f6e\u548c\u5185\u5bb9\u662f\u9ad8\u5ea6\u52a8\u6001\u7684\uff0c\u56e0\u6b64\u4f5c\u8005\u51b3\u5b9a\u5c06\u8fd9\u4e9b\u4fe1\u606f\u653e\u5728\u4f5c\u8005\u4e3a\u672c\u4e66\u5efa\u7acb\u7684\u914d\u5957\u7f51\u7ad9\u4e0a\uff0c\u53ef\u901a\u8fc7\u4ed6\u7684\u4e2a\u4eba\u7f51\u7ad9\u8bbf\u95ee\uff1a</p> <p>http://www.ece.ucsb.edu/~parhami/</p> <p>\u4e4b\u6240\u4ee5\u6dfb\u52a0\u6709\u5173\u53ef\u91cd\u6784\u7b97\u672f\u7684\u65b0\u7ae0\u8282\uff0c\u662f\u56e0\u4e3a\u73b0\u5728\u8d8a\u6765\u8d8a\u591a\u7684\u7b97\u672f\u529f\u80fd\u662f\u5728FPGA\u6216\u7c7bFPGA\u7684\u53ef\u914d\u7f6e\u903b\u8f91\u5668\u4ef6\u4e0a\u5b9e\u73b0\u7684\u3002\u8fd9\u7c7b\u65b9\u6cd5\u5bf9\u4e8e\u65b0\u8bbe\u8ba1\u7684\u539f\u578b\u5f00\u53d1\u3001\u5c0f\u6279\u91cf\u6216\u72ec\u4e00\u65e0\u4e8c\u7684\u7cfb\u7edf\uff0c\u6216\u8005\u9700\u8981\u5728\u73b0\u573a\u5347\u7ea7\u66f4\u65b0\uff0c\u5feb\u901f\u53d1\u5c55\u7684\u4ea7\u54c1\uff0c\u90fd\u662f\u975e\u5e38\u5177\u6709\u5438\u5f15\u529b\u7684\u3002\u56e0\u6b64\u63cf\u8ff0\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u88ab\u8ba4\u4e3a\u5408\u7406\u7684\u8bbe\u8ba1\u4ee5\u53ca\u8bbe\u8ba1\u7b56\u7565\u4e5f\u662f\u975e\u5e38\u6709\u7528\u7684\u3002\u65b0\u6750\u6599\u4e0e\u7b2c\u4e03\u90e8\u5206\u7684\u5176\u5b83\u4e09\u7ae0\u80fd\u5f88\u597d\u5730\u878d\u5408\u5728\u4e00\u8d77\uff0c\u6240\u6709\u7684\u8fd9\u4e9b\u90fd\u662f\u6709\u5173\u5b9e\u73b0\uff08implement\uff09\u7684\u4e3b\u9898\u3002\u65b0\u7684\u7b2c28\u7ae0\u6d89\u53ca\u7684\u4f8b\u5b50\u5305\u62ec\u57fa\u4e8e\u67e5\u627e\u8868\u7684\u51fd\u6570\u6c42\u503c\uff0c\u4ee5\u53caFPGA\u4e0a\u7684\u51e0\u4e2a\u52a0\u6cd5\u5668\u548c\u4e58\u6cd5\u5668\u8bbe\u8ba1\u3002</p> <p>\u7b2c\u4e8c\u7248\u4e5f\u8fdb\u884c\u4e86\u4e00\u4e9b\u6269\u5145\u3001\u6539\u8fdb\u3001\u6f84\u6e05\u548c\u66f4\u6b63\u3002\u8bb8\u591a\u8282\u90fd\u65b0\u589e\u4e86\u6750\u6599\uff0c\u4ee5\u53cd\u6620\u65b0\u7684\u60f3\u6cd5\u4e0e\u53d1\u5c55\u3002\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u65e7\u7684\u5c0f\u7ed3\u88ab\u5408\u5e76\uff0c\u5e76\u4e3a\u65b0\u7684\u60f3\u6cd5\u6216\u8bbe\u8ba1\u521b\u5efa\u4e86\u65b0\u7684\u5c0f\u8282\u3002\u5728\u7b2c\u4e8c\u7248\u4e2d\uff0c\u65b0\u7684\u5408\u6269\u5145\u7684\u4e3b\u9898\u4ee5\u7ae0\u8282\u4f4d\u957f\u5ea6\u8fdb\u884c\u4e86\u5904\u7406\uff0c\u5305\u62ec\u4ee5\u4e0b\u5185\u5bb9\uff08\u62ec\u53f7\u5185\u4e3a\u7ae0\u8282\u7f16\u53f7\uff09\uff1a</p> <ul> <li>\u6a21\u4e8c\u64cd\u4f5c\u6570\u548c\u591a\u64cd\u4f5c\u6570\u52a0\u6cd5\u5668\uff087.6, 8.6\uff09</li> <li>\u622a\u65ad\u6811\u548c\u9635\u5217\u4e58\u6cd5\u5668\uff0811.4\uff09</li> <li>\u91cd\u53e0\u5546\u4f4d\u9009\u62e9\uff0815.2\uff09</li> <li>\u8499\u54e5\u9a6c\u5229\u6a21\u4e58\u6cd5/\u7ea6\u5316\uff0815.4\uff09</li> <li>\u4f5c\u4e3a\u9664\u6cd5\u7279\u6b8a\u60c5\u51b5\u7684\u5012\u6570\uff0815.5\uff09</li> <li>\u6d6e\u70b9FMA\u5355\u5143\uff08fused-multiply-add\uff09\uff0818.5\uff09</li> <li>\u533a\u95f4\u7b97\u6570\uff0c\u5305\u62ec\u533a\u95f4\u725b\u987f\u8fed\u4ee3\u6cd5\uff0820.6\uff09</li> <li>bipartite table\u548cmultipartie table\u65b9\u6cd5\uff0824.6\uff09</li> </ul> <p>\u6b64\u5916\u8fd8\u5f15\u5165\u4e86\u65b0\u7684\u7ae0\u672b\u95ee\u9898\uff0c\u4f7f\u5f97\u95ee\u9898\u7684\u603b\u6570\u8fbe\u5230\u4e86718\u4e2a\u3002\u4f5c\u8005\u6ca1\u5728\u8fd9\u7bc7\u5e8f\u8a00\u4e2d\u52a0\u5165\u65b0\u7684\u4e00\u822c\u53c2\u8003\u8d44\u6599\uff0c\u800c\u662f\u8c8c\u7f8e\u5730\u66f4\u65b0\u548c\u62d3\u5c55\u4e86\u7b2c\u4e00\u7248\u5e8f\u8a00\u672b\u5c3e\u7684\u53c2\u8003\u8d44\u6599\u6e05\u5355\uff0c\u4ee5\u4fbf\u63d0\u4f9b\u4e00\u4e2a\u5355\u4e00\u7684\u7efc\u5408\u6e05\u5355\u3002</p> <p>\u4e00\u5982\u65e2\u5f80\uff0c\u4f5c\u8005\u6b22\u8fce\u5927\u5bb6\u5c31\u53d1\u73b0\u7684\u9519\u8bef\u3001\u9700\u8fdb\u4e00\u6b65\u6f84\u6e05\u7684\u4e3b\u9898\u3001\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u4ee5\u53ca\u5173\u4e8e\u65b0\u4e3b\u9898\u6216\u7ec3\u4e60\u7684\u60f3\u6cd5\u8fdb\u884c\u4ea4\u6d41</p> <p>Behrooz Parhami</p> <p>August 2009, Santa Barbara, CA</p>"},{"location":"translation/","title":"\u4f5c\u8005\u7f51\u7ad9","text":"<p>https://web.ece.ucsb.edu/~parhami/text_comp_arit.htm</p> <p>https://web.ece.ucsb.edu/~parhami/ece_252b.htm</p>"},{"location":"Part_01/","title":"\u6570\u5b57\u7684\u8868\u793a\u65b9\u6cd5","text":"<p>NUMBER REPRESENTATION</p> <p>\u201cMathematics, like the Nile, begins in minuteness, but ends in magnificence.\u201d    \u2014 CHARLES CALEB COLTON</p> <p>\u201c\u6570\u5b66\u5c31\u50cf\u5c3c\u7f57\u6cb3\u4e00\u6837\uff0c\u59cb\u4e8e\u5fae\u5c0f\uff0c\u7ec8\u4e8e\u4f1f\u5927\u3002\u201d  \u2014 \u67e5\u5c14\u65af\u00b7\u5361\u83b1\u00b7\u4f2f\u00b7\u79d1\u5c14\u987f</p> <p>\u201cOf all the great things that are found among us the existence of nothing is the greatest.\u201d \u2014 LEONARDO DAVINCI</p> <p>\u201c\u5728\u6211\u4eec\u53d1\u73b0\u7684\u4f1f\u5927\u4e8b\u7269\u4e2d\uff0c\u201c\u65e0\u201d\u7684\u5b58\u5728\u662f\u6700\u4f1f\u5927\u7684\u3002\u201d  \u2014 \u83b1\u6602\u7eb3\u591a\u00b7\u8fbe\u82ac\u5947</p> <p>NUMBER REPRESENTATION IS ARGUABLY THE MOST  IMPORTANT TOPIC IN COMPUTER arithmetic. In justifying this claim, it suffices to note that several important classes of number representations were discovered, or rescued from obscurity, by computer designers in their quest for simpler and faster circuits. Furthermore, the choice of number representation affects the implementation cost and delay of all arithmetic operations. We thus begin our study of computer arithmetic by reviewing conventional and exotic representation methods for integers. Conventional methods are of course used extensively. Some of the unconventional methods have been applied to special-purpose digital systems or in the intermediate steps of arithmetic hardware implementations where they are often invisible to computer users. This part consists of the following four chapters:</p> <p>\u6570\u5b57\u8868\u793a\u53ef\u4ee5\u8bf4\u662f\u8ba1\u7b97\u673a\u7b97\u672f\u4e2d\u6700\u91cd\u8981\u7684\u4e3b\u9898\u3002 \u4e3a\u4e86\u8bc1\u660e\u8fd9\u4e00\u8bf4\u6cd5\u7684\u5408\u7406\u6027\uff0c\u53ea\u9700\u6307\u51fa\u51e0\u7c7b\u91cd\u8981\u7684\u6570\u5b57\u8868\u793a\u5f62\u5f0f\u662f\u7531\u8ba1\u7b97\u673a\u8bbe\u8ba1\u8005\u5728\u5bfb\u6c42\u66f4\u7b80\u5355\u548c\u66f4\u5feb\u7684\u7535\u8def\u65f6\u53d1\u73b0\u7684\u6216\u4ece\u9ed8\u9ed8\u65e0\u95fb\u4e2d\u62ef\u6551\u51fa\u6765\u7684\u3002 \u6b64\u5916\uff0c\u6570\u5b57\u8868\u793a\u7684\u9009\u62e9\u4f1a\u5f71\u54cd\u6240\u6709\u7b97\u672f\u8fd0\u7b97\u7684\u5b9e\u73b0\u6210\u672c\u548c\u5ef6\u8fdf\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u901a\u8fc7\u56de\u987e\u6574\u6570\u7684\u4f20\u7edf\u548c\u5947\u5f02\u8868\u793a\u65b9\u6cd5\u6765\u5f00\u59cb\u8ba1\u7b97\u673a\u7b97\u672f\u7684\u7814\u7a76\u3002 \u4f20\u7edf\u65b9\u6cd5\u5f53\u7136\u88ab\u5e7f\u6cdb\u4f7f\u7528\u3002 \u4e00\u4e9b\u975e\u5e38\u89c4\u65b9\u6cd5\u5df2\u5e94\u7528\u4e8e\u4e13\u7528\u6570\u5b57\u7cfb\u7edf\u6216\u7b97\u672f\u786c\u4ef6\u5b9e\u73b0\u7684\u4e2d\u95f4\u6b65\u9aa4\uff0c\u5176\u4e2d\u5b83\u4eec\u901a\u5e38\u5bf9\u8ba1\u7b97\u673a\u7528\u6237\u6765\u8bf4\u662f\u4e0d\u53ef\u89c1\u7684\u3002 \u672c\u90e8\u5206\u7531\u4ee5\u4e0b\u56db\u7ae0\u7ec4\u6210\uff1a</p> <ul> <li>\u7b2c\u4e00\u7ae0 \u6570\u5b57\u4e0e\u7b97\u672f Numbers and Arithmetic</li> <li>\u7b2c\u4e8c\u7ae0 \u6709\u7b26\u53f7\u6570\u7684\u8868\u793a Representing Signed Numbers</li> <li>\u7b2c\u4e09\u7ae0 \u5197\u4f59\u6570\u7cfb\u7edf Redundant Number Systems</li> <li>\u7b2c\u56db\u7ae0 \u5269\u4f59\u6570\u7cfb\u7edf Residue Number Systems</li> </ul>"},{"location":"Part_01/01/","title":"1. \u6570\u5b57\u4e0e\u7b97\u672f","text":"<p>Numbers and Arithmetic</p> <p>\u201cMathematics is the queen of the sciences and arithmetic is the queen of mathematics.\u201d </p> <p>\u200b                                                                                                       CARL FRIEDRICH GAUSS</p> <p>\u201c\u6570\u5b66\u662f\u79d1\u5b66\u7684\u5973\u738b\uff0c\u7b97\u672f\u662f\u6570\u5b66\u7684\u5973\u738b\u3002\u201d</p> <p>\u200b                                  \u5361\u5c14\u00b7\u5f17\u91cc\u5fb7\u91cc\u5e0c\u00b7\u9ad8\u65af</p> <p>This chapter motivates the reader, sets the context in which the material in the rest of the book is presented, and reviews positional representations of fixed-point numbers. The chapter ends with a review of methods for number radix conversion and a preview of other number representation methods to be covered. </p> <p>\u672c\u7ae0\u65e8\u5728\u6fc0\u53d1\u8bfb\u8005\u7684\u5174\u8da3\uff0c\u8bbe\u7f6e\u672c\u4e66\u5176\u4f59\u90e8\u5206\u7684\u6750\u6599\u5448\u73b0\u7684\u80cc\u666f\uff0c\u5e76\u56de\u987e\u5b9a\u70b9\u6570\u7684\u4f4d\u7f6e\u8868\u793a\u3002\u672c\u7ae0\u6700\u540e\u56de\u987e\u4e86\u4e0d\u540c\u57fa\u6570\u8f6c\u6362\u7684\u65b9\u6cd5\u548c\u5176\u4ed6\u6570\u5b57\u8868\u793a\u65b9\u6cd5\u7684\u9884\u89c8\u3002</p> <p>Chapter topics include: \u7ae0\u8282\u4e3b\u9898\u5305\u62ec\uff1a</p> <p>1.1 \u4ec0\u4e48\u662f\u8ba1\u7b97\u673a\u7b97\u672f WHAT IS COMPUTER ARITHMETIC</p> <p>1.2 \u542f\u53d1\u6027\u793a\u4f8b MOTIVATING EXAMPLES</p> <p>1.3 \u6570\u5b57\u53ca\u5176\u7f16\u7801 NUMBERS AND THEIR ENCODINGS</p> <p>1.4 \u56fa\u5b9a\u57fa\u6570\u7684\u4f4d\u7f6e\u6570\u5b57\u8868\u793a\u7cfb\u7edf FIXED RADIX POSITIONAL NUMBER SYSTEMS</p> <p>1.5 \u6570\u5b57\u57fa\u6570\u8f6c\u6362 NUMBER RADIX CONVERSION</p> <p>1.6 \u6570\u8868\u793a\u7cfb\u7edf\u7684\u5206\u7c7b CLASSES OF NUMBER REPRESENTATIONS</p>"},{"location":"Part_01/01/#11","title":"1.1 \u4ec0\u4e48\u662f\u8ba1\u7b97\u673a\u7b97\u672f\uff1f","text":"<p>A sequence of events, begun in late 1994 and extending into 1995, embarrassed the world\u2019s largest computer chip manufacturer and put the normally dry subject of computer arithmetic on the front pages of major newspapers. The events were rooted in the work of Thomas Nicely, a mathematician at the Lynchburg College in Virginia, who was interested in twin primes (consecutive odd numbers such as 29 and 31 that are both prime). Nicely\u2019s work involved the distribution of twin primes and, particularly, the sum of their reciprocals  S = 1 / 5 + 1 / 7 + 1 / 11 + 1 / 13 + 1 / 17 + 1 / 19 + 1 / 29 + 1 / 31 +  \u00b7 \u00b7 \u00b7 + 1 /p + 1 /(p + 2 ) + \u00b7 \u00b7 \u00b7 .  While it is known that the infinite sum  S  has a finite value, no one knows what the value is. </p> <p>\u4ece 1994 \u5e74\u5e95\u5f00\u59cb\u4e00\u76f4\u6301\u7eed\u5230 1995 \u5e74\u7684\u4e00\u7cfb\u5217\u4e8b\u4ef6\u8ba9\u4e16\u754c\u4e0a\u6700\u5927\u7684\u8ba1\u7b97\u673a\u82af\u7247\u5236\u9020\u5546\u9677\u5165\u5c34\u5c2c\u5883\u5730\uff0c\u5e76\u5c06\u901a\u5e38\u67af\u71e5\u7684\u8ba1\u7b97\u673a\u7b97\u672f\u4e3b\u9898\u767b\u4e0a\u4e86\u5404\u5927\u62a5\u7eb8\u7684\u5934\u7248\u3002\u8fd9\u4e9b\u4e8b\u4ef6\u6e90\u4e8e\u5f17\u5409\u5c3c\u4e9a\u6797\u5947\u5821\u5b66\u9662\u6570\u5b66\u5bb6\u6258\u9a6c\u65af\u00b7\u5c3c\u65af\u5229 (Thomas Nicely) \u7684\u5de5\u4f5c\uff0c\u4ed6\u5bf9\u5b6a\u751f\u7d20\u6570\uff08\u8fde\u7eed\u5947\u6570\uff0c\u4f8b\u5982 29 \u548c 31 \u90fd\u662f\u7d20\u6570\uff09\u5f88\u611f\u5174\u8da3\u3002 Nicely \u7684\u5de5\u4f5c\u6d89\u53ca\u5b6a\u751f\u7d20\u6570\u7684\u5206\u5e03\uff0c\u7279\u522b\u662f\u5b83\u4eec\u7684\u5012\u6570\u4e4b\u548c S = 1 / 5 + 1 / 7 + 1 / 11 + 1 / 13 + 1 / 17 + 1 / 19 + 1 / 29 + 1 / 31 +\u00b7  \u00b7 \u00b7 + 1 /p + 1 /(p + 2 ) + \u00b7 \u00b7 \u00b7 \u3002\u867d\u7136\u5df2\u77e5\u65e0\u9650\u548c S \u662f\u4e00\u4e2a\u6709\u9650\u503c\uff0c\u4f46\u6ca1\u6709\u4eba\u77e5\u9053\u8be5\u503c\u662f\u591a\u5c11\u3002</p> <p>Nicely was using several different computers for his work and in March 1994 added a machine based on the Intel Pentium processor to his collection. Soon he began noticing inconsistencies in his calculations and was able to trace them back to the values computed for \\(1/p\\) and \\(1/(p + 2 )\\) on the Pentium processor. At first, he suspected his own programs, the compiler, and the operating system, but by October, he became convinced that the Intel Pentium chip was at fault. This suspicion was confirmed by several other researchers following a barrage of e-mail exchanges and postings on the Internet.</p> <p>Nicely \u5728\u5de5\u4f5c\u4e2d\u4f7f\u7528\u4e86\u51e0\u53f0\u4e0d\u540c\u7684\u8ba1\u7b97\u673a\uff0c\u5e76\u4e8e 1994 \u5e74 3 \u6708\u5728\u4ed6\u7684\u6536\u85cf\u4e2d\u6dfb\u52a0\u4e86\u4e00\u53f0\u57fa\u4e8e Intel Pentium \u5904\u7406\u5668\u7684\u8ba1\u7b97\u673a\u3002\u5f88\u5feb\u4ed6\u5f00\u59cb\u6ce8\u610f\u5230 \u8ba1\u7b97\u4e2d\u7684\u4e0d\u4e00\u81f4\u4e4b\u5904\uff0c\u5e76\u80fd\u591f\u5c06\u5176\u8ffd\u6eaf\u5230\u5954\u817e\u5904\u7406\u5668\u4e0a\u4e3a \\(1/p\\) \u548c \\(1/(p + 2 )\\) \u8ba1\u7b97\u7684\u503c\u3002\u8d77\u521d\uff0c\u4ed6\u6000\u7591\u81ea\u5df1\u7684\u7a0b\u5e8f\u3001\u7f16\u8bd1\u5668\u548c\u64cd\u4f5c\u7cfb\u7edf\uff0c\u4f46\u5230\u4e86\u5341\u6708\u4efd\uff0c\u4ed6\u786e\u4fe1\u82f1\u7279\u5c14\u5954\u817e\u82af\u7247\u51fa\u4e86\u95ee\u9898\u3002\u7ecf\u8fc7\u4e00\u7cfb\u5217\u7535\u5b50\u90ae\u4ef6\u4ea4\u6d41\u548c\u4e92\u8054\u7f51\u4e0a\u7684\u53d1\u5e16\u540e\uff0c\u5176\u4ed6\u51e0\u4f4d\u7814\u7a76\u4eba\u5458\u8bc1\u5b9e\u4e86\u8fd9\u4e00\u6000\u7591\u3002</p> <p>The diagnosis finally came from Tim Coe, an engineer at Vitesse Semiconductor. Coe built a model of Pentium\u2019s floating-point division hardware based on the radix-4 SRT (named for Sweeny, Robertson, and Tocher) algorithm and came up with an example that produces the worst-case error. Using double-precision floating-point computation, the ratio  c = 4 195 835 / 3 145 727 = 1.333 820 44 \u00b7 \u00b7 \u00b7 was computed as 1.333 739 06 on the Pentium. This latter result is accurate to only 14 bits; the error is even larger than that of single-precision floating-point and more than 10 orders of magnitude worse than what is expected of double-precision computation [Mole95]. </p> <p>\u6700\u7ec8\u8bca\u65ad\u6765\u81eaVitesse Semiconductor \u7684\u5de5\u7a0b\u5e08Tim Coe\u3002 Coe \u57fa\u4e8e radix-4 SRT\uff08\u4ee5 Sweeny\u3001Robertson \u548c Tocher \u547d\u540d\uff09\u7b97\u6cd5\u6784\u5efa\u4e86 Pentium \u6d6e\u70b9\u9664\u6cd5\u786c\u4ef6\u6a21\u578b\uff0c\u5e76\u63d0\u51fa\u4e86\u4e00\u4e2a\u4ea7\u751f\u6700\u574f\u60c5\u51b5\u9519\u8bef\u7684\u793a\u4f8b\u3002\u4f7f\u7528\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u8ba1\u7b97\uff0c\u6bd4\u7387 c = 4 195 835 / 3 145 727 = 1.333 820 44 \u00b7 \u00b7 \u00b7 \u5728\u5954\u817eCPU\u4e0a\u8ba1\u7b97\u4e3a 1.333 739 06\u3002\u540e\u4e00\u4e2a\u7ed3\u679c\u4ec5\u7cbe\u786e\u5230 14 \u6bd4\u7279\uff1b\u8be5\u8bef\u5dee\u751a\u81f3\u6bd4\u5355\u7cbe\u5ea6\u6d6e\u70b9\u7684\u8bef\u5dee\u8fd8\u8981\u5927\uff0c\u5e76\u4e14\u6bd4\u53cc\u7cbe\u5ea6\u8ba1\u7b97\u7684\u9884\u671f\u8bef\u5dee\u8fd8\u8981\u5dee 10 \u4e2a\u6570\u91cf\u7ea7\u4ee5\u4e0a [Mole95]\u3002</p> <p>The rest, as they say, is history. Intel at first dismissed the severity of the problem and admitted only a \u201csubtle flaw,\u201d with a probability of 1 in 9 billion, or once in 27,000 years for the average spreadsheet user, of leading to computational errors. It nevertheless published a \u201cwhite paper\u201d that described the bug and its potential consequences and announced a replacement policy for the defective chips based on \u201ccustomer need\u201d; that is, customers had to show that they were doing a lot of mathematical calculations to get a free replacement. Under heavy criticism from customers, manufacturers using the Pentium chip in their products, and the on-line community, Intel later revised its policy to no-questions-asked replacement. </p> <p>\u5176\u4f59\u7684\uff0c\u6b63\u5982\u4ed6\u4eec\u6240\u8bf4\uff0c\u662f\u5386\u53f2\u3002\u82f1\u7279\u5c14\u8d77\u521d\u5426\u8ba4\u4e86\u95ee\u9898\u7684\u4e25\u91cd\u6027\uff0c\u53ea\u627f\u8ba4\u5b58\u5728\u4e00\u4e2a\u201c\u5fae\u5999\u7684\u7f3a\u9677\u201d\uff0c\u5bfc\u81f4\u8ba1\u7b97\u9519\u8bef\u7684\u6982\u7387\u4e3a 90 \u4ebf\u5206\u4e4b\u4e00\uff0c\u6216\u8005\u5bf9\u4e8e\u666e\u901a\u7535\u5b50\u8868\u683c\u7528\u6237\u6765\u8bf4\u6bcf 27,000 \u5e74\u4e00\u6b21\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u5b83\u8fd8\u662f\u53d1\u5e03\u4e86\u4e00\u4efd\u201c\u767d\u76ae\u4e66\u201d\uff0c\u63cf\u8ff0\u4e86\u8be5\u6f0f\u6d1e\u53ca\u5176\u6f5c\u5728\u540e\u679c\uff0c\u5e76\u5ba3\u5e03\u4e86\u57fa\u4e8e\u201c\u5ba2\u6237\u9700\u6c42\u201d\u7684\u7f3a\u9677\u82af\u7247\u7684\u66f4\u6362\u653f\u7b56\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u5ba2\u6237\u5fc5\u987b\u8bc1\u660e\u4ed6\u4eec\u8fdb\u884c\u4e86\u5927\u91cf\u7684\u6570\u5b66\u8ba1\u7b97\u624d\u80fd\u83b7\u5f97\u514d\u8d39\u66f4\u6362\u3002\u5728\u5ba2\u6237\u3001\u4ea7\u54c1\u4e2d\u4f7f\u7528\u5954\u817e\u82af\u7247\u7684\u5236\u9020\u5546\u4ee5\u53ca\u5728\u7ebf\u793e\u533a\u7684\u4e25\u5389\u6279\u8bc4\u4e0b\uff0c\u82f1\u7279\u5c14\u540e\u6765\u5c06\u5176\u653f\u7b56\u4fee\u6539\u4e3a\u65e0\u6761\u4ef6\u66f4\u6362\u3002</p> <p>Whereas supercomputing, microchips, computer networks, advanced applications (particularly game-playing programs), and many other aspects of computer technology have made the news regularly, the Intel Pentium bug was the first instance of arithmetic (or anything inside the CPU for that matter) becoming front-page news. While this can be interpreted as a sign of pedantic dryness, it is more likely an indicator of stunning technological success. Glaring software failures have come to be routine events in our information-based society, but hardware bugs are rare and newsworthy. </p> <p>\u800c\u8d85\u7ea7\u8ba1\u7b97\u3001\u5fae\u82af\u7247\u3001\u8ba1\u7b97\u673a\u7f51\u7edc\u3001\u9ad8\u7ea7\u5e94\u7528\uff08\u7279\u522b\u662f\u6e38\u620f\u7a0b\u5e8f\uff09\u4ee5\u53ca\u8ba1\u7b97\u673a\u6280\u672f\u7684\u8bb8\u591a\u5176\u4ed6\u65b9\u9762\u90fd\u7ecf\u5e38\u6210\u4e3a\u65b0\u95fb\uff0c\u82f1\u7279\u5c14\u5954\u817e bug \u662f\u7b97\u672f\uff08\u6216 CPU \u5185\u90e8\u7684\u4efb\u4f55\u76f8\u5173\u4e8b\u7269\uff09\u6210\u4e3a\u5934\u7248\u65b0\u95fb\u7684\u7b2c\u4e00\u4e2a\u5b9e\u4f8b\u3002\u867d\u7136\u8fd9\u53ef\u4ee5\u88ab\u89e3\u91ca\u4e3a\u8fc2\u8150\u67af\u71e5\u7684\u8868\u73b0\uff0c\u4f46\u5b83\u66f4\u53ef\u80fd\u662f\u4ee4\u4eba\u60ca\u53f9\u7684\u6280\u672f\u6210\u529f\u7684\u6307\u6807\u3002\u5728\u6211\u4eec\u7684\u4fe1\u606f\u793e\u4f1a\u4e2d\uff0c\u660e\u663e\u7684\u8f6f\u4ef6\u6545\u969c\u5df2\u6210\u4e3a\u5bb6\u5e38\u4fbf\u996d\uff0c\u4f46\u786c\u4ef6\u9519\u8bef\u5374\u5f88\u5c11\u89c1\u4e14\u5177\u6709\u65b0\u95fb\u4ef7\u503c\u3002</p> <p>Having read the foregoing account, you may wonder what the radix-4 SRT division algorithm is and how it can lead to such problems. Well, that\u2019s the whole point of this introduction! You need computer arithmetic to understand the rest of the story. Computer arithmetic is a subfield of digital computer organization. It deals with the hardware realization of arithmetic functions to support various computer architectures as well as with arithmetic algorithms for firmware or software implementation. A major thrust of digital computer arithmetic is the design of hardware algorithms and circuits to enhance the speed of numeric operations. Thus much of what is presented here complements the  architectural  and  algorithmic  speedup techniques studied in the context of high-performance computer architecture and parallel processing. </p> <p>\u8bfb\u5b8c\u4e0a\u9762\u7684\u5185\u5bb9\uff0c\u4f60\u53ef\u80fd\u60f3\u77e5\u9053radix-4 SRT\u9664\u6cd5\u7b97\u6cd5\u662f\u4ec0\u4e48\u4ee5\u53ca\u5b83\u662f\u5982\u4f55\u5bfc\u81f4\u6b64\u7c7b\u95ee\u9898\u7684\u3002\u597d\u4e86\uff0c\u8fd9\u5c31\u662f\u672c\u6b21\u4ecb\u7ecd\u7684\u91cd\u70b9\uff01\u4f60\u9700\u8981\u8ba1\u7b97\u673a\u7b97\u672f\u6765\u7406\u89e3\u6545\u4e8b\u7684\u5176\u4f59\u90e8\u5206\u3002\u8ba1\u7b97\u673a\u7b97\u672f\u662f\u6570\u5b57\u8ba1\u7b97\u673a\u7ec4\u7ec7\u7684\u4e00\u4e2a\u5b50\u9886\u57df\u3002\u5b83\u6d89\u53ca\u7b97\u672f\u51fd\u6570\u7684\u786c\u4ef6\u5b9e\u73b0\u4ee5\u652f\u6301\u5404\u79cd\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\u4ee5\u53ca\u7528\u4e8e\u56fa\u4ef6\u6216\u8f6f\u4ef6\u5b9e\u73b0\u7684\u7b97\u672f\u7b97\u6cd5\u3002\u6570\u5b57\u8ba1\u7b97\u673a\u7b97\u672f\u7684\u4e00\u4e2a\u4e3b\u8981\u63a8\u52a8\u529b\u662f\u786c\u4ef6\u7b97\u6cd5\u548c\u7535\u8def\u7684\u8bbe\u8ba1\uff0c\u4ee5\u63d0\u9ad8\u6570\u5b57\u8fd0\u7b97\u7684\u901f\u5ea6\u3002\u56e0\u6b64\uff0c\u8fd9\u91cc\u4ecb\u7ecd\u7684\u5927\u90e8\u5206\u5185\u5bb9\u8865\u5145\u4e86\u5728\u9ad8\u6027\u80fd\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\u548c\u5e76\u884c\u5904\u7406\u7684\u80cc\u666f\u4e0b\u7814\u7a76\u7684\u4f53\u7cfb\u7ed3\u6784\u548c\u7b97\u6cd5\u52a0\u901f\u6280\u672f\u3002</p> <p>Much of our discussion relates to the design of top-of-the-line CPUs with high-performance parallel arithmetic circuits. However, we will at times also deal with slow bit-serial designs for embedded applications, where implementation cost and input/output pin limitations are of prime concern. It would be a mistake, though, to conclude that computer arithmetic is useful only to computer designers. We will see shortly that you can use scientific calculators more effectively and write programs that are more accurate and/or more efficient after a study of computer arithmetic. You will be able to render informed judgment when faced with the problem of choosing a digital signal processor chip for your project. And, of course, you will know what exactly went wrong in the Pentium. </p> <p>\u6211\u4eec\u7684\u5927\u90e8\u5206\u8ba8\u8bba\u90fd\u4e0e\u5177\u6709\u9ad8\u6027\u80fd\u5e76\u884c\u8fd0\u7b97\u7535\u8def\u7684\u9876\u7ea7 CPU \u7684\u8bbe\u8ba1\u6709\u5173\u3002\u7136\u800c\uff0c\u6211\u4eec\u6709\u65f6\u4e5f\u4f1a\u5904\u7406\u5d4c\u5165\u5f0f\u5e94\u7528\u7684\u6162\u901f\u4f4d\u4e32\u884c\u8bbe\u8ba1\uff0c\u5176\u4e2d\u5b9e\u73b0\u6210\u672c\u548c\u8f93\u5165/\u8f93\u51fa\u5f15\u811a\u9650\u5236\u662f\u9996\u8981\u8003\u8651\u7684\u95ee\u9898\u3002\u7136\u800c\uff0c\u5982\u679c\u8ba4\u4e3a\u8ba1\u7b97\u673a\u7b97\u672f\u53ea\u5bf9\u8ba1\u7b97\u673a\u8bbe\u8ba1\u8005\u6709\u7528\uff0c\u90a3\u5c31\u9519\u4e86\u3002\u6211\u4eec\u5f88\u5feb\u5c31\u4f1a\u770b\u5230\uff0c\u5728\u5b66\u4e60\u8ba1\u7b97\u673a\u7b97\u672f\u4e4b\u540e\uff0c\u60a8\u53ef\u4ee5\u66f4\u6709\u6548\u5730\u4f7f\u7528\u79d1\u5b66\u8ba1\u7b97\u5668\u5e76\u7f16\u5199\u66f4\u51c6\u786e\u548c/\u6216\u66f4\u9ad8\u6548\u7684\u7a0b\u5e8f\u3002\u4f60\u4f1a\u5f53\u9762\u4e34\u4e3a\u60a8\u7684\u9879\u76ee\u9009\u62e9\u6570\u5b57\u4fe1\u53f7\u5904\u7406\u5668\u82af\u7247\u7684\u95ee\u9898\u65f6\uff0c\u80fd\u591f\u505a\u51fa\u660e\u667a\u7684\u5224\u65ad\u3002\u5f53\u7136\uff0c\u60a8\u4e5f\u4f1a\u77e5\u9053\u5954\u817e\u5230\u5e95\u51fa\u4e86\u4ec0\u4e48\u95ee\u9898\u3002</p> <p></p> \u786c\u4ef6\uff08\u672c\u4e66\u7684\u91cd\u70b9\uff09 \u8f6f\u4ef6 \u4e3a\u57fa\u7840\u7b97\u672f\u548c\u5176\u4ed6\u8fd0\u7b97\u8bbe\u8ba1\u9ad8\u6548\u7684\u6570\u5b57\u7535\u8def \u5982 + \u3001 \u2212 \u3001 \u00d7 \u3001 \u00f7 \u3001\u5bf9\u6570\u3001\u6b63\u5f26\u548c\u4f59\u5f26\u3002 \u6570\u503c\u65b9\u6cd5\u6c42\u89e3\u7ebf\u6027\u65b9\u7a0b\u7ec4\uff0c\u504f\u5fae\u5206\u65b9\u7a0b\u7b49 \u95ee\u9898\uff1a \u7b97\u6cd5 \u9519\u8bef\u5206\u6790 \u901f\u5ea6/\u6210\u672c\u6743\u8861 \u786c\u4ef6\u5b9e\u73b0 \u6d4b\u8bd5\u3001\u9a8c\u8bc1 \u95ee\u9898\uff1a\u7b97\u6cd5  \u9519\u8bef\u5206\u6790 \u8ba1\u7b97\u590d\u6742\u5ea6 \u7f16\u7a0b \u6d4b\u8bd5\u3001\u9a8c\u8bc1 \u4e00\u822c\u7528\u9014 \u7279\u6b8a\u76ee\u7684\u7528\u9014 \u7075\u6d3b\u7684\u6570\u636e\u8def\u5f84 \u9002\u5408\u5e94\u7528\u9886\u57df\uff0c\u4f8b\u5982\u6570\u5b57\u6ee4\u6ce2 \u5feb\u901f\u539f\u59cb\u64cd\u4f5c\uff0c\u4f8b\u5982 + , \u2212 , \u00d7 , \u00f7 \u56fe\u50cf\u5904\u7406 \u57fa\u51c6\u6d4b\u8bd5 \u96f7\u8fbe\u8ffd\u8e2a <p>\u56fe1.1 \u8ba1\u7b97\u673a\u7b97\u672f\u7684\u8303\u56f4\u3002</p> <p>Figure 1.1 depicts the scope of computer arithmetic. On the hardware side, the focus is on implementing the four basic arithmetic operations (five, if you count square-rooting), as well as commonly used computations such as exponentials, logarithms, and trigonometric functions. For this, we need to develop algorithms, translate them to hardware structures, and choose from among multiple implementations based on cost\u2013performance criteria. Since the exact computations to be carried out by the general-purpose hardware are not known a priori, benchmarking is used to predict the overall system performance for typical operation mixes and to make various design decisions. </p> <p>\u56fe 1.1 \u63cf\u8ff0\u4e86\u8ba1\u7b97\u673a\u7b97\u672f\u7684\u8303\u56f4\u3002\u5728\u786c\u4ef6\u65b9\u9762\uff0c\u91cd\u70b9\u662f\u5b9e\u73b0\u56db\u79cd\u57fa\u672c\u7b97\u672f\u8fd0\u7b97\uff08\u5982\u679c\u7b97\u5e73\u65b9\u6839\u5219\u4e3a\u4e94\u79cd\uff09\uff0c\u4ee5\u53ca\u5e38\u7528\u7684\u8ba1\u7b97\uff0c\u4f8b\u5982\u6307\u6570\u3001\u5bf9\u6570\u548c\u4e09\u89d2\u51fd\u6570\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u9700\u8981\u5f00\u53d1\u7b97\u6cd5\uff0c\u5c06\u5176\u8f6c\u5316\u4e3a\u786c\u4ef6\u7ed3\u6784\uff0c\u5e76\u6839\u636e\u6027\u4ef7\u6bd4\u6807\u51c6\u4ece\u591a\u79cd\u5b9e\u73b0\u4e2d\u8fdb\u884c\u9009\u62e9\u3002\u7531\u4e8e\u5148\u9a8c\u672a\u77e5\u901a\u7528\u786c\u4ef6\u8981\u6267\u884c\u7684\u7cbe\u786e\u8ba1\u7b97\uff0c\u56e0\u6b64\u4f7f\u7528\u57fa\u51c6\u6d4b\u8bd5\u6765\u9884\u6d4b\u5178\u578b\u64cd\u4f5c\u7ec4\u5408\u7684\u6574\u4f53\u7cfb\u7edf\u6027\u80fd\u5e76\u505a\u51fa\u5404\u79cd\u8bbe\u8ba1\u51b3\u7b56\u3002</p> <p>On the software side, the primitive functions are given (e.g., in the form of a hardware chip such as a Pentium processor or a software tool such as Mathematica), and the task is to synthesize cost-effective algorithms, with desirable error characteristics, to solve various problems of interest. These topics are covered in numerical analysis and computational science courses and textbooks and are thus mostly outside the scope of this book. </p> <p>\u5728\u8f6f\u4ef6\u65b9\u9762\uff0c\u7ed9\u51fa\u4e86\u539f\u59cb\u529f\u80fd\uff08\u4f8b\u5982\uff0c\u4ee5\u5954\u817e\u5904\u7406\u5668\u7b49\u786c\u4ef6\u82af\u7247\u6216Mathematica\u7b49\u8f6f\u4ef6\u5de5\u5177\u7684\u5f62\u5f0f\uff09\uff0c\u4efb\u52a1\u662f\u7efc\u5408\u5177\u6709\u6210\u672c\u6548\u76ca\u7684\u7b97\u6cd5\uff0c\u5177\u6709\u7406\u60f3\u7684\u8bef\u5dee\u7279\u6027\uff0c\u4ee5\u89e3\u51b3\u5404\u79cd\u611f\u5174\u8da3\u7684\u95ee\u9898\u3002\u8fd9\u4e9b\u4e3b\u9898\u5305\u542b\u5728\u6570\u503c\u5206\u6790\u548c\u8ba1\u7b97\u79d1\u5b66\u8bfe\u7a0b\u548c\u6559\u79d1\u4e66\u4e2d\uff0c\u56e0\u6b64\u5927\u591a\u4e0d\u5c5e\u4e8e\u672c\u4e66\u7684\u8303\u56f4\u3002</p> <p>Within the hardware realm, we will be dealing with both general-purpose arithmetic/logic units, of the type found in many commercially available processors, and special-purpose structures for solving specific application problems. The differences in the two areas are minor as far as the arithmetic algorithms are concerned. However, in view of the specific technological constraints, production volumes, and performance criteria, hardware implementations tend to be quite different. General-purpose processor chips that are mass-produced have highly optimized custom designs. Implementations of low-volume, special-purpose systems, on the other hand, typically rely on semicustom and off-the-shelf components. However, when critical and strict requirements, such as extreme speed, very low power consumption, and miniature size, preclude the use of semicustom or off-the-shelf components, the much higher cost of a custom design may be justified even for a special-purpose system. </p> <p>\u5728\u786c\u4ef6\u9886\u57df\uff0c\u6211\u4eec\u5c06\u5904\u7406\u5728\u8bb8\u591a\u5546\u7528\u5904\u7406\u5668\u4e2d\u90fd\u5b58\u7684\u901a\u7528\u7684\u7b97\u672f/\u903b\u8f91\u5355\u5143\uff0c\u4ee5\u53ca\u7528\u4e8e\u89e3\u51b3\u7279\u5b9a\u5e94\u7528\u95ee\u9898\u7684\u4e13\u7528\u7ed3\u6784\u3002\u5c31\u7b97\u672f\u7b97\u6cd5\u800c\u8a00\uff0c\u8fd9\u4e24\u4e2a\u9886\u57df\u7684\u5dee\u5f02\u5f88\u5c0f\u3002\u7136\u800c\uff0c\u9274\u4e8e\u5177\u4f53\u7684\u6280\u672f\u9650\u5236\u3001\u4ea7\u91cf\u548c\u6027\u80fd\u6807\u51c6\uff0c\u786c\u4ef6\u5b9e\u73b0\u5f80\u5f80\u6709\u5f88\u5927\u4e0d\u540c\u3002\u6279\u91cf\u751f\u4ea7\u7684\u901a\u7528\u5904\u7406\u5668\u82af\u7247\u5177\u6709\u9ad8\u5ea6\u4f18\u5316\u7684\u5b9a\u5236\u8bbe\u8ba1\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5c0f\u6279\u91cf\u3001\u7279\u6b8a\u7528\u9014\u7cfb\u7edf\u7684\u5b9e\u73b0\u901a\u5e38\u4f9d\u8d56\u4e8e\u534a\u5b9a\u5236\u548c\u73b0\u6210\u7684\u7ec4\u4ef6\u3002\u7136\u800c\uff0c\u5f53\u5173\u952e\u548c\u4e25\u683c\u7684\u8981\u6c42\uff08\u4f8b\u5982\u6781\u901f\u3001\u6781\u4f4e\u529f\u8017\u548c\u5fae\u578b\u5c3a\u5bf8\uff09\u59a8\u788d\u4f7f\u7528\u534a\u5b9a\u5236\u6216\u73b0\u6210\u7ec4\u4ef6\u65f6\uff0c\u5373\u4f7f\u5bf9\u4e8e\u7279\u6b8a\u7528\u9014\u7684\u7cfb\u7edf\uff0c\u5b9a\u5236\u8bbe\u8ba1\u7684\u9ad8\u5f97\u591a\u7684\u6210\u672c\u4e5f\u53ef\u80fd\u662f\u5408\u7406\u7684\u3002</p>"},{"location":"Part_01/01/#12","title":"1.2 \u542f\u53d1\u6027\u793a\u4f8b","text":"<p>Use a calculator that has the square-root, square, and exponentiation (xy) functions to perform the following computations. Numerical results, obtained with a (10 + 2)-digit scientific calculator, are provided. You may obtain slightly different values.</p> <p>\u4f7f\u7528\u5177\u6709\u5e73\u65b9\u6839\u3001\u5e73\u65b9\u548c\u6307\u6570 (xy) \u51fd\u6570\u7684\u8ba1\u7b97\u5668\u6765\u6267\u884c\u4ee5\u4e0b\u8ba1\u7b97\u3002\u63d0\u4f9b\u4e86\u4f7f\u7528 (10 + 2) \u4f4d\u79d1\u5b66\u8ba1\u7b97\u5668\u83b7\u5f97\u7684\u6570\u503c\u7ed3\u679c\u3002\u60a8\u53ef\u80fd\u4f1a\u83b7\u5f97\u7565\u6709\u4e0d\u540c\u7684\u503c\u3002</p> <p>First, compute \u201cthe 1024th root of 2\u201d in the following two ways:</p> <p>\u9996\u5148\uff0c\u901a\u8fc7\u4ee5\u4e0b\u4e24\u79cd\u65b9\u5f0f\u8ba1\u7b97\u201c2\u76841024\u6b21\u65b9\u6839\u201d\uff1a</p> \\[ \\begin{align} u &amp;= \\underbrace{\\sqrt{\\sqrt{\\dots\\sqrt{2}}}}_{10 \\text{ times}} &amp;= \\text{1.000 677 131}  \\\\ v &amp;= 2^{1/1024} &amp;= \\text{1.000 677 131} \\end{align} \\] <p>Save both  u  and  v  in memory, if possible. If you can\u2019t store  u  and  v, simply recompute them when needed. Now, perform the following two equivalent computations based on  u: 10 times</p> <p>\u5982\u679c\u53ef\u80fd\u7684\u8bdd\uff0c\u5c06 u \u548c v \u4fdd\u5b58\u5728\u5185\u5b58\u4e2d\u3002\u5982\u679c\u60a8\u65e0\u6cd5\u5b58\u50a8 u \u548c v\uff0c\u53ea\u9700\u5728\u9700\u8981\u65f6\u91cd\u65b0\u8ba1\u7b97\u5b83\u4eec\u5373\u53ef\u3002\u73b0\u5728\uff0c\u57fa\u4e8eu\u6267\u884c\u4ee5\u4e0b\u4e24\u4e2a\u7b49\u6548\u8ba1\u7b9710\u6b21</p> \\[ \\begin{align} x &amp;= \\overbrace{(((u^2)^2)...)^2}^{10 \\text{ times}} &amp;= \\text{1.999 999 963} \\\\ {x}' &amp;=  u^{1024} &amp;= \\text{1.999 999 973} \\end{align} \\] <p>Similarly, perform the following two equivalent computations based on v: 10 times \u540c\u6837\u6839\u636ev\u8fdb\u884c\u4ee5\u4e0b\u4e24\u6b21\u7b49\u4ef7\u8ba1\u7b9710\u6b21</p> \\[ \\begin{array}{l} y &amp;= \\overbrace{(((v^2)^2)...)^2}^ {10 \\text{ times}} &amp;= \\text{1.999 999 983} \\\\ {y}' &amp;=  v^{1024} &amp;= \\text{1.999 999 994} \\end{array} \\] <p>The four different values obtained for \\(x, {x}', y, {y}'\\), in lieu of 2, hint that perhaps v and u are not really the same value. Let\u2019s compute their difference:</p> <p>\u4e3a \\(x, {x}', y, {y}'\\)\u83b7\u5f97\u7684\u56db\u4e2a\u4e0d\u540c\u503c\uff08\u4ee3\u66ff 2\uff09\u6697\u793a v \u548c u \u53ef\u80fd\u5e76\u4e0d\u662f\u771f\u6b63\u76f8\u540c\u7684\u503c\u3002\u8ba9\u6211\u4eec\u8ba1\u7b97\u4e00\u4e0b\u5b83\u4eec\u7684\u5dee\u5f02\uff1a $$ w = v \u2212 u = 1 \\times 10^{\u221211} $$ Why isn\u2019t  w  equal to zero? The reason is that even though  u  and  v  are displayed identically, they in fact have different internal representations. Most calculators have hidden or guard digits (the author\u2019s has two) to provide a higher degree of accuracy and to reduce the effect of accumulated errors when long computation sequences are performed. </p> <p>\u4e3a\u4ec0\u4e48 w \u4e0d\u7b49\u4e8e 0\uff1f\u539f\u56e0\u662f\uff0c\u5c3d\u7ba1 u \u548c v \u663e\u793a\u76f8\u540c\uff0c\u4f46\u5b83\u4eec\u5b9e\u9645\u4e0a\u5177\u6709\u4e0d\u540c\u7684\u5185\u90e8\u8868\u793a\u3002\u5927\u591a\u6570\u8ba1\u7b97\u5668\u90fd\u6709\u9690\u85cf\u6216\u4fdd\u62a4\u6570\u5b57\uff08\u4f5c\u8005\u6709\u4e24\u4e2a\uff09\uff0c\u4ee5\u63d0\u4f9b\u66f4\u9ad8\u7684\u51c6\u786e\u6027\u5e76\u51cf\u5c11\u6267\u884c\u957f\u8ba1\u7b97\u5e8f\u5217\u65f6\u7d2f\u79ef\u9519\u8bef\u7684\u5f71\u54cd\u3002</p> <p>Let\u2019s see if we can determine the hidden digits for the  u  and  v  values above. Here is one way:</p> <p>\u8ba9\u6211\u4eec\u770b\u770b\u662f\u5426\u53ef\u4ee5\u786e\u5b9a\u4e0a\u9762 u \u548c v \u503c\u7684\u9690\u85cf\u6570\u5b57\u3002\u8fd9\u662f\u4e00\u79cd\u65b9\u6cd5\uff1a</p> \\[ \\begin{array}{l} (u \u2212 1 ) \u00d7 1000 = \\text{0.677 130 680 [\u9690\u85cf\u00b7\u00b7\u00b7(0)68]} \\\\ (v \u2212 1 ) \u00d7 1000 = \\text{0.677 130 690 [\u9690\u85cf\u00b7\u00b7\u00b7(0)69]} \\end{array} \\] <p>This explains why  w  is not zero, which in turn tells us why  u 1024 =  v 1024. The following simple analysis might be helpful in this regard. </p> <p>\u8fd9\u89e3\u91ca\u4e86\u4e3a\u4ec0\u4e48 w \u4e0d\u4e3a\u96f6\uff0c\u8fdb\u800c\u544a\u8bc9\u6211\u4eec\u4e3a\u4ec0\u4e48 \\(u^{1024} \\ne v^{1024}\\)\u3002\u4ee5\u4e0b\u7b80\u5355\u5206\u6790\u5728\u8fd9\u65b9\u9762\u53ef\u80fd\u4f1a\u6709\u6240\u5e2e\u52a9\u3002</p> \\[ \\begin{align}{} v^{1024} &amp;=  (u + 10^{\u221211})^{1024} \\\\ &amp;\\approx u^{1024} + 1024 \\times 10^{\u221211} u^{1023} \\approx u^{1024} + 2 \\times 10^{\u22128} \\end{align} \\] <p>The difference between  \\(v^{1024}\\) and  \\(u^{1024}\\) is in good agreement with the result of the preceding analysis. The difference between  \\((((u^2) ^2 ) \u00b7 \u00b7 \u00b7  )^2\\) and \\(u^{1024}\\)  exists because the former is computed through repeated multiplications while the latter uses the built-in exponentiation routine of the calculator, which is likely to be less precise. </p> <p>\\(v^{1024}\\) \u548c \\(u^{1024}\\) \u4e4b\u95f4\u7684\u5dee\u5f02\u4e0e\u524d\u9762\u7684\u5206\u6790\u7ed3\u679c\u975e\u5e38\u543b\u5408\u3002\\((((u^2) ^2 ) \u00b7 \u00b7 \u00b7  )^2\\) \u548c \\(u^{1024}\\) \u4e4b\u95f4\u5b58\u5728\u5dee\u5f02\uff0c\u56e0\u4e3a\u524d\u8005\u662f\u901a\u8fc7\u91cd\u590d\u4e58\u6cd5\u8ba1\u7b97\u7684\uff0c\u800c\u540e\u8005\u4f7f\u7528\u8ba1\u7b97\u5668\u7684\u5185\u7f6e\u6c42\u5e42\u4f8b\u7a0b\uff0c\u53ef\u80fd\u4e0d\u592a\u7cbe\u786e\u3002</p> <p>Despite the discrepancies, the results of the foregoing computations are remarkably precise. The values of  u  and  v  agree to 11 decimal digits, while those of  \\(x, {x}', y, {y}'\\)are identical to 8 digits. This is better than single-precision, floating-point arithmetic on the most elaborate and expensive computers. Do we have a right to expect more from a calculator that costs $20 or less? Ease of use is, of course, a different matter from speed or precision. For a detailed exposition of some deficiencies in current calculators, and a refreshingly new design approach, see [Thim95]. </p> <p>\u5c3d\u7ba1\u5b58\u5728\u5dee\u5f02\uff0c\u4e0a\u8ff0\u8ba1\u7b97\u7684\u7ed3\u679c\u4ecd\u7136\u975e\u5e38\u7cbe\u786e\u3002 u\u548cv\u7684\u503c\u4e00\u81f4\u4e3a11\u4f4d\u5341\u8fdb\u5236\u6570\u5b57\uff0c\u800c\\(x, {x}', y, {y}'\\)\u7684\u503c\u4e00\u81f4\u4e3a8\u4f4d\u6570\u5b57\u3002\u8fd9\u6bd4\u6700\u590d\u6742\u3001\u6700\u6602\u8d35\u7684\u8ba1\u7b97\u673a\u4e0a\u7684\u5355\u7cbe\u5ea6\u6d6e\u70b9\u8fd0\u7b97\u8981\u597d\u3002\u6211\u4eec\u662f\u5426\u6709\u6743\u5bf9\u552e\u4ef7 20 \u7f8e\u5143\u6216\u66f4\u5c11\u7684\u8ba1\u7b97\u5668\u62b1\u6709\u66f4\u9ad8\u7684\u671f\u671b\uff1f\u5f53\u7136\uff0c\u6613\u7528\u6027\u4e0e\u901f\u5ea6\u6216\u7cbe\u5ea6\u662f\u4e0d\u540c\u7684\u95ee\u9898\u3002\u6709\u5173\u5f53\u524d\u8ba1\u7b97\u5668\u7684\u4e00\u4e9b\u7f3a\u9677\u7684\u8be6\u7ec6\u8bf4\u660e\u4ee5\u53ca\u4ee4\u4eba\u8033\u76ee\u4e00\u65b0\u7684\u65b0\u8bbe\u8ba1\u65b9\u6cd5\uff0c\u8bf7\u53c2\u9605 [Thim95]\u3002</p> <p>The example calculations demonstrate that familiarity with computer arithmetic is helpful for appreciating and correctly interpreting our everyday dealings with numbers. There is much more to computer arithmetic, however. Inattention to fundamentals of this field has led to several documented, and no doubt many more unreported, disasters. In the rest of this section, we describe two such events that were caused by inadequate precision and unduly limited range of numerical results. </p> <p>\u793a\u4f8b\u8ba1\u7b97\u8868\u660e\uff0c\u719f\u6089\u8ba1\u7b97\u673a\u7b97\u672f\u6709\u52a9\u4e8e\u7406\u89e3\u548c\u6b63\u786e\u89e3\u91ca\u6211\u4eec\u65e5\u5e38\u5904\u7406\u7684\u6570\u5b57\u3002\u7136\u800c\uff0c\u8ba1\u7b97\u673a\u7b97\u672f\u8fd8\u6709\u66f4\u591a\u5185\u5bb9\u3002\u5bf9\u8fd9\u4e00\u9886\u57df\u57fa\u672c\u539f\u7406\u7684\u5ffd\u89c6\u5bfc\u81f4\u4e86\u51e0\u8d77\u6709\u8bb0\u5f55\u7684\u707e\u96be\uff0c\u6beb\u65e0\u7591\u95ee\u8fd8\u6709\u66f4\u591a\u672a\u62a5\u9053\u7684\u707e\u96be\u3002\u5728\u672c\u8282\u7684\u5176\u4f59\u90e8\u5206\u4e2d\uff0c\u6211\u4eec\u5c06\u63cf\u8ff0\u7531\u7cbe\u5ea6\u4e0d\u8db3\u548c\u6570\u503c\u7ed3\u679c\u8303\u56f4\u8fc7\u5ea6\u6709\u9650\u5f15\u8d77\u7684\u4e24\u4e2a\u6b64\u7c7b\u4e8b\u4ef6\u3002</p> <p>The first such event, which may have led to the loss of 28 human lives in February 1991, is the failure of the American Patriot missile battery in Dhahran, Saudi Arabia, to intercept a number of Iraqi Scud missiles. An investigation by the US General Accounting Office [GAO92] blamed the incident on a \u201csoftware problem\u201d that led to inaccurate calculation of the elapsed time since the last system boot. It was explained that the system\u2019s internal clock measured time in tenths of a second. The measured time was then multiplied by a 24-bit truncated fractional representation of 1/10, with an error of about \\(( 3 / 4 ) \u00d7 10^{\u221223} \u2248 10^{\u22127}\\) . Some error was unavoidable, because 1/10 does not have an exact binary representation. Though rather small, when accumulated over a 10-hour operation period, this error caused the calculated time to be off by roughly \u2153 of a second. Because the Scud missile flew at a speed of about 1700 m/s, its calculated position might have differed from its actual position by more than \u00bd km; an error that is large enough to cause a missed interception. </p> <p>1991 \u5e74 2 \u6708\u53d1\u751f\u7684\u7b2c\u4e00\u8d77\u6b64\u7c7b\u4e8b\u4ef6\u53ef\u80fd\u5bfc\u81f4 28 \u4eba\u4e27\u751f\uff0c\u5f53\u65f6\u4f4d\u4e8e\u6c99\u7279\u963f\u62c9\u4f2f\u8fbe\u5170\u7684\u7f8e\u56fd\u7231\u56fd\u8005\u5bfc\u5f39\u8fde\u672a\u80fd\u62e6\u622a\u591a\u679a\u4f0a\u62c9\u514b\u98de\u6bdb\u817f\u5bfc\u5f39\u3002\u7f8e\u56fd\u5ba1\u8ba1\u603b\u7f72 [GAO92] \u7684\u4e00\u9879\u8c03\u67e5\u5c06\u8be5\u4e8b\u4ef6\u5f52\u548e\u4e8e\u201c\u8f6f\u4ef6\u95ee\u9898\u201d\uff0c\u8be5\u95ee\u9898\u5bfc\u81f4\u81ea\u4e0a\u6b21\u7cfb\u7edf\u542f\u52a8\u4ee5\u6765\u7ecf\u8fc7\u7684\u65f6\u95f4\u8ba1\u7b97\u4e0d\u51c6\u786e\u3002\u636e\u89e3\u91ca\uff0c\u7cfb\u7edf\u7684\u5185\u90e8\u65f6\u949f\u4ee5\u5341\u5206\u4e4b\u4e00\u79d2\u4e3a\u5355\u4f4d\u6d4b\u91cf\u65f6\u95f4\u3002\u7136\u540e\u5c06\u6d4b\u91cf\u7684\u65f6\u95f4\u4e58\u4ee5 1/10 \u7684 24 \u4f4d\u622a\u65ad\u5c0f\u6570\u8868\u793a\uff0c\u8bef\u5dee\u7ea6\u4e3a \\(( 3 / 4 ) \u00d7 10^{\u221223} \u2248 10^{\u22127}\\) \u3002\u4e00\u4e9b\u9519\u8bef\u662f\u4e0d\u53ef\u907f\u514d\u7684\uff0c\u56e0\u4e3a 1/10 \u6ca1\u6709\u7cbe\u786e\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u3002\u867d\u7136\u8fd9\u4e2a\u8bef\u5dee\u5f88\u5c0f\uff0c\u4f46\u5728 10 \u5c0f\u65f6\u7684\u8fd0\u884c\u671f\u95f4\u7d2f\u79ef\u65f6\uff0c\u8be5\u8bef\u5dee\u5bfc\u81f4\u8ba1\u7b97\u65f6\u95f4\u504f\u5dee\u5927\u7ea6 \u2153 \u79d2\u949f\u7684\u65f6\u95f4\u3002\u7531\u4e8e\u98de\u6bdb\u817f\u5bfc\u5f39\u7684\u98de\u884c\u901f\u5ea6\u7ea6\u4e3a1700m/s\uff0c\u5176\u8ba1\u7b97\u4f4d\u7f6e\u53ef\u80fd\u4e0e\u5b9e\u9645\u4f4d\u7f6e\u76f8\u5dee\u00bd\u516c\u91cc\u4ee5\u4e0a\uff1b\u9519\u8bef\u5927\u5230\u8db3\u4ee5\u5bfc\u81f4\u9519\u8fc7\u62e6\u622a\u3002</p> <p>The second such event is the explosion of an Ariane 5 rocket 30 seconds after liftoff in June 1996. Fortunately, this incident, also attributed to a \u201csoftware error\u201d [Lion96], did not lead to any loss of life, but its price tag was the embarrassing collapse of an ambitious development project costing US $7 billion. According to the explanations offered, at some point in the control program, a 64-bit floating-point number pertaining to the horizontal velocity of the rocket was to be converted to a 16-bit signed integer. Because the floating-point number had a value greater than what could fit in a 16-bit signed integer, an overflow exception arose that did not have adequate handling provisions by the software. This caused a processor shutdown, which triggered a cascade of events leading to improper attempts at course correction and the eventual disintegration that spread debris over several square kilometers. The doomed conversion routine was a leftover from the software used for the Ariane 4 rocket, carried over intact according to the maxim \u201cif it ain\u2019t broke, don\u2019t fix it.\u201d However, the designers failed to take into account that within the initial 40 seconds of flight when the system in question was active, the Ariane 5 rocket could reach a horizontal velocity that was about five times that of the Ariane 4. </p> <p>\u7b2c\u4e8c\u8d77\u6b64\u7c7b\u4e8b\u4ef6\u662f 1996 \u5e74 6 \u6708\u963f\u4e3d\u4e9a\u5a1c 5 \u53f7\u706b\u7bad\u5347\u7a7a 30 \u79d2\u540e\u7206\u70b8\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u8fd9\u8d77\u540c\u6837\u5f52\u56e0\u4e8e\u201c\u8f6f\u4ef6\u9519\u8bef\u201d[Lion96]\u7684\u4e8b\u4ef6\u6ca1\u6709\u9020\u6210\u4efb\u4f55\u4eba\u5458\u4f24\u4ea1\uff0c\u4f46\u5176\u4ee3\u4ef7\u662f\u8017\u8d44 70 \u4ebf\u7f8e\u5143\u7684\u96c4\u5fc3\u52c3\u52c3\u7684\u5f00\u53d1\u9879\u76ee\u7684\u5c34\u5c2c\u5d29\u6e83\u3002\u6839\u636e\u63d0\u4f9b\u7684\u89e3\u91ca\uff0c\u5728\u63a7\u5236\u7a0b\u5e8f\u7684\u67d0\u4e2a\u65f6\u523b\uff0c\u4e0e\u706b\u7bad\u6c34\u5e73\u901f\u5ea6\u76f8\u5173\u7684 64 \u4f4d\u6d6e\u70b9\u6570\u5c06\u88ab\u8f6c\u6362\u4e3a 16 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u3002\u7531\u4e8e\u6d6e\u70b9\u6570\u7684\u503c\u5927\u4e8e 16 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u6240\u80fd\u5bb9\u7eb3\u7684\u503c\uff0c\u56e0\u6b64\u51fa\u73b0\u4e86\u6ea2\u51fa\u5f02\u5e38\uff0c\u800c\u8f6f\u4ef6\u6ca1\u6709\u63d0\u4f9b\u8db3\u591f\u7684\u5904\u7406\u89c4\u5b9a\u3002\u8fd9\u5bfc\u81f4\u4e86\u5904\u7406\u5668\u5173\u95ed\uff0c\u5f15\u53d1\u4e86\u4e00\u7cfb\u5217\u4e8b\u4ef6\uff0c\u5bfc\u81f4\u822a\u5411\u4fee\u6b63\u7684\u4e0d\u5f53\u5c1d\u8bd5\u4ee5\u53ca\u6700\u7ec8\u7684\u89e3\u4f53\uff0c\u788e\u7247\u6563\u5e03\u5728\u51e0\u5e73\u65b9\u516c\u91cc\u7684\u8303\u56f4\u5185\u3002\u8fd9\u4e2a\u6ce8\u5b9a\u5931\u8d25\u7684\u8f6c\u6362\u7a0b\u5e8f\u662f\u963f\u4e3d\u4e9a\u5a1c 4 \u53f7\u706b\u7bad\u6240\u7528\u8f6f\u4ef6\u7684\u9057\u7559\u90e8\u5206\uff0c\u6309\u7167\u201c\u5982\u679c\u5b83\u6ca1\u6709\u51fa\u4e8b\uff0c\u5c31\u4e0d\u8981\u4fee\u7406\u5b83\u201d\u7684\u683c\u8a00\uff0c\u539f\u5c01\u4e0d\u52a8\u5730\u4fdd\u7559\u4e86\u4e0b\u6765\u3002\u7136\u800c\uff0c\u8bbe\u8ba1\u8005\u6ca1\u6709\u8003\u8651\u5230\uff0c\u5728\u76f8\u5173\u7cfb\u7edf\u6fc0\u6d3b\u7684\u6700\u521d 40 \u79d2\u98de\u884c\u5185\uff0c\u963f\u4e3d\u4e9a\u5a1c 5 \u53f7\u706b\u7bad\u7684\u6c34\u5e73\u901f\u5ea6\u53ef\u80fd\u8fbe\u5230\u963f\u4e3d\u4e9a\u5a1c 4 \u53f7\u706b\u7bad\u7684\u4e94\u500d\u5de6\u53f3\u3002</p>"},{"location":"Part_01/01/#13","title":"1.3 \u6570\u5b57\u53ca\u5176\u7f16\u7801","text":"<p>Number representation methods have advanced in parallel with the evolution of language. The oldest method for representing numbers consisted of the use of stones or sticks. Gradually, as larger numbers were needed, it became difficult to represent them or develop a feeling for their magnitudes. More importantly, comparing large numbers was quite cumbersome. Grouping the stones or sticks (e.g., representing the number 27 by 5 groups of 5 sticks plus 2 single sticks) was only a temporary cure. It was the use of different stones or sticks for representing groups of 5, 10, etc. that produced the first major breakthrough. </p> <p>\u6570\u5b57\u8868\u793a\u65b9\u6cd5\u4e0e\u8bed\u8a00\u7684\u53d1\u5c55\u540c\u6b65\u53d1\u5c55\u3002\u6700\u53e4\u8001\u7684\u8868\u793a\u6570\u5b57\u7684\u65b9\u6cd5\u662f\u4f7f\u7528\u77f3\u5934\u6216\u68cd\u5b50\u3002\u6e10\u6e10\u5730\uff0c\u968f\u7740\u9700\u8981\u66f4\u5927\u7684\u6570\u5b57\uff0c\u4ee3\u8868\u5b83\u4eec\u6216\u5bf9\u5b83\u4eec\u7684\u5927\u5c0f\u4ea7\u751f\u611f\u89c9\u53d8\u5f97\u56f0\u96be\u3002\u66f4\u91cd\u8981\u7684\u662f\uff0c\u6bd4\u8f83\u5927\u91cf\u7684\u6570\u636e\u662f\u76f8\u5f53\u9ebb\u70e6\u7684\u3002\u5c06\u77f3\u5934\u6216\u68cd\u5b50\u5206\u7ec4\uff08\u4f8b\u5982\uff0c\u7528 5 \u7ec4 5 \u6839\u68cd\u5b50\u52a0 2 \u4e2a\u5355\u68cd\u5b50\u4ee3\u8868\u6570\u5b57 27\uff09\u53ea\u662f\u6682\u65f6\u7684\u89e3\u51b3\u529e\u6cd5\u3002\u6b63\u662f\u4f7f\u7528\u4e0d\u540c\u7684\u77f3\u5934\u6216\u68cd\u68d2\u6765\u4ee3\u8868 5 \u4eba\u300110 \u4eba\u7b49\u4e00\u7ec4\uff0c\u624d\u4ea7\u751f\u4e86\u7b2c\u4e00\u4e2a\u91cd\u5927\u7a81\u7834\u3002</p> <p>The latter method gradually evolved into a symbolic form whereby special symbols were used to denote larger units. A familiar example is the Roman numeral system. The units of this system are 1, 5, 10, 50, 100, 500, 1000, 10 000, and 100 000, denoted by the symbols I, V, X, L, C, D, M, ((I)), and (((I))), respectively. A number is represented by a string of these symbols, arranged in descending order of values from left to right. To shorten some of the cumbersome representations, allowance is made to count a symbol as representing a negative value if it is to the left of a larger symbol. For example, IX is used instead of VIIII to denote the number 9 and LD is used for CCCCL to represent the number 450. </p> <p>\u540e\u4e00\u79cd\u65b9\u6cd5\u9010\u6e10\u6f14\u53d8\u6210\u4e00\u79cd\u7b26\u53f7\u5f62\u5f0f\uff0c\u7528\u7279\u6b8a\u7b26\u53f7\u6765\u8868\u793a\u66f4\u5927\u7684\u5355\u4f4d\u3002\u4e00\u4e2a\u719f\u6089\u7684\u4f8b\u5b50\u662f\u7f57\u9a6c\u6570\u5b57\u7cfb\u7edf\u3002\u8be5\u7cfb\u7edf\u7684\u5355\u4f4d\u4e3a 1\u30015\u300110\u300150\u3001100\u3001500\u30011000\u300110 000 \u548c 100 000\uff0c\u5206\u522b\u7528\u7b26\u53f7 I\u3001V\u3001X\u3001L\u3001C\u3001D\u3001M\u3001((I)) \u548c (((I))) \u8868\u793a\u3002\u6570\u5b57\u7531\u8fd9\u4e9b\u7b26\u53f7\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u8868\u793a\uff0c\u4ece\u5de6\u5230\u53f3\u6309\u503c\u7684\u964d\u5e8f\u6392\u5217\u3002\u4e3a\u4e86\u7f29\u77ed\u4e00\u4e9b\u7e41\u7410\u7684\u8868\u793a\uff0c\u5982\u679c\u7b26\u53f7\u4f4d\u4e8e\u8f83\u5927\u7b26\u53f7\u7684\u5de6\u4fa7\uff0c\u5219\u5141\u8bb8\u5c06\u5176\u8ba1\u4e3a\u8868\u793a\u8d1f\u503c\u3002\u4f8b\u5982\uff0cIX \u4ee3\u66ff VIII \u6765\u8868\u793a\u6570\u5b57 9\uff0c LD \u4ee3\u66ff CCCCL \u4f7f\u7528\u6765\u8868\u793a\u6570\u5b57 450\u3002</p> <p>Clearly, the Roman numeral system is not suitable for representing very large numbers. Furthermore, it is difficult to do arithmetic on numbers represented with this notation. The  positional  system of number representation was first used by the Chinese. In this method, the value represented by each symbol depends not only on its shape but also on its position relative to other symbols. Our conventional method of representing numbers is based on a positional system. </p> <p>\u663e\u7136\uff0c\u7f57\u9a6c\u6570\u5b57\u7cfb\u7edf\u4e0d\u9002\u5408\u8868\u793a\u975e\u5e38\u5927\u7684\u6570\u5b57\u3002\u6b64\u5916\uff0c\u5f88\u96be\u5bf9\u7528\u8fd9\u79cd\u8868\u793a\u6cd5\u8868\u793a\u7684\u6570\u5b57\u8fdb\u884c\u7b97\u672f\u8fd0\u7b97\u3002\u6570\u5b57\u8868\u793a\u7684\u4f4d\u7f6e\u7cfb\u7edf\u9996\u5148\u7531\u4e2d\u56fd\u4eba\u4f7f\u7528\u3002\u5728\u8fd9\u79cd\u65b9\u6cd5\u4e2d\uff0c\u6bcf\u4e2a\u7b26\u53f7\u6240\u4ee3\u8868\u7684\u503c\u4e0d\u4ec5\u53d6\u51b3\u4e8e\u5176\u5f62\u72b6\uff0c\u8fd8\u53d6\u51b3\u4e8e\u5176\u76f8\u5bf9\u4e8e\u5176\u4ed6\u7b26\u53f7\u7684\u4f4d\u7f6e\u3002\u6211\u4eec\u8868\u793a\u6570\u5b57\u7684\u4f20\u7edf\u65b9\u6cd5\u57fa\u4e8e\u4f4d\u7f6e\u7cfb\u7edf\u3002</p> <p>For example in the number 222, each of the \u201c2\u201d digits represents a different value.  The leftmost 2 represents 200. The middle 2 represents 20. Finally, the rightmost 2 is worth 2 units. The representation of time intervals in terms of days, hours, minutes, and seconds (i.e., as four-element vectors) is another example of the positional system. For instance, in the vector  T = 5 5 5 5, the leftmost element denotes 5 days, the second from the left represents 5 hours, the third element stands for 5 minutes, and the rightmost element denotes 5 seconds. </p> <p>\u4f8b\u5982\uff0c\u5728\u6570\u5b57 222 \u4e2d\uff0c\u6bcf\u4e2a\u201c2\u201d\u6570\u5b57\u4ee3\u8868\u4e0d\u540c\u7684\u503c\u3002\u6700\u5de6\u8fb9\u76842\u4ee3\u8868200\u3002\u4e2d\u95f4\u76842\u4ee3\u886820\u3002\u6700\u540e\uff0c\u6700\u53f3\u8fb9\u76842\u503c2\u4e2a\u5355\u4f4d\u3002\u4ee5\u5929\u3001\u5c0f\u65f6\u3001\u5206\u949f\u548c\u79d2\uff08\u5373\u56db\u5143\u7d20\u5411\u91cf\uff09\u8868\u793a\u65f6\u95f4\u95f4\u9694\u662f\u4f4d\u7f6e\u7cfb\u7edf\u7684\u53e6\u4e00\u4e2a\u793a\u4f8b\u3002\u4f8b\u5982\uff0c\u5728\u5411\u91cf T = 5 5 5 5 \u4e2d\uff0c\u6700\u5de6\u8fb9\u7684\u5143\u7d20\u8868\u793a 5 \u5929\uff0c\u5de6\u8fb9\u7b2c\u4e8c\u4e2a\u5143\u7d20\u8868\u793a 5 \u5c0f\u65f6\uff0c\u7b2c\u4e09\u4e2a\u5143\u7d20\u8868\u793a 5 \u5206\u949f\uff0c\u6700\u53f3\u8fb9\u7684\u5143\u7d20\u8868\u793a 5 \u79d2\u3002</p> <p>If in a positional number system, the unit corresponding to each position is a constant multiple of the unit for its right neighboring position, the conventional  fixed-radix positional system is obtained. The decimal number system we use daily is a positional number system with 10 as its constant radix. The representation of time intervals, as just discussed, provides an example of a  mixed-radix  positional system for which the radix is the vector  R = 0 24 60 60. </p> <p>\u5982\u679c\u5728\u4f4d\u7f6e\u6570\u5236\u4e2d\uff0c\u6bcf\u4e2a\u4f4d\u7f6e\u5bf9\u5e94\u7684\u5355\u4f4d\u662f\u5176\u53f3\u76f8\u90bb\u4f4d\u7f6e\u7684\u5355\u4f4d\u7684\u5e38\u6570\u500d\uff0c\u5219\u5f97\u5230\u4f20\u7edf\u7684*\u56fa\u5b9a\u57fa\u6570*\u4f4d\u7f6e\u5236\u3002\u6211\u4eec\u65e5\u5e38\u4f7f\u7528\u7684\u5341\u8fdb\u5236\u6570\u5236\u662f\u4ee510\u4e3a\u5e38\u6570\u57fa\u6570\u7684\u4f4d\u7f6e\u6570\u5236\u3002\u6b63\u5982\u521a\u521a\u8ba8\u8bba\u7684\uff0c\u65f6\u95f4\u95f4\u9694\u7684\u8868\u793a\u63d0\u4f9b\u4e86\u6df7\u5408\u57fa\u6570\u4f4d\u7f6e\u7cfb\u7edf\u7684\u793a\u4f8b\uff0c\u5176\u57fa\u6570\u662f\u5411\u91cf R = 0 24 60 60\u3002</p> <p>The method used to represent numbers affects not just the ease of reading and understanding the notation but also the complexity of arithmetic algorithms used for computing with numbers. The popularity of positional number systems is in part due to the availability of simple and elegant algorithms for performing arithmetic on such numbers. We will see in subsequent chapters that other representations provide advantages over the positional representation in terms of certain arithmetic operations or the needs of particular application areas. However, these systems are of limited use precisely because they do not support universally simple arithmetic. </p> <p>\u7528\u4e8e\u8868\u793a\u6570\u5b57\u7684\u65b9\u6cd5\u4e0d\u4ec5\u5f71\u54cd\u9605\u8bfb\u548c\u7406\u89e3\u7b26\u53f7\u7684\u5bb9\u6613\u7a0b\u5ea6\uff0c\u800c\u4e14\u5f71\u54cd\u7528\u4e8e\u6570\u5b57\u8ba1\u7b97\u7684\u7b97\u672f\u7b97\u6cd5\u7684\u590d\u6742\u6027\u3002\u4f4d\u7f6e\u6570\u5b57\u7cfb\u7edf\u7684\u6d41\u884c\u90e8\u5206\u5f52\u56e0\u4e8e\u5bf9\u8fd9\u4e9b\u6570\u5b57\u6267\u884c\u7b97\u672f\u7684\u7b80\u5355\u800c\u4f18\u96c5\u7684\u7b97\u6cd5\u7684\u53ef\u7528\u6027\u3002\u6211\u4eec\u5c06\u5728\u540e\u7eed\u7ae0\u8282\u4e2d\u770b\u5230\uff0c\u5728\u67d0\u4e9b\u7b97\u672f\u8fd0\u7b97\u6216\u7279\u5b9a\u5e94\u7528\u9886\u57df\u7684\u9700\u6c42\u65b9\u9762\uff0c\u5176\u4ed6\u8868\u793a\u6cd5\u6bd4\u4f4d\u7f6e\u8868\u793a\u6cd5\u5177\u6709\u4f18\u52bf\u3002\u7136\u800c\uff0c\u8fd9\u4e9b\u7cfb\u7edf\u7684\u7528\u9014\u662f\u6709\u9650\u7684\uff0c\u56e0\u4e3a\u5b83\u4eec\u4e0d\u652f\u6301\u666e\u904d\u7b80\u5355\u7684\u7b97\u672f\u3002</p> <p>In digital systems, numbers are encoded by means of binary digits or bits. Suppose you have 4 bits to represent numbers. There are 16 possible codes. You are free to assign the 16 codes to numbers as you please. However, since number representation has significant effects on algorithm and circuit complexity, only some of the wide range of possibilities have found applications. </p> <p>\u5728\u6570\u5b57\u7cfb\u7edf\u4e2d\uff0c\u6570\u5b57\u901a\u8fc7\u4e8c\u8fdb\u5236\u6570\u5b57\u6216\u4f4d\u8fdb\u884c\u7f16\u7801\u3002\u5047\u8bbe\u60a8\u6709 4 \u4f4d\u6765\u8868\u793a\u6570\u5b57\u3002\u6709 16 \u79cd\u53ef\u80fd\u7684\u4ee3\u7801\u3002\u60a8\u53ef\u4ee5\u968f\u610f\u5c06 16 \u4e2a\u4ee3\u7801\u5206\u914d\u7ed9\u53f7\u7801\u3002\u7136\u800c\uff0c\u7531\u4e8e\u6570\u5b57\u8868\u793a\u5bf9\u7b97\u6cd5\u548c\u7535\u8def\u590d\u6742\u6027\u6709\u663e\u7740\u5f71\u54cd\uff0c\u56e0\u6b64\u53ea\u6709\u4e00\u4e9b\u5e7f\u6cdb\u7684\u53ef\u80fd\u6027\u5f97\u5230\u4e86\u5e94\u7528\u3002</p> <p>To simplify arithmetic operations, including the required checking for singularities or special cases, the assignment of codes to numbers must be done in a logical and systematic manner. For example, if you assign codes to 2 and 3 but not to 5, then adding 2 and 3 will cause an \u201coverflow\u201d (yields an unrepresentable value) in your number system. </p> <p>\u4e3a\u4e86\u7b80\u5316\u7b97\u672f\u8fd0\u7b97\uff0c\u5305\u62ec\u6240\u9700\u7684\u5947\u70b9\u6216\u7279\u6b8a\u60c5\u51b5\u68c0\u67e5\uff0c\u5fc5\u987b\u4ee5\u903b\u8f91\u548c\u7cfb\u7edf\u7684\u65b9\u5f0f\u5c06\u4ee3\u7801\u5206\u914d\u7ed9\u6570\u5b57\u3002\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u5c06\u4ee3\u7801\u5206\u914d\u7ed9 2 \u548c 3 \u800c\u4e0d\u662f 5\uff0c\u5219\u6dfb\u52a0 2 \u548c 3 \u5c06\u5bfc\u81f4\u6570\u5b57\u7cfb\u7edf\u4e2d\u7684\u201c\u6ea2\u51fa\u201d\uff08\u4ea7\u751f\u65e0\u6cd5\u8868\u793a\u7684\u503c\uff09\u3002</p> <p>Figure 1.2 shows some examples of assignments of 4-bit codes to numbers. The first choice is to interpret the 4-bit patterns as 4-bit binary numbers, leading to the representation of natural numbers in the range [0, 15]. The signed-magnitude scheme results in integers in the range [\u22127, 7] being represented, with 0 having two representations, (viz., \u00b10). The 3-plus-1 fixed-point number system (3 whole bits, 1 fractional bit) gives us numbers from 0 to 7.5 in increments of 0.5. Viewing the 4-bit codes as signed fractions gives us a range of [\u22120.875, +0.875] or [\u22121, +0.875], depending on whether we use signed-magnitude or 2\u2019s-complement representation. </p> <p>\u56fe 1.2 \u663e\u793a\u4e86\u5c06 4 \u4f4d\u4ee3\u7801\u5206\u914d\u7ed9\u6570\u5b57\u7684\u4e00\u4e9b\u793a\u4f8b\u3002\u7b2c\u4e00\u4e2a\u9009\u62e9\u662f\u5c06 4 \u4f4d\u6a21\u5f0f\u89e3\u91ca\u4e3a 4 \u4f4d\u4e8c\u8fdb\u5236\u6570\uff0c\u4ece\u800c\u5f97\u5230 [0, 15] \u8303\u56f4\u5185\u7684\u81ea\u7136\u6570\u8868\u793a\u3002\u5e26\u7b26\u53f7\u6570\u503c\u65b9\u6848\u5bfc\u81f4\u8868\u793a [\u22127, 7] \u8303\u56f4\u5185\u7684\u6574\u6570\uff0c\u5176\u4e2d 0 \u6709\u4e24\u79cd\u8868\u793a\u5f62\u5f0f\uff08\u5373\u00b10\uff09\u3002 3+1 \u5b9a\u70b9\u6570\u7cfb\u7edf\uff083 \u4e2a\u6574\u6570\u4f4d\uff0c1 \u4e2a\u5c0f\u6570\u4f4d\uff09\u4e3a\u6211\u4eec\u63d0\u4f9b\u4ece 0 \u5230 7.5 \u7684\u6570\u5b57\uff0c\u589e\u91cf\u4e3a 0.5\u3002\u5c06 4 \u4f4d\u4ee3\u7801\u89c6\u4e3a\u6709\u7b26\u53f7\u5206\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230 [\u22120.875, +0.875] \u6216 [\u22121, +0.875] \u7684\u8303\u56f4\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u6211\u4eec\u662f\u4f7f\u7528\u7b26\u53f7\u5e45\u5ea6\u8868\u793a\u8fd8\u662f 2 \u7684\u8865\u7801\u8868\u793a\u3002</p> <p>The 2-plus-2 unsigned floating-point number system in Fig. 1.2, with its 2-bit exponent  e  in {\u22122, \u22121, 0, 1} and 2-bit integer significand  s  in {0, 1, 2, 3}, can represent certain values  s \u00d7 2 e  in [0, 6]. In this system, 0.00 has four representations, 0.50, 1.00, and 2.00 have two representations each, and 0.25, 0.75, 1.50, 3.00, 4.00, and 6.00 are uniquely represented. The 2-plus-2 logarithmic number system, which represents a number by approximating its 2-plus-2, fixed-point, base-2 logarithm, completes the choices shown in Fig. 1.2. </p> <p>\u56fe 1.2 \u4e2d\u7684 2+2 \u65e0\u7b26\u53f7\u6d6e\u70b9\u6570\u7cfb\u7edf\uff0c\u5176 2 \u4f4d\u6307\u6570 e \u5728 {\u22122, \u22121, 0, 1} \u4e2d\uff0c2 \u4f4d\u6574\u6570\u6709\u6548\u6570 s \u5728 {0, 1, 2, 3} \u4e2d\uff0c\u53ef\u4ee5\u8868\u793a [0, 6] \u4e2d\u7684\u67d0\u4e9b\u503c \\(s \\times 2^e\\)\u3002\u5728\u6b64\u7cfb\u7edf\u4e2d\uff0c0.00 \u6709\u56db\u79cd\u8868\u793a\u5f62\u5f0f\uff1a0.50\u30011.00 \u548c 2.00\u6bcf\u4e2a\u90fd\u6709\u4e24\u79cd\u8868\u793a\u5f62\u5f0f\uff0c0.25\u30010.75\u30011.50\u30013.00\u30014.00 \u548c 6.00 \u662f\u552f\u4e00\u8868\u793a\u7684\u3002 2+2 \u5bf9\u6570\u7cfb\u7edf\u901a\u8fc7\u8fd1\u4f3c 2+2\u3001\u5b9a\u70b9\u3001\u4ee5 2 \u4e3a\u5e95\u7684\u5bf9\u6570\u6765\u8868\u793a\u4e00\u4e2a\u6570\uff0c\u5b8c\u6210\u4e86\u56fe 1.2 \u4e2d\u6240\u793a\u7684\u9009\u62e9\u3002</p> <p></p>"},{"location":"Part_01/01/#14","title":"1.4 \u56fa\u5b9a\u57fa\u6570\u4f4d\u7f6e\u6570\u5b57\u7cfb\u7edf","text":"<p>A conventional fixed-radix, fixed-point positional number system is usually based on a positive integer  radix (base)  r  and an implicit digit set {\\(0, 1, \u00b7 \u00b7 \u00b7 ,  r \u2212 1\\)}. Each unsigned integer is represented by a digit vector of length  k +  l, with  k  digits for the whole part and  l  digits for the fractional part. By convention, the digit vector \\(x_{k\u22121} x_{k\u22122} \u00b7 \u00b7 \u00b7 x_1 x_0. x_{\u22121} x_{\u22122} \u00b7 \u00b7 \u00b7 x_{\u2212l}\\) represents the value</p> <p>\u4f20\u7edf\u7684\u5b9a\u57fa\u3001\u5b9a\u70b9\u4f4d\u7f6e\u6570\u7cfb\u7edf\u901a\u5e38\u57fa\u4e8e\u6b63\u6574\u6570\u57fa\u6570\uff08\u5e95\u6570base\uff09\\(r\\) \u548c\u9690\u5f0f\u6570\u5b57\u96c6{\\(0, 1, \u00b7\u00b7\u00b7, r \u2212 1\\)}\u3002\u6bcf\u4e2a\u65e0\u7b26\u53f7\u6574\u6570\u90fd\u7531\u957f\u5ea6\u4e3a \\(k + l\\) \u7684\u6570\u5b57\u5411\u91cf\u8868\u793a\uff0c\u5176\u4e2d \\(k\\) \u8868\u793a\u6574\u6570\u957f\u5ea6\uff0c\\(l\\) \u4f4d\u8868\u793a\u5c0f\u6570\u90e8\u5206\u957f\u5ea6\u3002\u6309\u7167\u60ef\u4f8b\uff0c\u6570\u5b57\u5411\u91cf \\(x_{k\u22121} x_{k\u22122} \u00b7 \u00b7 \u00b7 x_1 x_0. x_{\u22121} x_{\u22122} \u00b7 \u00b7 \u00b7 x_{\u2212l}\\) \u8868\u793a\u503c</p> \\[ (x_{k-1}x_{k-2}\\cdots x_1x_0 . x_{-1}x_{-2}\\cdots x_{-l})_r = \\sum_{i=-l}^{k-1}x_ir^i \\] <p>One can easily generalize to arbitrary radices (not necessarily integer or positive or constant) and digit sets of arbitrary size or composition. In what follows, we restrict our attention to digit sets composed of consecutive integers, since digit sets of other types complicate arithmetic and have no redeeming property. Thus, we denote our digit set by {\u2212 \u03b1, \u2212 \u03b1 + 1, \u00b7 \u00b7 \u00b7 ,  \u03b2 \u2212 1,  \u03b2} = [\u2212 \u03b1,  \u03b2]. </p> <p>\u4eba\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u63a8\u5e7f\u5230\u4efb\u610f\u57fa\u6570\uff08\u4e0d\u4e00\u5b9a\u662f\u6574\u6570\u3001\u6b63\u6570\u6216\u5e38\u6570\uff09\u548c\u4efb\u610f\u5927\u5c0f\u6216\u7ec4\u6210\u7684\u6570\u5b57\u96c6\u3002\u5728\u4e0b\u6587\u4e2d\uff0c\u6211\u4eec\u5c06\u6ce8\u610f\u529b\u9650\u5236\u5728\u7531\u8fde\u7eed\u6574\u6570\u7ec4\u6210\u7684\u6570\u5b57\u96c6\u4e0a\uff0c\u56e0\u4e3a\u5176\u4ed6\u7c7b\u578b\u7684\u6570\u5b57\u96c6\u4f7f\u7b97\u672f\u590d\u6742\u5316\u5e76\u4e14\u6ca1\u6709\u53ef\u8d4e\u56de\u7684\u5c5e\u6027\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5c06\u6570\u5b57\u96c6\u8868\u793a\u4e3a {\u2212\u03b1,\u2212\u03b1+1,\u00b7\u00b7\u00b7,\u03b2\u22121,\u03b2}=[\u2212\u03b1,\u03b2]\u3002</p> <p>The following examples demonstrate the wide range of possibilities in selecting the radix and digit set. </p> <p>\u4ee5\u4e0b\u793a\u4f8b\u6f14\u793a\u4e86\u9009\u62e9\u57fa\u6570\u548c\u6570\u5b57\u96c6\u7684\u5e7f\u6cdb\u53ef\u80fd\u6027\u3002</p> <p>EXAMPLE 1.1 Balanced ternary number system: r = 3, digit set = [\u22121, 1].</p> <p>\u793a\u4f8b1.1 \u5e73\u8861\u4e09\u8fdb\u5236\u6570\u7cfb\u7edf\uff1ar = 3\uff0c\u6570\u5b57\u96c6= [\u22121, 1]\u3002</p> <p>EXAMPLE 1.2 Negative-radix number systems: radix \\(\u2212r\\), digit set = [0, r \u2212 1].</p> <p>\u793a\u4f8b1.2 \u8d1f\u57fa\u6570\u7cfb\u7edf\uff1a\u57fa\u6570 \\(-r\\)\uff0c\u6570\u5b57\u96c6= [\\(0, r \u2212 1\\)]\u3002</p> \\[ \\begin{array}{l} (\\cdots x_5x_4x_3x_2x_1x_0 . x_{-1}x_{-2}x_{-3}x_{-4}x_{-5}x_{-6} \\cdots) = \\sum_{i}x_i(-r)^i \\\\ =\\sum_{\\text{even }i}x_ir^i - \\sum_{\\text{odd }i}x_ir^i \\\\ =(\\cdots x_4x_2x_0 . x_{-2}x_{-4}x_{-6} \\cdots)_r - (\\cdots x_5x_3x_1 . x_{-1}x_{-3}x_{-5} \\cdots)_r \\end{array} \\] <p>r = \u22122 \u4e14\u6570\u5b57\u96c6\u4e3a [0, 1] \u7684\u7279\u6b8a\u60c5\u51b5\u79f0\u4e3a\u8d1f\u4e8c\u8fdb\u5236\u6570\u7cfb</p> <p>EXAMPLE 1.3 Nonredundant signed-digit number systems: digit set [\u2212 \u03b1,  r \u2212 1 \u2212  \u03b1] for radix  r. As an example, one can use the digit set [\u22124, 5] for  r = 10. We denote a negative digit by preceding it with a minus sign, as usual, or by using a hyphen as a left superscript when the minus sign could be mistaken for subtraction. For example, </p> <p>\\((3\\ ^-1\\ 5 )_{ten}\\)  represents the decimal number  295 =   300 \u2212 10 + 5</p> <p>\\((^-3\\ 1\\ 5)_{ten}\\) represents the decimal number \u2212285 = \u2212300 + 10 + 5</p> <p>\u793a\u4f8b1.3 \u975e\u5197\u4f59\u5e26\u7b26\u53f7\u6570\u5b57\u7cfb\u7edf\uff1a\u57fa\u6570\\(r\\)\u7684\u6570\u5b57\u96c6[\u2212 \u03b1, r\u22121\u2212 \u03b1]\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0cr = 10 \u65f6\u53ef\u4ee5\u4f7f\u7528\u6570\u5b57\u96c6 [\u22124, 5]\u3002\u50cf\u5f80\u5e38\u4e00\u6837\uff0c\u6211\u4eec\u901a\u8fc7\u5728\u8d1f\u6570\u524d\u9762\u52a0\u4e0a\u51cf\u53f7\u6765\u8868\u793a\u8d1f\u6570\uff0c\u6216\u8005\u5f53\u51cf\u53f7\u53ef\u80fd\u88ab\u8bef\u8ba4\u4e3a\u662f\u51cf\u6cd5\u65f6\uff0c\u4f7f\u7528\u8fde\u5b57\u7b26\u4f5c\u4e3a\u5de6\u4e0a\u6807\u3002\u4f8b\u5982\uff0c</p> <p>\\((3\\ ^-1\\ 5 )_{ten}\\)\u200b \u8868\u793a\u5341\u8fdb\u5236\u6570   295 =   300 \u2212 10 + 5</p> <p>\\((^-3\\ 1\\ 5)_{ten}\\) \u8868\u793a\u5341\u8fdb\u5236\u6570 \u2212285 = \u2212300 + 10 + 5</p> <p>EXAMPLE 1.4 Redundant signed-digit number systems: digit set [\u2212 \u03b1,  \u03b2], with  \u03b1+ \u03b2 \u2265  r for radix  r. One can use the digit set [\u22127, 7], say, for  r = 10. In such redundant number systems, certain values may have multiple representations. For example, here are some representations for the decimal number 295:</p> <p>\u793a\u4f8b1.4 \u5197\u4f59\u6709\u7b26\u53f7\u6570\u5b57\u7cfb\u7edf\uff1a\u6570\u5b57\u96c6[\u2212 \u03b1, \u03b2]\uff0c\u5176\u4e2d\u03b1+ \u03b2 \u2265 r \u4e3a\u57fa\u6570r\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e r = 10\uff0c\u53ef\u4ee5\u4f7f\u7528\u6570\u5b57\u96c6 [\u22127, 7]\u3002\u5728\u8fd9\u79cd\u5197\u4f59\u6570\u5b57\u7cfb\u7edf\u4e2d\uff0c\u67d0\u4e9b\u503c\u53ef\u80fd\u6709\u591a\u79cd\u8868\u793a\u5f62\u5f0f\u3002\u4f8b\u5982\uff0c\u4ee5\u4e0b\u662f\u5341\u8fdb\u5236\u6570 295 \u7684\u4e00\u4e9b\u8868\u793a\u5f62\u5f0f\uff1a</p> \\[ (3\\ ^-1\\ 5)_{ten} =  (3\\ 0\\ ^-5)_{ten} =  (1\\ ^-7\\ 0\\ ^-5 )_{ten} \\] <p>\u6211\u4eec\u5c06\u5728\u7b2c 3 \u7ae0\u8be6\u7ec6\u7814\u7a76\u5197\u4f59\u8868\u793a\u3002</p> <p>EXAMPLE 1.5 Fractional radix number systems:  r = 0.1 with digit set [0, 9]. </p> <p>\u793a\u4f8b1.5 \u5c0f\u6570\u57fa\u6570\u7cfb\u7edf\uff1ar = 0.1\uff0c\u6570\u5b57\u96c6\u4e3a[0, 9]\u3002</p> \\[ \\begin{array}{l} (x_{k\u22121} x_{k\u22122} \\cdots  x_1 x_0 .  x_{\u22121}x_{\u22122} \\cdots  x_{\u2212l})_{one-tenth} = \\sum_{i}10^{-i} \\\\ =(x_{\u2212l}\\cdots x_{\u22122}x_{\u22121}x_0 . x_1 \\cdots x_{k\u22122} x_{k\u22121})_{ten} \\end{array} \\] <p>EXAMPLE 1.6 Irrational radix number systems:  r = \\(\\sqrt{2}\\) with digit set [0, 1]. </p> <p>\u793a\u4f8b1.6 \u65e0\u7406\u57fa\u6570\u7cfb\u7edf\uff1ar = \\(\\sqrt{2}\\)\uff0c\u6570\u5b57\u96c6\u4e3a[0, 1]\u3002</p> \\[ \\begin{array}{l} (\\cdots x_5x_4x_3x_2x_1x_0 . x_{-1}x_{-2}x_{-3}x_{-4}x_{-5}x_{-6} \\cdots)_{\\sqrt2} = \\sum_{i}x_i(\\sqrt{2})^i \\\\ =(\\cdots x_4x_2x_0 . x_{-2}x_{-4}x_{-6} \\cdots)_2 + \\sqrt2(\\cdots x_5x_3x_1 . x_{-1}x_{-3}x_{-5} \\cdots)_2 \\end{array} \\] <p>These examples illustrate the generality of our definition by introducing negative, fractional, and irrational radices and by using both nonredundant or minimal ( r  different digit values) and redundant ( &gt; r  digit values) digit sets in the common case of positive integer radices. We can go even further and make the radix an imaginary or complex number. </p> <p>\u8fd9\u4e9b\u793a\u4f8b\u901a\u8fc7\u5f15\u5165\u8d1f\u6570\u3001\u5c0f\u6570\u548c\u65e0\u7406\u6570\u57fa\u6570\uff0c\u5e76\u5728\u6b63\u6574\u6570\u7684\u5e38\u89c1\u60c5\u51b5\u4e0b\u4f7f\u7528\u975e\u5197\u4f59\u6216\u6700\u5c0f\uff08r \u4e2a\u4e0d\u540c\u7684\u6570\u5b57\u503c\uff09\u548c\u5197\u4f59\uff08&gt; r \u4e2a\u6570\u5b57\u503c\uff09\u6570\u5b57\u96c6\u6765\u8bf4\u660e\u6211\u4eec\u5b9a\u4e49\u7684\u4e00\u822c\u6027\u3002\u6211\u4eec\u53ef\u4ee5\u66f4\u8fdb\u4e00\u6b65\uff0c\u5c06\u57fa\u6570\u8bbe\u4e3a\u865a\u6570\u6216\u590d\u6570\u3002</p> <p>EXAMPLE 1.7 Complex-radix number systems: the quater-imaginary number system uses  \\(r = 2 j\\), where  \\(j = \\sqrt{-1}\\) and the digit set [0, 3]. </p> <p>\u793a\u4f8b 1.7 \u590d\u6570\u57fa\u6570\u7cfb\u7edf\uff1a\u56db\u865a\u6570\u7cfb\u7edf\u4f7f\u7528\\(r = 2 j\\)\uff0c\u5176\u4e2d\\(j = \\sqrt{-1}\\)  \u4ee5\u53ca\u6570\u5b57\u96c6 [0, 3]\u3002</p> \\[ \\begin{array}{l} (\\cdots x_5x_4x_3x_2x_1x_0 . x_{-1}x_{-2}x_{-3}x_{-4}x_{-5}x_{-6} \\cdots)_{2j} = \\sum_{i}x_i(2j)^i \\\\ =(\\cdots x_4x_2x_0 . x_{-2}x_{-4}x_{-6} \\cdots)_{-four} + 2j(\\cdots x_5x_3x_1 . x_{-1}x_{-3}x_{-5} \\cdots)_{four} \\end{array} \\] <p>It is easy to see that any complex number can be represented in the quater-imaginary number system of Example 1.7, with the advantage that ordinary addition (with a slightly modified carry rule) and multiplication can be used for complex-number computations. The modified carry rule is that a carry of \u22121 (a borrow actually) goes two positions to the left when the position sum, or digit total in a given position, exceeds 3. </p> <p>\u5f88\u5bb9\u6613\u770b\u51fa\uff0c\u4efb\u4f55\u590d\u6570\u90fd\u53ef\u4ee5\u7528\u4f8b 1.7 \u7684\u56db\u865a\u6570\u7cfb\u7edf\u8868\u793a\uff0c\u5176\u4f18\u70b9\u662f\u666e\u901a\u52a0\u6cd5\uff08\u7a0d\u5fae\u4fee\u6539\u8fdb\u4f4d\u89c4\u5219\uff09\u548c\u4e58\u6cd5\u53ef\u7528\u4e8e\u590d\u6570\u8ba1\u7b97s\u3002\u4fee\u6539\u540e\u7684\u8fdb\u4f4d\u89c4\u5219\u662f\uff0c\u5f53\u4f4d\u7f6e\u603b\u548c\u6216\u7ed9\u5b9a\u4f4d\u7f6e\u7684\u6570\u5b57\u603b\u6570\u8d85\u8fc7 3 \u65f6\uff0c\u8fdb\u4f4d -1\uff08\u5b9e\u9645\u4e0a\u662f\u501f\u4f4d\uff09\u4f1a\u5411\u5de6\u79fb\u52a8\u4e24\u4e2a\u4f4d\u7f6e\u3002</p> <p>In radix  r, with the standard digit set [0,  r \u2212 1], the number of digits needed to represent the natural numbers in [0,  max] is</p> <p>\u5728\u57fa\u6570 r \u4e2d\uff0c\u4f7f\u7528\u6807\u51c6\u6570\u5b57\u96c6 [0, r \u2212 1]\uff0c\u8868\u793a [0, max] \u4e2d\u7684\u81ea\u7136\u6570\u6240\u9700\u7684\u4f4d\u6570\u4e3a</p> \\[ k=\\left \\lfloor \\log_rmax \\right \\rfloor + 1  = \\left \\lceil \\log_r(max+1) \\right \\rceil \\] <p>Note that the number of different values represented is  max + 1. </p> <p>\u8bf7\u6ce8\u610f\uff0c\u8868\u793a\u7684\u4e0d\u540c\u503c\u7684\u6570\u91cf\u4e3a max + 1\u3002</p> <p>With fixed-point representation using  k  whole and  l  fractional digits, we have </p> <p>\u5bf9\u4e8e\u4f7f\u7528 k \u4e2a\u6574\u6570\u548c l \u4e2a\u5c0f\u6570\u4f4d\u7684\u5b9a\u70b9\u8868\u793a\uff0c\u6211\u4eec\u6709</p> \\[ max = r^k \u2212 r^{\u2212l} = r^k \u2212 ulp \\] <p>We will find the term  ulp, for the unit in least (significant) position, quite useful in describing certain arithmetic concepts without distinguishing between integers and fixed-point representations that include fractional parts. For integers,  ulp = 1. </p> <p>\u6211\u4eec\u4f1a\u53d1\u73b0\u672f\u8bed ulp\u8868\u793a\u7684\u662f\u6700\u5c0f\uff08\u6709\u6548\uff09\u4f4d\u7f6e\u7684\u5355\u4f4d\uff0c\u5728\u63cf\u8ff0\u67d0\u4e9b\u7b97\u672f\u6982\u5ff5\u65f6\u975e\u5e38\u6709\u7528\uff0c\u800c\u65e0\u9700\u533a\u5206\u6574\u6570\u548c\u5305\u542b\u5c0f\u6570\u90e8\u5206\u7684\u5b9a\u70b9\u8868\u793a\u3002\u5bf9\u4e8e\u6574\u6570\uff0culp = 1\u3002</p> <p>Specification of time intervals in terms of weeks, days, hours, minutes, seconds, and milliseconds is an example of mixed-radix representation. Given the two-part radix vector \u00b7 \u00b7 \u00b7  \\(r_3 r_2 r_1 r_0;  r_{\u22121} r_{\u22122}\\)\u00b7 \u00b7 \u00b7 defining the mixed radix, the two-part digit vector \\(\\cdots x_3 x_2 x_1 x_0;  x_{\u22121} x_{\u22122} \\cdots\\) represents the value.</p> <p>\u4ee5\u5468\u3001\u5929\u3001\u5c0f\u65f6\u3001\u5206\u949f\u3001\u79d2\u548c\u6beb\u79d2\u6765\u6307\u5b9a\u65f6\u95f4\u95f4\u9694\u662f\u6df7\u5408\u57fa\u6570\u8868\u793a\u7684\u4e00\u4e2a\u793a\u4f8b\u3002\u7ed9\u5b9a\u4e24\u90e8\u5206\u57fa\u5411\u91cf\\(\\cdots r_3 r_2 r_1 r_0;  r_{\u22121} r_{\u22122} \\cdots\\)\u5b9a\u4e49\u6df7\u5408\u57fa\u6570\uff0c\u548c\u4e24\u90e8\u5206\u6570\u5b57\u5411\u91cf\\(\\cdots x_3 x_2 x_1 x_0;  x_{\u22121} x_{\u22122} \\cdots\\) \u8868\u793a\u503c\u662f</p> <p>$$ \\cdots x_3r_2r_1r_0+x_2r_1r_0+x_1r_0+x0+\\frac{x_{-1}}{r_{-1}}+\\frac{x_{-2}}{r_{-1}r_{-2}}+ \\cdots $$ In the time interval example, the mixed radix is \u00b7 \u00b7 \u00b7 7, 24, 60, 60; 1000 \u00b7 \u00b7 \u00b7 and the digit vector 3, 2, 9, 22, 57; 492 (3 weeks, 2 days, 9 hours, 22 minutes, 57 seconds, and 492 milliseconds) represents</p> <p>\u65f6\u95f4\u95f4\u9694\u793a\u4f8b\u4e2d\uff0c\u6df7\u5408\u57fa\u6570\u4e3a\u2026\u20267\u300124\u300160\u300160\uff1b 1000\u00b7\u00b7\u00b7\u4ee5\u53ca\u6570\u5b57\u5411\u91cf3\u30012\u30019\u300122\u300157\uff1b 492\uff083\u54682\u59299\u5c0f\u65f622\u520657\u79d2\uff0c492\u6beb\u79d2\uff09\u4ee3\u8868\u7684\u662f</p> \\[ \\begin{array}{l} (3\u00d77\u00d724\u00d760\u00d760)+(2\u00d724\u00d760\u00d760)+(9\u00d760\u00d760)+(22\u00d760) \\\\ + 57 + 492 / 1000 = 2 020 977.492 \\text{ \u79d2} \\end{array} \\] <p>In Chapter 4, we will see that mixed-radix representation plays an important role in dealing with values represented in residue number systems. </p> <p>\u5728\u7b2c 4 \u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u770b\u5230\u6df7\u5408\u57fa\u6570\u8868\u793a\u5728\u5904\u7406\u4f59\u6570\u7cfb\u7edf\u4e2d\u8868\u793a\u7684\u503c\u65f6\u53d1\u6325\u7740\u91cd\u8981\u4f5c\u7528\u3002</p>"},{"location":"Part_01/01/#15","title":"1.5 \u6570\u5b57\u57fa\u6570\u8f6c\u6362","text":"<p>Assuming that the unsigned value  u  has exact representations in radices  r  and  R, we can write:</p> <p>\u5047\u8bbe\u65e0\u7b26\u53f7\u503c u \u5728\u57fa\u6570 r \u548c R \u4e2d\u5177\u6709\u7cbe\u786e\u8868\u793a\uff0c\u6211\u4eec\u53ef\u4ee5\u5199\uff1a</p> \\[ \\begin{array}{l} u &amp;= w \\cdot v \\\\   &amp;= (x_{k\u22121}x_{k\u22122} \\cdots x_1x_0 . x_{\u22121}x_{\u22122} \\cdots x_{\u2212l})_r \\\\   &amp;= (X_{K\u22121}X_{K\u22122} \\cdots X_1X_0 . X_{\u22121}X_{\u22122} \\cdots X_{\u2212L})R \\end{array} \\] <p>If an exact representation does not exist in one or both of the radices, the foregoing equalities will be approximate. </p> <p>\u5982\u679c\u5728\u4e00\u4e2a\u6216\u4e24\u4e2a\u57fa\u4e2d\u4e0d\u5b58\u5728\u7cbe\u786e\u8868\u793a\uff0c\u5219\u524d\u8ff0\u7b49\u5f0f\u5c06\u662f\u8fd1\u4f3c\u7684\u3002</p> <p>\u57fa\u6570\u8f6c\u6362\u95ee\u9898\u5b9a\u4e49\u5982\u4e0b\uff1a</p> \\[ \\begin{array}{l} \\text{\u7ed9\u5b9a }  &amp; r &amp;\\text{\u65e7\u7684\u57fa\u6570} \\\\              &amp; R &amp;\\text{\u65b0\u7684\u57fa\u6570\uff0c\u4ee5\u53ca} \\\\              &amp; x_is &amp;\\text{\u57fa\u6570r\u8868\u793au\u7684\u7684\u6570\u5b57} \\\\ \\text{\u627e\u51fa } &amp; X_is &amp;\\text{\u57fa\u6570R\u8868\u793au\u7684\u7684\u6570\u5b57} \\end{array} \\] <p>In the rest of this section, we will describe two methods for radix conversion based on doing the arithmetic in the old radix r or in the new radix R. We will also present a shortcut method, involving very little computation, that is applicable when the old and new radices are powers of the same number (e.g., 8 and 16, which are both powers of 2).</p> <p>Note that in converting u from radix r to radix R, where r and R are positive integers, we can convert the whole and fractional parts separately. This is because an integer (fraction) is an integer (fraction), independent of the number representation radix.</p> <p>\u5728\u672c\u8282\u7684\u5176\u4f59\u90e8\u5206\u4e2d\uff0c\u6211\u4eec\u5c06\u63cf\u8ff0\u4e24\u79cd\u57fa\u4e8e\u65e7\u57fa\u6570 r \u6216\u65b0\u57fa\u6570 R \u8fdb\u884c\u7b97\u672f\u7684\u57fa\u6570\u8f6c\u6362\u65b9\u6cd5\u3002\u6211\u4eec\u8fd8\u5c06\u4ecb\u7ecd\u4e00\u79cd\u6377\u5f84\u65b9\u6cd5\uff0c\u6d89\u53ca\u5f88\u5c11\u7684\u8ba1\u7b97\uff0c\u9002\u7528\u4e8e\u65e7\u57fa\u6570\u548c\u65b0\u57fa\u6570\u662f\u76f8\u540c\u6570\u5b57\u7684\u5e42\uff08\u4f8b\u5982 8 \u548c 16\uff0c\u5b83\u4eec\u90fd\u662f 2 \u7684\u5e42\uff09\u7684\u60c5\u51b5\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u5728\u5c06 u \u4ece\u57fa\u6570 r \u8f6c\u6362\u4e3a\u57fa\u6570 R \u65f6\uff0c\u5176\u4e2d r \u548c R \u662f\u6b63\u6574\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u5206\u522b\u8f6c\u6362\u6574\u6570\u90e8\u5206\u548c\u5c0f\u6570\u90e8\u5206\u3002\u8fd9\u662f\u56e0\u4e3a\u6574\u6570\uff08\u5c0f\u6570\uff09\u5c31\u662f\u6574\u6570\uff08\u5c0f\u6570\uff09\uff0c\u4e0e\u6570\u5b57\u8868\u793a\u57fa\u6570\u65e0\u5173\u3002</p> <p>Doing the arithmetic in the old radix r</p> <p>We use this method when radix- r  arithmetic is more familiar or efficient. The method is useful, for example, when we do manual computations and the old radix is  r = 10. The procedures for converting the whole and fractional parts, along with their justifications or proofs, are given below. </p>"},{"location":"Part_01/01/#r","title":"\u7528\u65e7\u57fa\u6570 r \u8fdb\u884c\u7b97\u672f\u8fd0\u7b97","text":"<p>\u5f53 radix-r \u7b97\u672f\u66f4\u719f\u6089\u6216\u66f4\u6709\u6548\u65f6\uff0c\u6211\u4eec\u4f7f\u7528\u6b64\u65b9\u6cd5\u3002\u4f8b\u5982\uff0c\u5f53\u6211\u4eec\u8fdb\u884c\u624b\u52a8\u8ba1\u7b97\u5e76\u4e14\u65e7\u57fa\u6570\u4e3a r = 10 \u65f6\uff0c\u8be5\u65b9\u6cd5\u5f88\u6709\u7528\u3002\u4e0b\u9762\u7ed9\u51fa\u8f6c\u6362\u6574\u6570\u90e8\u5206\u548c\u5c0f\u6570\u90e8\u5206\u7684\u8fc7\u7a0b\u53ca\u5176\u7406\u7531\u6216\u8bc1\u660e\u3002</p> <p>Converting the whole part w</p> <p>Procedure: Repeatedly divide the integer  \\(w = (x_{k\u22121} x_{k\u22122} \u00b7 \u00b7 \u00b7 x_1 x_0 )_r\\)   by the radix- r representation of  R. The remainders are the  Xi s, with  X 0 generated first. </p> <p>Justification: \\((X_{K\u22121} X_{K\u22122} \u00b7 \u00b7 \u00b7 X_1 X_0)_R \u2212 (X_0)_R\\)  is divisible by  R. Therefore,  X 0 is the remainder of dividing the integer  \\(w = (x_{k\u22121} x_{k\u22122} \u00b7 \u00b7 \u00b7 x_1 x_0 )_r\\)  by the radix- r representation of  R. </p> <p>Example: \\(( 105 )_{ten} = (?)_{five}\\)</p> <p>\u8f6c\u6362\u6574\u6570\u90e8\u5206w</p> <p>\u8fc7\u7a0b\uff1a \u91cd\u590d\u5c06\u6574\u6570 \\(w = (x_{k\u22121} x_{k\u22122} \u00b7 \u00b7 \u00b7 x_1 x_0 )_r\\) \u9664\u4ee5 R \u7684\u57fa\u6570 r \u8868\u793a\u3002\u4f59\u6570\u662f \\(X_i\\)\uff0c\u9996\u5148\u751f\u6210 \\(X_0\\)\u3002</p> <p>\u7406\u7531\uff1a \\((X_{K\u22121} X_{K\u22122} \u00b7 \u00b7 \u00b7 X_1 X_0)_R \u2212 (X_0)_R\\) \u53ef\u88ab R \u6574\u9664\u3002\u56e0\u6b64\uff0c\\(X_0\\) \u662f\u57fa\u6570 r \u8868\u793a\u7684\u6574\u6570 \\(w = (x_{k\u22121} x_{k\u22122} \u00b7 \u00b7 \u00b7 x_1 x_0 )_r\\)  \u9664\u4ee5 R \u7684\u4f59\u6570\u3002</p> <p>\u793a\u4f8b\uff1a\\(( 105 )_{10} = (?)_{5}\\)</p> <p>\u91cd\u590d\u9664\u4ee5 5\uff1a</p> \u5546 \u4f59 105 0 21 1 4 4 0 <p>\u7efc\u4e0a\u6240\u8ff0\uff0c\u6211\u4eec\u5f97\u51fa\u7ed3\u8bba\uff1a\\((105)_{10}\uff1d(410)_5\\)\u3002</p> <p>Converting the fractional part v</p> <p>Procedure: Repeatedly multiply the fraction  \\(v = (. x_{\u22121} x_{\u22122} \\cdots x_{\u2212l})_r\\) by the radix- r representation of  R. In each step, remove the whole part before multiplying again. The whole parts obtained are the  Xi s, with  X\u22121 generated first. </p> <p>Justification: \\(R \u00d7 ( 0. X_{\u22121} X_{\u22122} \\cdots X_{\u2212L})_R = (X_{\u22121}. X_{\u22122} \\cdots X_{\u2212L})_R\\) </p> <p>Example: ( 105.486 ) ten =  ( 410.?  ) five Repeatedly multiply by 5:</p> <p>\u8f6c\u6362\u5c0f\u6570\u90e8\u5206 v</p> <p>\u8fc7\u7a0b\uff1a\u5c06\u5206\u6570 \\(v = (. x_{\u22121} x_{\u22122} \\cdots x_{\u2212l})_r\\) \u4e0e R \u7684\u57fa\u6570 r \u8868\u793a\u91cd\u590d\u76f8\u4e58\u3002\u5728\u6bcf\u4e00\u6b65\u4e2d\uff0c\u5728\u518d\u6b21\u76f8\u4e58\u4e4b\u524d\u5220\u9664\u6574\u6570\u90e8\u5206\u3002\u83b7\u5f97\u7684\u6574\u6570\u90e8\u5206\u662f \\(X_i\\) \uff0c\u9996\u5148\u751f\u6210 \\(X_{\u22121}\\) \u3002</p> <p>\u7406\u7531\uff1a\\(R \u00d7 ( 0. X_{\u22121} X_{\u22122} \\cdots X_{\u2212L})_R = (X_{\u22121}. X_{\u22122} \\cdots X_{\u2212L})_R\\)\u3002</p> <p>\u793a\u4f8b\uff1a\\((105.486)_{10} = (410.?)_{5}\\) </p> <p>\u91cd\u590d\u4e58\u4ee5 5\uff1a</p> \u6574\u4f53\u90e8\u5206 \u5c0f\u6570 .486 2 .430 2 .150 0 .750 3 .750 3 .750 <p>\u7531\u4e0a\u53ef\u77e5\uff0c\\(( 105.486 )_{10} \\approx ( 410.220 33 )_{5}\\)\u3002</p> <p>Doing the arithmetic in the new radix  *R*</p> <p>We use this method when radix- R  arithmetic is more familiar or efficient. The method is useful, for example, when we manually convert numbers to radix 10. Again, the whole and fractional parts are converted separately. </p>"},{"location":"Part_01/01/#r_1","title":"\u7528\u65b0\u57fa\u6570 R \u8fdb\u884c\u7b97\u672f\u8fd0\u7b97","text":"<p>\u5f53\u57fa R \u7b97\u672f\u66f4\u719f\u6089\u6216\u66f4\u9ad8\u6548\u65f6\uff0c\u6211\u4eec\u4f7f\u7528\u6b64\u65b9\u6cd5\u3002\u8be5\u65b9\u6cd5\u5f88\u6709\u7528\uff0c\u4f8b\u5982\uff0c\u5f53\u6211\u4eec\u624b\u52a8\u5c06\u6570\u5b57\u8f6c\u6362\u4e3a\u57fa\u6570 10 \u65f6\u3002\u540c\u6837\uff0c\u6574\u6570\u90e8\u5206\u548c\u5c0f\u6570\u90e8\u5206\u662f\u5206\u5f00\u8f6c\u6362\u7684\u3002</p> <p>Converting the whole part w</p> <p>Procedure: Use repeated multiplications by  r  followed by additions according to the formula  ((\u00b7 \u00b7 \u00b7  ((xk\u22121 r +  xk\u22122 )r +  xk\u22123 )r + \u00b7 \u00b7 \u00b7  )r +  x 1 )r +  x 0. </p> <p>Justification: The given formula is the well-known Horner\u2019s method (or rule), first presented in the early nineteenth century, for the evaluation of the  (k \u2212 1 ) th-degree polynomial  xk\u22121 rk\u22121 +  xk\u22122 rk\u22122 + \u00b7 \u00b7 \u00b7 +  x 1 r +  x 0 [Knut97]. </p> <p>Example: ( 410 ) five =  (?  ) ten</p> <p>\u8f6c\u6362\u6574\u6570\u90e8\u5206w</p> <p>\u6b65\u9aa4\uff1a\u6839\u636e\u516c\u5f0f \\(((\u00b7\u00b7\u00b7((x_{k\u22121} r + x_{k\u22122} )r + x_{k\u22123} )r +\u00b7\u00b7\u00b7)r + x_1 )r + x_0\\) \u91cd\u590d\u4e58\u4ee5 r\uff0c\u7136\u540e\u8fdb\u884c\u52a0\u6cd5\u3002</p> <p>\u7406\u7531\uff1a\u7ed9\u5b9a\u7684\u516c\u5f0f\u662f\u8457\u540d\u7684\u970d\u7eb3\u65b9\u6cd5\uff08\u6216\u89c4\u5219\uff09\uff0c\u9996\u6b21\u63d0\u51fa\u4e8e\u5341\u4e5d\u4e16\u7eaa\u521d\uff0c\u7528\u4e8e\u5bf9\\((k \u2212 1 )\\)\u6b21\u591a\u9879\u5f0f \\(x_{k\u22121} r^{k\u22121} + x_{k\u22122} r^{k\u22122} + \u00b7 \u00b7 \u00b7 + x_1 r + x_0\\) \u6c42\u503c [Knut97] \u3002</p> <p>\u793a\u4f8b\uff1a\\(( 410 )_{5} = (?)_{10}\\)</p> \\[ (( 4 \u00d7 5 ) + 1 ) \u00d7 5 + 0 = 105 \u21d2 ( 410 )_5 = ( 105 )_{10} \\] <p>Converting the fractional part v</p> <p>Procedure: Convert the integer  rl \u00d7  ( 0.  v)  and then divide by  rl  in the new radix. </p> <p>Justification: rl \u00d7  ( 0.  v)/rl = 0.  v</p> <p>Example: ( 410.220 33 ) five =  ( 105.?  ) ten ( 0.220 33 ) five \u00d7 55 =  ( 22 033 ) five =  ( 1518 ) ten 1518 / 55 = 1518 / 3125 = 0.485 76</p> <p>\u8f6c\u6362\u5c0f\u6570\u90e8\u5206 v</p> <p>\u8fc7\u7a0b\uff1a\u5c06\u6574\u6570 \\(r^l \u00d7 ( 0. v)\\) \u8f6c\u6362\uff0c\u7136\u540e\u9664\u4ee5\u65b0\u57fa\u6570\u4e2d\u7684 \\(r^l\\)\u3002</p> <p>\u7406\u7531\uff1a\\(r^l\u00d7(0.v)/r^l=0.v\\)</p> <p>\u793a\u4f8b\uff1a$ ( 410.220 33 )_ = ( 105.? )_{10} $</p> \\[ \\begin{array}{l} ( 0.220 33 )_5 \u00d7 5^5 = ( 22 033 )_5 = ( 1518 )_{10} \\\\  1518 / 5^5 = 1518 / 3125 = 0.485 76 \\end{array} \\] <p>From the above, we conclude that  ( 410.220 33 ) five =  ( 105.485 76 ) ten. </p> <p>\u7efc\u4e0a\u6240\u8ff0\uff0c\u6211\u4eec\u5f97\u51fa\u7ed3\u8bba\uff1a( 410.220 33 )\\(_5\\) = ( 105.485 76 ) \\(_{10}\\)\u3002</p> <p>Note: Horner\u2019s method works here as well but is generally less practical. The digits of the fractional part are processed from right to left and the multiplication operation is replaced with division. Figure 1.3 shows how Horner\u2019s method can be applied to the preceding example. </p> <p>\u6ce8\u610f\uff1a\u970d\u7eb3\u7684\u65b9\u6cd5\u5728\u8fd9\u91cc\u4e5f\u9002\u7528\uff0c\u4f46\u901a\u5e38\u4e0d\u592a\u5b9e\u7528\u3002\u5c0f\u6570\u90e8\u5206\u7684\u6570\u5b57\u4ece\u53f3\u5411\u5de6\u5904\u7406\uff0c\u4e58\u6cd5\u8fd0\u7b97\u6539\u4e3a\u9664\u6cd5\u8fd0\u7b97\u3002\u56fe 1.3 \u663e\u793a\u4e86\u970d\u7eb3\u65b9\u6cd5\u5982\u4f55\u5e94\u7528\u4e8e\u524d\u9762\u7684\u793a\u4f8b\u3002</p> <p></p> <p>\u56fe 1.3 \u7528\u4e8e\u5c06 \\((.220 33 )_5\\) \u8f6c\u6362\u4e3a\u5341\u8fdb\u5236\u7684\u970d\u7eb3\u89c4\u5219\u3002</p> <p>Shortcut method for  *r* =  *bg* and  *R* =  *bG*</p>"},{"location":"Part_01/01/#r-bg-r-bg","title":"\\(r = b^g\\) \u548c \\(R = b^G\\) \u7684\u5feb\u6377\u65b9\u6cd5","text":"<p>In the special case when the old and new radices are integral powers of a common base  b, that is,  r =  bg  and  R =  bG, one can convert from radix  r  to radix  b  and then from radix  b to radix  R. Both these conversions are quite simple and require virtually no computation. </p> <p>\u5728\u7279\u6b8a\u60c5\u51b5\u4e0b\uff0c\u5f53\u65b0\u65e7\u57fa\u6570\u662f\u5171\u540c\u57fa\u6570 b \u7684\u6574\u6570\u5e42\u65f6\uff0c\u5373 \\(r = b^g\\) \u548c \\(R = b^G\\)\uff0c\u53ef\u4ee5\u4ece\u57fa\u6570 r \u8f6c\u6362\u4e3a\u57fa\u6570 b\uff0c\u7136\u540e\u4ece\u57fa\u6570 b \u8f6c\u6362\u4e3a\u57fa\u6570 R\u3002\u8fd9\u4e24\u79cd\u8f6c\u6362\u90fd\u975e\u5e38\u7b80\u5355\uff0c\u51e0\u4e4e\u4e0d\u9700\u8981\u8ba1\u7b97\u3002</p> <p>To convert from the old radix  r =  bg  to radix  b, simply convert each radix- r digit individually into a  g-digit radix- b  number and then juxtapose the resulting  g-digit numbers. </p> <p>\u8981\u4ece\u65e7\u7684\u57fa\u6570 \\(r = b^g\\) \u8f6c\u6362\u4e3a\u57fa\u6570 b\uff0c\u53ea\u9700\u5c06\u6bcf\u4e2a\u57fa\u6570 r \u6570\u5b57\u5355\u72ec\u8f6c\u6362\u4e3a g \u4f4d\u57fa\u6570 b \u6570\u5b57\uff0c\u7136\u540e\u5c06\u6240\u5f97\u7684 g \u4f4d\u6570\u5b57\u5e76\u7f6e\u5373\u53ef\u3002</p> <p>To convert from radix  b  to the new radix  R =  bG, form  G-digit groups of the radix- b digits starting from the radix point (to the left and to the right). Then convert the  G-digit radix- b  number of each group into a single radix- R  digit and juxtapose the resulting digits. </p> <p>\u8981\u5c06\u57fa\u6570 b \u8f6c\u6362\u4e3a\u65b0\u7684\u57fa\u6570 \\(R = b^G\\)\uff0c\u8bf7\u4ece\u57fa\u6570\u70b9\u5f00\u59cb\uff08\u5411\u5de6\u548c\u5411\u53f3\uff09\u5f62\u6210\u57fa\u6570 b \u6570\u5b57\u7684 G \u4f4d\u6570\u5b57\u7ec4\u3002\u7136\u540e\u5c06\u6bcf\u7ec4\u7684 G \u4f4d\u57fa\u6570 b \u6570\u8f6c\u6362\u4e3a\u5355\u4e2a\u57fa\u6570 R \u6570\uff0c\u5e76\u5c06\u6240\u5f97\u6570\u5b57\u5e76\u7f6e\u3002</p> <p>EXAMPLE 1.8 ( 2 301.302 ) four =  (?  ) eight We have 4 = 22 and 8 = 23. Thus, conversion through the intermediate radix 2 is used. </p> <p>Each radix-4 digit is independently replaced by a 2-bit radix-2 number. This is followed by 3-bit groupings of the resulting binary digits to find the radix-8 digits. </p> <p>**\u793a\u4f8b**1.8 ( 2 301.302 ) 4 = (?) 8 \u6211\u4eec\u67094 = 22 \u548c8 = 23\u3002\u56e0\u6b64\uff0c\u4f7f\u7528\u901a\u8fc7\u4e2d\u95f4\u57fa\u65702 \u8fdb\u884c\u7684\u8f6c\u6362\u3002</p> <p>\u6bcf\u4e2a radix-4 \u6570\u5b57\u72ec\u7acb\u5730\u66ff\u6362\u4e3a 2 \u4f4d radix-2 \u6570\u5b57\u3002\u63a5\u4e0b\u6765\u662f\u5bf9\u6240\u5f97\u4e8c\u8fdb\u5236\u6570\u5b57\u8fdb\u884c 3 \u4f4d\u5206\u7ec4\u4ee5\u67e5\u627e\u57fa\u6570 8 \u6570\u5b57\u3002</p> \\[ \\begin{array}{l} (2 301.302)_4 &amp;= \\frac{(10}{2}\\frac{11}{3}\\frac{00}{0}\\frac{01}{1}\\frac{.11}{3}\\frac{00}{0}\\frac{10)}{2}\\text{two} \\\\ &amp;=\\frac{(10}{2}\\frac{110}{6}\\frac{001}{1}\\frac{.110}{6}\\frac{010)}{2}\\text{two} = (261.62)_{8} \\end{array} \\] <p>Clearly, when  g = 1 (G = 1 ), the first (second) step of the shortcut conversion procedure is eliminated. This corresponds to the special case of  R =  rG(r =  Rg). For example, conversions between radix 2 and radix 8 or 16 belong to these special cases. </p> <p>\u663e\u7136\uff0c\u5f53g=1\uff08G=1\uff09\u65f6\uff0c\u5feb\u6377\u8f6c\u6362\u8fc7\u7a0b\u7684\u7b2c\u4e00\uff08\u6216\u7b2c\u4e8c\uff09\u6b65\u9aa4\u88ab\u6d88\u9664\u3002\u8fd9\u5bf9\u5e94\u4e8e \\(R = r^G\\)(\\(r = R^g\\)) \u7684\u7279\u6b8a\u60c5\u51b5\u3002\u4f8b\u5982\uff0c\u57fa\u6570 2 \u548c\u57fa\u6570 8 \u6216 16 \u4e4b\u95f4\u7684\u8f6c\u6362\u5c31\u5c5e\u4e8e\u8fd9\u4e9b\u7279\u6b8a\u60c5\u51b5\u3002</p> <p>1.6 CLASSES OF NUMBER REPRESENTATIONS</p>"},{"location":"Part_01/01/#16","title":"1.6 \u6570\u5b57\u8868\u793a\u7684\u7c7b\u522b","text":"<p>In Sections 1.4 and 1.5, we considered the representation of unsigned fixed-point numbers using fixed-radix number systems, with standard and nonstandard digit sets, as well as methods for converting between such representations with standard digit sets. In digital computations, we also deal with signed fixed-point numbers as well as signed and unsigned real values. Additionally, we may use unconventional representations for the purpose of speeding up arithmetic operations or increasing their accuracy. Understanding different ways of representing numbers, including their relative cost-performance benefits and conversions between various representations, is an important prerequisite for designing efficient arithmetic algorithms or circuits. </p> <p>\u5728\u7b2c 1.4 \u8282\u548c\u7b2c 1.5 \u8282\u4e2d\uff0c\u6211\u4eec\u8003\u8651\u4e86\u4f7f\u7528\u56fa\u5b9a\u57fa\u6570\u7cfb\u7edf\u3001\u6807\u51c6\u548c\u975e\u6807\u51c6\u6570\u5b57\u96c6\u6765\u8868\u793a\u65e0\u7b26\u53f7\u5b9a\u70b9\u6570\uff0c\u4ee5\u53ca\u5728\u8fd9\u79cd\u8868\u793a\u4e0e\u6807\u51c6\u6570\u5b57\u96c6\u4e4b\u95f4\u8fdb\u884c\u8f6c\u6362\u7684\u65b9\u6cd5\u3002\u5728\u6570\u5b57\u8ba1\u7b97\u4e2d\uff0c\u6211\u4eec\u8fd8\u5904\u7406\u5e26\u7b26\u53f7\u7684\u5b9a\u70b9\u6570\u4ee5\u53ca\u5e26\u7b26\u53f7\u548c\u65e0\u7b26\u53f7\u7684\u5b9e\u6570\u503c\u3002\u6b64\u5916\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u4f7f\u7528\u975e\u5e38\u89c4\u8868\u793a\u6765\u52a0\u901f\u7b97\u672f\u8fd0\u7b97\u6216\u63d0\u9ad8\u5176\u51c6\u786e\u6027\u3002\u4e86\u89e3\u8868\u793a\u6570\u5b57\u7684\u4e0d\u540c\u65b9\u5f0f\uff0c\u5305\u62ec\u5b83\u4eec\u7684\u76f8\u5bf9\u6027\u4ef7\u6bd4\u4f18\u52bf\u4ee5\u53ca\u5404\u79cd\u8868\u793a\u4e4b\u95f4\u7684\u8f6c\u6362\uff0c\u662f\u8bbe\u8ba1\u9ad8\u6548\u7b97\u672f\u7b97\u6cd5\u6216\u7535\u8def\u7684\u91cd\u8981\u5148\u51b3\u6761\u4ef6\u3002</p> <p>In the next three chapters, we will review techniques for representing fixed-point numbers, beginning with conventional methods and then moving on to some unconventional representations. </p> <p>\u5728\u63a5\u4e0b\u6765\u7684\u4e09\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u56de\u987e\u8868\u793a\u5b9a\u70b9\u6570\u7684\u6280\u672f\uff0c\u4ece\u4f20\u7edf\u65b9\u6cd5\u5f00\u59cb\uff0c\u7136\u540e\u8f6c\u5411\u4e00\u4e9b\u975e\u5e38\u89c4\u7684\u8868\u793a\u3002</p> <p>Signed fixed-point numbers, including various ways of representing and handling the sign information, are covered in Chapter 2. Signed-magnitude, biased, and complement representations (including both 1\u2019s and 2\u2019s complement) are covered in some detail. </p> <p>\u7b2c 2 \u7ae0\u4ecb\u7ecd\u4e86\u6709\u7b26\u53f7\u5b9a\u70b9\u6570\uff0c\u5305\u62ec\u8868\u793a\u548c\u5904\u7406\u7b26\u53f7\u4fe1\u606f\u7684\u5404\u79cd\u65b9\u5f0f\u3002\u8fd8\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u6709\u7b26\u53f7\u6570\u503c\u3001\u504f\u7f6e\u548c\u8865\u7801\u8868\u793a\uff08\u5305\u62ec 1 \u548c 2 \u7684\u8865\u7801\uff09\u3002</p> <p>The signed-digit number systems of Chapter 3 can also be viewed as methods for representing signed numbers, although their primary significance lies in the redundancy that allows addition without carry propagation. The material in Chapter 3 is essential for understanding several speedup methods in multiplication, division, and function evaluation. </p> <p>\u7b2c 3 \u7ae0\u7684\u6709\u7b26\u53f7\u6570\u5b57\u7cfb\u7edf\u4e5f\u53ef\u4ee5\u88ab\u89c6\u4e3a\u8868\u793a\u6709\u7b26\u53f7\u6570\u65b9\u6cd5\uff0c\u5c3d\u7ba1\u5b83\u4eec\u7684\u4e3b\u8981\u610f\u4e49\u5728\u4e8e\u5141\u8bb8\u52a0\u6cd5\u800c\u65e0\u9700\u8fdb\u4f4d\u4f20\u64ad\u7684\u5197\u4f59\u3002\u7b2c 3 \u7ae0\u4e2d\u7684\u6750\u6599\u5bf9\u4e8e\u7406\u89e3\u4e58\u6cd5\u3001\u9664\u6cd5\u548c\u51fd\u6570\u6c42\u503c\u4e2d\u7684\u51e0\u79cd\u52a0\u901f\u65b9\u6cd5\u81f3\u5173\u91cd\u8981\u3002</p> <p>Chapter 4 introduces residue number systems (for representing unsigned or signed integers) that allow some arithmetic operations to be performed in a truly parallel fashion at very high speed. Unfortunately, the difficulty of division and certain other arithmetic operations renders these number systems unsuitable for general applications. In Chapter 4, we also use residue representations to explore the limits of fast arithmetic. </p> <p>\u7b2c 4 \u7ae0\u4ecb\u7ecd\u4e86**\u5269\u4f59\u6570**\u7cfb\u7edf\uff08\u7528\u4e8e\u8868\u793a\u65e0\u7b26\u53f7\u6216\u6709\u7b26\u53f7\u6574\u6570\uff09\uff0c\u8be5\u7cfb\u7edf\u5141\u8bb8\u4ee5\u771f\u6b63\u5e76\u884c\u7684\u65b9\u5f0f\u4ee5\u975e\u5e38\u9ad8\u7684\u901f\u5ea6\u6267\u884c\u67d0\u4e9b\u7b97\u672f\u8fd0\u7b97\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u9664\u6cd5\u548c\u67d0\u4e9b\u5176\u4ed6\u7b97\u672f\u8fd0\u7b97\u7684\u56f0\u96be\u4f7f\u5f97\u8fd9\u4e9b\u6570\u5b57\u7cfb\u7edf\u4e0d\u9002\u5408\u4e00\u822c\u5e94\u7528\u3002\u5728\u7b2c 4 \u7ae0\u4e2d\uff0c\u6211\u4eec\u8fd8\u4f7f\u7528**\u7559\u6570**\u8868\u793a\u6765\u63a2\u7d22\u5feb\u901f\u7b97\u672f\u7684\u5c40\u9650\u6027\u3002</p> <p>Representation of real numbers can take different forms. Examples include slash number systems (for representing rational numbers), logarithmic number systems (for representing real values), and of course, floating-point numbers that constitute the primary noninteger data format in modern digital systems. These representations are discussed in Chapter 17 (introductory chapter of Part V), immediately before we deal with algorithms, hardware implementations, and error analyses for real-number arithmetic. </p> <p>\u5b9e\u6570\u7684\u8868\u793a\u53ef\u4ee5\u91c7\u7528\u4e0d\u540c\u7684\u5f62\u5f0f\u3002\u793a\u4f8b\u5305\u62ec\u659c\u6760\u6570\u5b57\u7cfb\u7edf\uff08\u7528\u4e8e\u8868\u793a\u6709\u7406\u6570\uff09\u3001\u5bf9\u6570\u6570\u5b57\u7cfb\u7edf\uff08\u7528\u4e8e\u8868\u793a\u5b9e\u6570\u503c\uff09\uff0c\u5f53\u7136\u8fd8\u6709\u6784\u6210\u73b0\u4ee3\u6570\u5b57\u7cfb\u7edf\u4e2d\u4e3b\u8981\u975e\u6574\u6570\u6570\u636e\u683c\u5f0f\u7684\u6d6e\u70b9\u6570\u3002\u5728\u6211\u4eec\u8ba8\u8bba\u5b9e\u6570\u7b97\u672f\u7684\u7b97\u6cd5\u3001\u786c\u4ef6\u5b9e\u73b0\u548c\u8bef\u5dee\u5206\u6790\u4e4b\u524d\uff0c\u6211\u4eec\u5c06\u5728\u7b2c 17 \u7ae0\uff08\u7b2c\u4e94\u90e8\u5206\u7684\u4ecb\u7ecd\u6027\u7ae0\u8282\uff09\u4e2d\u8ba8\u8bba\u8fd9\u4e9b\u8868\u793a\u5f62\u5f0f\u3002</p> <p>By combining features from two or more of the aforementioned \u201cpure\u201d representations, we can obtain many hybrid schemes. Examples include hybrid binary/signed-digit (see Section 3.4), hybrid residue/binary (see Section 4.5), hybrid logarithmic/signed-digit (see Section 17.6), and hybrid floating-point/logarithmic (see Problem 17.16) representations. </p> <p>\u901a\u8fc7\u7ec4\u5408\u6765\u81ea\u4e24\u4e2a\u6216\u591a\u4e2a\u4e0a\u8ff0\u201c\u7eaf\u201d\u4ee3\u8868\u7684\u7279\u5f81, \u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u8bb8\u591a\u6df7\u5408\u65b9\u6848\u3002\u793a\u4f8b\u5305\u62ec\u6df7\u5408\u4e8c\u8fdb\u5236/\u7b26\u53f7\u6570\u5b57\uff08\u53c2\u89c1\u7b2c 3.4 \u8282\uff09\u3001\u6df7\u5408\u7559\u6570/\u4e8c\u8fdb\u5236\uff08\u53c2\u89c1\u7b2c 4.5 \u8282\uff09\u3001\u6df7\u5408\u5bf9\u6570/\u7b26\u53f7\u6570\u5b57\uff08\u53c2\u89c1\u7b2c 17.6 \u8282\uff09\u548c\u6df7\u5408\u6d6e\u70b9/\u5bf9\u6570\uff08\u53c2\u89c1\u95ee\u9898 17.16\uff09\u8868\u793a\u3002</p> <p>This is a good place to introduce a notational tool, that we will find quite useful throughout the book. The established dot notation uses heavy dots to represent standard or positively-weighted bits, which we may call posibits. For example, Fig. 1.4a represents the addition of two 4-bit unsigned binary numbers whose posibits have weights \\(1\u30012\u30012^2\\) and \\(2^3\\), from right to left, and whose sum is a 5-bit number. Figure 1.4b depicts the pencil-and-paper algorithm for multiplying two 4-bit unsigned binary numbers, producing four partial products and then adding them, with proper alignments, to derive the 8-bit final result. We will see later that negatively weighted bits, or negabits, are also quite useful, prompting us to introduce the extended dot notation (see Section 2.6). </p> <p>\u8fd9\u662f\u4ecb\u7ecd\u7b26\u53f7\u5de5\u5177\u7684\u597d\u5730\u65b9\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u5b83\u5728\u6574\u672c\u4e66\u4e2d\u975e\u5e38\u6709\u7528\u3002\u65e2\u5b9a\u7684\u70b9\u8868\u793a\u6cd5\u4f7f\u7528\u7c97\u70b9\u6765\u8868\u793a\u6807\u51c6\u6216\u6b63\u52a0\u6743\u4f4d\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u79f0\u4e3a posibits\u3002\u4f8b\u5982\uff0c\u56fe1.4a\u8868\u793a\u4e24\u4e2a4\u4f4d\u65e0\u7b26\u53f7\u4e8c\u8fdb\u5236\u6570\u7684\u76f8\u52a0\uff0c\u5176\u4f4d\u7f6e\u4f4d\u7684\u6743\u91cd\u4ece\u53f3\u5230\u5de6\u5206\u522b\u4e3a\\(1\u30012\u30012^2\\)\u548c\\(2^3\\)\uff0c\u5176\u548c\u4e3a5\u4f4d\u6570\u3002\u56fe1.4b \u63cf\u8ff0\u4e86\u7eb8\u7b14\u7b97\u6cd5\uff0c\u7528\u4e8e\u5c06\u4e24\u4e2a 4 \u4f4d\u65e0\u7b26\u53f7\u4e8c\u8fdb\u5236\u6570\u76f8\u4e58\uff0c\u4ea7\u751f\u56db\u4e2a\u90e8\u5206\u79ef\uff0c\u7136\u540e\u5c06\u5b83\u4eec\u76f8\u52a0\uff0c\u5e76\u8fdb\u884c\u9002\u5f53\u7684\u5bf9\u9f50\uff0c\u4ee5\u83b7\u5f97 8 \u4f4d\u6700\u7ec8\u7ed3\u679c\u3002\u7a0d\u540e\u6211\u4eec\u5c06\u770b\u5230\u8d1f\u6743\u91cd\u4f4d\u6216\u8d1f\u4f4d\u4e5f\u975e\u5e38\u6709\u7528\uff0c\u4fc3\u4f7f\u6211\u4eec\u5f15\u5165\u6269\u5c55\u70b9\u8868\u793a\u6cd5\uff08\u53c2\u89c1\u7b2c 2.6 \u8282\uff09\u3002</p> <p></p> <p>A final point before we conclude this chapter: You can be a proficient arithmetic designer knowing only the following three key number representation systems and their properties:</p> <ul> <li> <p>2\u2019s-complement format (Section 2.4)</p> </li> <li> <p>Binary stored-carry or carry-save format (Section 3.2)</p> </li> <li> <p>Binary floating-point format (Chapter 17)</p> </li> </ul> <p>\u5728\u7ed3\u675f\u672c\u7ae0\u4e4b\u524d\uff0c\u6700\u540e\u4e00\u70b9\u662f\uff1a\u60a8\u53ef\u4ee5\u6210\u4e3a\u4e00\u540d\u719f\u7ec3\u7684\u7b97\u672f\u8bbe\u8ba1\u8005\uff0c\u53ea\u9700\u4e86\u89e3\u4ee5\u4e0b\u4e09\u4e2a\u5173\u952e\u6570\u5b57\u8868\u793a\u7cfb\u7edf\u53ca\u5176\u5c5e\u6027\uff1a</p> <ul> <li>2 \u7684\u8865\u7801\u683c\u5f0f\uff08\u7b2c 2.4 \u8282\uff09</li> <li>\u4e8c\u8fdb\u5236\u5b58\u50a8\u8fdb\u4f4d\u6216\u8fdb\u4f4d\u4fdd\u5b58\u683c\u5f0f\uff08\u7b2c 3.2 \u8282\uff09</li> <li>\u4e8c\u8fdb\u5236\u6d6e\u70b9\u683c\u5f0f\uff08\u7b2c 17 \u7ae0\uff09</li> </ul> <p>All the other formats, discussed in Chapters 2-4, are useful for optimizing application-specific designs or to gain a deeper understanding of the issues involved, but you can ignore them with no serious harm. There are indications, however, that decimal arithmetic may regain the importance it once had, because it avoids errors in the conversion between human-readable numbers and their machine representations.</p> <p>\u7b2c 2~4 \u7ae0\u4e2d\u8ba8\u8bba\u7684\u6240\u6709\u5176\u4ed6\u683c\u5f0f\u5bf9\u4e8e\u4f18\u5316\u7279\u5b9a\u4e8e\u5e94\u7528\u7a0b\u5e8f\u7684\u8bbe\u8ba1\u6216\u6df1\u5165\u4e86\u89e3\u6240\u6d89\u53ca\u7684\u95ee\u9898\u5f88\u6709\u7528\uff0c\u4f46\u60a8\u53ef\u4ee5\u5ffd\u7565\u5b83\u4eec\uff0c\u4e0d\u4f1a\u9020\u6210\u4e25\u91cd\u635f\u5bb3\u3002\u7136\u800c\uff0c\u6709\u8ff9\u8c61\u8868\u660e\uff0c\u5341\u8fdb\u5236\u7b97\u672f\u53ef\u80fd\u4f1a\u6062\u590d\u5176\u66fe\u7ecf\u7684\u91cd\u8981\u6027\uff0c\u56e0\u4e3a\u5b83\u907f\u514d\u4e86\u4eba\u7c7b\u53ef\u8bfb\u6570\u5b57\u4e0e\u5176\u673a\u5668\u8868\u793a\u4e4b\u95f4\u7684\u8f6c\u6362\u9519\u8bef\u3002</p>"},{"location":"Part_01/01/#_1","title":"\u95ee\u9898","text":""},{"location":"Part_01/01/#_2","title":"\u53c2\u8003\u6587\u732e\u548c\u8fdb\u4e00\u6b65\u9605\u8bfb","text":"<pre><code>[Dimi03]    Dimitrov, V. S., and G. A. Jullien, \u201cLoading the Bases: A New Number Representation\n            with Applications,\u201d IEEE Circuits and Systems, Vol. 3, No. 2, pp. 6\u201323, 2003.\n[GAO92]     General Accounting Office, \u201cPatriot Missile Defense: Software Problem Led to\n            System Failure at Dhahran, Saudi Arabia,\u201d US Government Report\n            GAO/IMTEC-92-26, 1992.\n[Knut97]    Knuth, D. E., The Art of Computer Programming, 3rd ed., Vol. 2: Seminumerical\n            Algorithms, Addison-Wesley, 1997.\n[Lion96]    Lions, J. L., \u201cAriane 5 Flight 505 Failure,\u201d Report by the Inquiry Board, July 19, 1996.\n[Loh02]     Loh, E., and G. W. Walster, \u201cRump\u2019s Example Revisited,\u201d Reliable Computing, Vol.\n            8, pp. 245\u2013248, 2002.\n[Mole95]    Moler, C., \u201cA Tale of Two Numbers,\u201d SIAM News, Vol. 28, No. 1, pp. 1, 16, 1995.\n[Parh92]    Parhami, B., \u201cSystolic Number Radix Converters,\u201d Computer J., Vol. 35, No. 4, pp.\n            405\u2013409, August 1992.\n[Parh02]    Parhami, B., \u201cNumber Representation and Computer Arithmetic,\u201d Encyclopedia of\n            Information Systems, Academic Press, Vol. 3, pp. 317\u2013333, 2002.\n[Scot85]    Scott, N. R., Computer Number Systems and Arithmetic, Prentice-Hall, 1985.\n[Silv06]    Silverman, J. H., A Friendly Introduction to Number Theory, Pearson, 2006.\n[Stol04]    Stoll, C., \u201cThe Curious History of the First Pocket Calculator,\u201dScientific American,\n            Vol. 290, No. 1, pp. 92\u201399, January 2004.\n[Thim95]    Thimbleby, H., \u201cA New Calculator and Why It Is Necessary,\u201d Computer J., Vol. 38,\n            No. 6, pp. 418\u2013433, 1995.\n</code></pre>"},{"location":"Part_01/02/","title":"2. \u6709\u7b26\u53f7\u6570\u7684\u8868\u793a","text":"<p>\u201cThis can\u2019t be right . . . it goes into the red!\u201d</p> <p>LITTLE BOY, WHEN ASKED TO SUBTRACT 36 FROM 24 ( CAPTION ON A CARTOON BY UNKNOWN ARTIST)</p> <p>\u201c\u8fd9\u4e0d\u5bf9\u554a\u2026 \u2026\u8981\u6807\u7ea2(\u6b20\u94b1)\u4e86\uff01\u201d</p> <p>\u5f53\u5c0f\u7537\u5b69\u88ab\u8981\u6c42\u4ece 24 \u4e2d\u51cf\u53bb36 \u65f6\uff08\u5361\u901a\u4e0a\u7684\u5b57\u5e55\uff0c\u65e0\u540d\u827a\u672f\u5bb6\uff09</p> <p>This chapter deals with the representation of signed fixed-point numbers by providing an attached sign bit, adding a fixed bias to all numbers, complementing negative values, attaching signs to digit positions, or using signed digits. In view of its importance in the design of fast arithmetic algorithms and hardware, representing signed fixed-point numbers by means of signed digits is further explored in Chapter 3. Chapter topics include:</p> <p>\u672c\u7ae0\u8ba8\u8bba\u6709\u7b26\u53f7\u5b9a\u70b9\u6570\u7684\u8868\u793a\uff0c\u901a\u8fc7\u9644\u52a0\u7b26\u53f7\u4f4d\uff0c\u4e3a\u6240\u6709\u6570\u5b57\u6dfb\u52a0\u56fa\u5b9a\u504f\u5dee\uff0c\u5bf9\u8d1f\u503c\u6c42\u8865\u3001\u5728\u6570\u5b57\u4f4d\u4e0a\u9644\u52a0\u7b26\u53f7\u6216\u4f7f\u7528\u5e26\u7b26\u53f7\u7684\u6570\u5b57\u7b49\u65b9\u6cd5\u3002\u9274\u4e8e\u5176\u5728\u5feb\u901f\u7b97\u672f\u7b97\u6cd5\u548c\u786c\u4ef6\u8bbe\u8ba1\u4e2d\u7684\u91cd\u8981\u6027\uff0c\u7b2c 3 \u7ae0\u5c06\u8fdb\u4e00\u6b65\u63a2\u8ba8\u7528\u6709\u7b26\u53f7\u6570\u5b57\u8868\u793a\u6709\u7b26\u53f7\u5b9a\u70b9\u6570\u3002\u672c\u7ae0\u4e3b\u9898\u5305\u62ec\uff1a</p> <p>2.1 \u7b26\u53f7\u5e45\u5ea6\u8868\u793a\u6cd5 Signed-Magnitude Representation</p> <p>2.2 \u504f\u7f6e\u8868\u793a\u6cd5 Biased Representations</p> <p>2.3 \u8865\u7801\u8868\u793a Complement Representations</p> <p>2.4 2 \u548c 1 \u7684\u8865\u7801\u6570 2\u2019s- and 1\u2019s-Complement Numbers</p> <p>2.5 \u76f4\u63a5\u548c\u95f4\u63a5\u6709\u7b26\u53f7\u7b97\u672fDirect and Indirect Signed Arithmetic</p> <p>2.6 \u4f7f\u7528\u5e26\u7b26\u53f7\u4f4d\u7f6e\u6216\u5e26\u7b26\u53f7\u6570\u5b57 Using Signed Positions or Signed Digits</p>"},{"location":"Part_01/02/#21","title":"2.1 \u7b26\u53f7\u5e45\u5ea6\u8868\u793a\u6cd5","text":"<p>The natural numbers 0, 1, 2,  . . . ,  max  can be represented as fixed-point numbers without fractional parts (refer to Section 1.4). In radix  r, the number  k  of digits needed for representing the natural numbers up to  max  is</p> <p>\u81ea\u7136\u6570 0, 1, 2, . \u3002 \u3002 , max \u53ef\u4ee5\u8868\u793a\u4e3a\u6ca1\u6709\u5c0f\u6570\u90e8\u5206\u7684\u5b9a\u70b9\u6570\uff08\u8bf7\u53c2\u9605\u7b2c 1.4 \u8282\uff09\u3002\u5728\u57fa\u6570 r \u4e2d\uff0c\u8868\u793a\u6700\u5927\u5230 max \u7684\u81ea\u7136\u6570\u6240\u9700\u7684\u4f4d\u6570 k \u4e3a</p> \\[ k=\\left \\lfloor \\log_r{max}\\right \\rfloor + 1= \\left \\lceil \\log_r(max+1) \\right \\rceil \\] <p></p> <p>Conversely, with  k  digits, one can represent the values 0 through  \\(r^k \u2212 1\\), inclusive; that is, the intervalo \\([0, r^k \u2212 1] = [0, r^k )\\)f natural numbers. </p> <p>\u76f8\u53cd\uff0c\u5bf9\u4e8e \\(k\\) \u4f4d\u6570\u5b57\uff0c\u53ef\u4ee5\u8868\u793a\u503c \\(0\\) \u5230  \\(r^k \u2212 1\\)\uff08\u542b\u7aef\u70b9\uff09\uff1b\u5373\u81ea\u7136\u6570\u7684\u533a\u95f4 \\([0, r^k \u2212 1] = [0, r^k )\\)\u3002</p> <p>Natural numbers are often referred to as \u201cunsigned integers,\u201d which form a special data type in many programming languages and computer instruction sets. The advantage of using this data type as opposed to \u201cintegers\u201d when the quantities of interest are known to be nonnegative is that a larger representation range can be obtained (e.g., maximum value of 255, rather than 127, with 8 bits). </p> <p>\u81ea\u7136\u6570\u901a\u5e38\u88ab\u79f0\u4e3a\u201c\u65e0\u7b26\u53f7\u6574\u6570\u201d\uff0c\u5b83\u5728\u8bb8\u591a\u7f16\u7a0b\u8bed\u8a00\u548c\u8ba1\u7b97\u673a\u6307\u4ee4\u96c6\u4e2d\u5f62\u6210\u4e00\u79cd\u7279\u6b8a\u7684\u6570\u636e\u7c7b\u578b\u3002\u5f53\u5df2\u77e5\u611f\u5174\u8da3\u7684\u91cf\u4e3a\u975e\u8d1f\u65f6\uff0c\u4f7f\u7528\u6b64\u6570\u636e\u7c7b\u578b\u800c\u4e0d\u662f\u201c\u6574\u6570\u201d\u7684\u4f18\u70b9\u662f\u53ef\u4ee5\u83b7\u5f97\u66f4\u5927\u7684\u8868\u793a\u8303\u56f4\uff08\u4f8b\u5982\uff0c\u6700\u5927\u503c\u4e3a 255\uff0c\u800c\u4e0d\u662f 8 \u4f4d\u7684 127\uff09\u3002</p> <p>One way to represent both positive and negative integers is to use \u201csigned magnitudes,\u201d or the sign-and-magnitude format, in which 1 bit is devoted to sign. The common convention is to let 1 denote a negative sign and 0 a positive sign. In the case of radix-2 numbers with a total width of  k  bits,  k \u22121 bits will be available to represent the magnitude or absolute value of the number. The range of  k-bit signed-magnitude binary numbers is thus [\u2212 ( 2 k\u22121 \u2212 1 ), 2 k\u22121 \u2212 1]. Figure 2.1 depicts the assignment of values to bit patterns for a 4-bit signed-magnitude format. </p> <p>\u8868\u793a\u6b63\u6574\u6570\u548c\u8d1f\u6574\u6570\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528\u201c\u6709\u7b26\u53f7\u7684\u5e45\u5ea6\u201d\u6216\u201c\u7b26\u53f7\u52a0\u5e45\u5ea6\u201d\u683c\u5f0f\uff0c\u5176\u4e2d 1 \u4f4d\u4e13\u7528\u4e8e\u7b26\u53f7\u3002\u5e38\u89c1\u7684\u7ea6\u5b9a\u662f\u8ba9 1 \u8868\u793a\u8d1f\u53f7\uff0c0 \u8868\u793a\u6b63\u53f7\u3002\u4ee5 radix-2 \u603b\u5bbd\u5ea6\u4e3a k \u4f4d\u7684\u6570\u5b57\u4e3a\u4f8b\uff0c\u53ef\u4f7f\u7528 k-1 \u4f4d\u6765\u8868\u793a\u6570\u5b57\u7684\u5927\u5c0f\u6216\u7edd\u5bf9\u503c\u3002\u56e0\u6b64\uff0ck \u4f4d\u6709\u7b26\u53f7\u6570\u503c\u4e8c\u8fdb\u5236\u6570\u7684\u8303\u56f4\u4e3a \\([\u2212 ( 2^{k\u22121} \u2212 1 ), 2^{k\u22121} \u2212 1]\\)\u3002\u56fe 2.1 \u63cf\u8ff0\u4e86 4 \u4f4d\u6709\u7b26\u53f7\u6570\u503c\u683c\u5f0f\u7684\u4f4d\u6a21\u5f0f\u7684\u503c\u5206\u914d\u3002</p> <p>Advantages of signed-magnitude representation include its intuitive appeal, conceptual simplicity, symmetric range, and simple negation (sign change) by flipping or inverting the sign bit. The primary disadvantage is that addition of numbers with unlike signs (subtraction) must be handled differently from that of same-sign operands. </p> <p>\u7b26\u53f7\u52a0\u5e45\u5ea6\u8868\u793a\u7684\u4f18\u70b9\u5305\u62ec\u5176\u76f4\u89c2\u5438\u5f15\u529b\u3001\u6982\u5ff5\u7b80\u5355\u3001\u5bf9\u79f0\u8303\u56f4\u4ee5\u53ca\u901a\u8fc7\u7ffb\u8f6c\u6216\u53cd\u8f6c\u7b26\u53f7\u4f4d\u8fdb\u884c\u7b80\u5355\u6c42\u53cd\uff08\u7b26\u53f7\u66f4\u6539\uff09\u3002\u4e3b\u8981\u7f3a\u70b9\u662f\u5177\u6709\u4e0d\u540c\u7b26\u53f7\u7684\u6570\u5b57\u7684\u52a0\u6cd5\uff08\u51cf\u6cd5\uff09\u5fc5\u987b\u4ee5\u4e0e\u76f8\u540c\u7b26\u53f7\u64cd\u4f5c\u6570\u4e0d\u540c\u7684\u65b9\u5f0f\u5904\u7406\u3002</p> <p>The hardware implementation of an adder for signed-magnitude numbers either involves a magnitude comparator and a separate subtractor circuit or else is based on the use of complement representation (see Section 2.3) internally within the arithmetic/logic unit (ALU). In the latter approach, a negative operand is complemented at the ALU\u2019s input, the computation is done by means of complement representation, and the result is complemented, if necessary, to produce the signed-magnitude output. Because the pre- and postcomplementation steps add to the computation delay, it is better to use the complement representation throughout. This is exactly what modern computers do. </p> <p>\u7528\u4e8e\u6709\u7b26\u53f7\u6570\u503c\u7684\u52a0\u6cd5\u5668\u7684\u786c\u4ef6\u5b9e\u73b0\u6d89\u53ca\u5e45\u5ea6\u6bd4\u8f83\u5668\u548c\u5355\u72ec\u7684\u51cf\u6cd5\u5668\u7535\u8def\uff0c\u6216\u8005\u57fa\u4e8e\u7b97\u672f/\u903b\u8f91\u5355\u5143 (ALU) \u5185\u90e8\u8865\u7801\u8868\u793a\u6cd5\u7684\u4f7f\u7528\uff08\u53c2\u89c1\u7b2c 2.3 \u8282\uff09\u3002\u5728\u540e\u4e00\u79cd\u65b9\u6cd5\u4e2d\uff0c\u8d1f\u64cd\u4f5c\u6570\u5728 ALU \u7684\u8f93\u5165\u5904\u6c42\u8865\uff0c\u8ba1\u7b97\u901a\u8fc7\u6c42\u8865\u8868\u793a\u6765\u5b8c\u6210\uff0c\u5e76\u4e14\u5982\u679c\u9700\u8981\u7684\u8bdd\uff0c\u5bf9\u7ed3\u679c\u6c42\u8865\u4ee5\u4ea7\u751f\u5e26\u7b26\u53f7\u7684\u5e45\u5ea6\u8f93\u51fa\u3002\u7531\u4e8e\u8865\u7801\u524d\u548c\u8865\u7801\u540e\u7684\u6b65\u9aa4\u4f1a\u589e\u52a0\u8ba1\u7b97\u5ef6\u8fdf\uff0c\u56e0\u6b64\u6700\u597d\u59cb\u7ec8\u4f7f\u7528\u8865\u7801\u8868\u793a\u3002\u8fd9\u6b63\u662f\u73b0\u4ee3\u8ba1\u7b97\u673a\u6240\u505a\u7684\u3002</p> <p>Besides the aforementioned extra delay in addition and subtraction, signed-magnitude representation allows two representations for 0, leading to the need for special Biased Representations care in number comparisons or added overhead for detecting \u22120 and changing it to +0. This drawback, however, is unavoidable in any radix-2 number representation system with symmetric range. </p> <p>\u9664\u4e86\u524d\u9762\u63d0\u5230\u7684\u52a0\u6cd5\u548c\u51cf\u6cd5\u7684\u989d\u5916\u5ef6\u8fdf\u4e4b\u5916\uff0c\u6709\u7b26\u53f7\u6570\u503c\u8868\u793a\u5141\u8bb8 0 \u7684\u4e24\u79cd\u8868\u793a\uff0c\u5bfc\u81f4\u5728\u6570\u5b57\u6bd4\u8f83\u4e2d\u9700\u8981\u7279\u6b8a\u7684\u504f\u7f6e\u8868\u793a\uff0c\u6216\u8005\u589e\u52a0\u68c0\u6d4b -0 \u5e76\u5c06\u5176\u66f4\u6539\u4e3a +0 \u7684\u5f00\u9500\u3002 \u7136\u800c\uff0c\u8fd9\u4e2a\u7f3a\u70b9\u5728\u4efb\u4f55\u5177\u6709\u5bf9\u79f0\u8303\u56f4\u7684\u57fa 2 \u6570\u5b57\u8868\u793a\u7cfb\u7edf\u4e2d\u90fd\u662f\u4e0d\u53ef\u907f\u514d\u7684\u3002</p> <p>Figure 2.2 shows the hardware implementation of signed-magnitude addition using selective pre- and postcomplementation. The control circuit receives as inputs the operation to be performed (0 = add, 1 = subtract), the signs of the two operands  x  and  y, the carry-out of the adder, and the sign of the addition result. It produces signals for the adder\u2019s carry-in, complementation of  x, complementation of the addition result, and the sign of the result. Note that complementation hardware is provided only for the  x operand. This is because  x \u2212 y  can be obtained by first computing  y \u2212 x  and then changing the sign of the result. You will understand this design much better after we have covered complement representations of negative numbers in Sections 2.3 and 2.4. </p> <p>\u56fe 2.2 \u663e\u793a\u4e86\u4f7f\u7528\u9009\u62e9\u6027\u524d\u8865\u548c\u540e\u8865\u7684\u6709\u7b26\u53f7\u6570\u503c\u52a0\u6cd5\u7684\u786c\u4ef6\u5b9e\u73b0\u3002\u63a7\u5236\u7535\u8def\u63a5\u6536\u8981\u6267\u884c\u7684\u64cd\u4f5c\uff080 = \u52a0\uff0c1 = \u51cf\uff09\u3001\u4e24\u4e2a\u64cd\u4f5c\u6570 x \u548c y \u7684\u7b26\u53f7\u3001\u52a0\u6cd5\u5668\u7684\u8fdb\u4f4d\u4ee5\u53ca\u52a0\u6cd5\u7ed3\u679c\u7684\u7b26\u53f7\u4f5c\u4e3a\u8f93\u5165\u3002\u5b83\u4ea7\u751f\u52a0\u6cd5\u5668\u7684\u8fdb\u4f4d\u4fe1\u53f7\u3001x \u7684\u8865\u7801\u3001\u52a0\u6cd5\u7ed3\u679c\u7684\u8865\u7801\u4ee5\u53ca\u7ed3\u679c\u7684\u7b26\u53f7\u3002\u8bf7\u6ce8\u610f\uff0c\u4ec5\u4e3a x \u64cd\u4f5c\u6570\u63d0\u4f9b\u8865\u7801\u786c\u4ef6\u3002\u8fd9\u662f\u56e0\u4e3a x \u2212 y \u53ef\u4ee5\u901a\u8fc7\u5148\u8ba1\u7b97 y \u2212 x \u7136\u540e\u6539\u53d8\u7ed3\u679c\u7684\u7b26\u53f7\u6765\u83b7\u5f97\u3002\u5728\u6211\u4eec\u5728 2.3 \u548c 2.4 \u8282\u4e2d\u4ecb\u7ecd\u4e86\u8d1f\u6570\u7684\u8865\u7801\u8868\u793a\u4e4b\u540e\uff0c\u60a8\u5c06\u66f4\u597d\u5730\u7406\u89e3\u8fd9\u79cd\u8bbe\u8ba1\u3002</p> <p></p>"},{"location":"Part_01/02/#22","title":"2.2 \u504f\u7f6e\u8868\u793a\u6cd5","text":"<p>One way to deal with signed numbers is to devise a representation or coding scheme that converts signed numbers into unsigned numbers. For example, the biased representation is based on adding a positive value  bias  to all numbers, allowing us to represent the integers from \u2013 bias  to  max \u2013  bias  using unsigned values from 0 to  max. Such a representation is sometimes referred to as \u201cexcess- bias\u201d (e.g., excess-3 or excess-128) coding. </p> <p>\u5904\u7406\u6709\u7b26\u53f7\u6570\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u8bbe\u8ba1\u4e00\u79cd\u5c06\u6709\u7b26\u53f7\u6570\u8f6c\u6362\u4e3a\u65e0\u7b26\u53f7\u6570\u7684\u8868\u793a\u6216\u7f16\u7801\u65b9\u6848\u3002\u4f8b\u5982\uff0c\u6709\u504f\u5dee\u8868\u793a\u57fa\u4e8e\u5411\u6240\u6709\u6570\u5b57\u6dfb\u52a0\u6b63\u503c\u504f\u5dee\uff0c\u5141\u8bb8\u6211\u4eec\u4f7f\u7528\u4ece 0 \u5230 max \u7684\u65e0\u7b26\u53f7\u503c\u6765\u8868\u793a\u4ece \\(-bias\\)\u5230\\(max-bias\\)\u7684\u6574\u6570\u3002\u8fd9\u79cd\u8868\u793a\u6709\u65f6\u88ab\u79f0\u4e3a\u201cexcess- bias\u201d (\u201c\u8fc7\u91cf\u504f\u5dee\u201d)\uff08\u4f8b\u5982\uff0cexcess-3 \u6216 excess-3\uff09\u7f16\u7801\u3002</p> <p>We will see in Chapter 17 that biased representation is used to encode the exponent part of a floating-point number. </p> <p>\u6211\u4eec\u5c06\u5728\u7b2c 17 \u7ae0\u4e2d\u770b\u5230\uff0c\u504f\u7f6e\u8868\u793a\u6cd5\u7528\u4e8e\u5bf9\u6d6e\u70b9\u6570\u7684\u6307\u6570\u90e8\u5206\u8fdb\u884c\u7f16\u7801\u3002</p> <p>Figure 2.3 shows how signed integers in the range [\u22128, +7] can be encoded as unsigned values 0 through 15 by using a bias of 8. With  k-bit representations and a bias of 2 k\u22121, the leftmost bit indicates the sign of the value represented (0 = negative, 1 = positive). Note that this is the opposite of the commonly used convention for number signs. With a bias of 2 k\u22121 or 2 k\u22121 \u2212 1, the range of represented integers is almost symmetric. </p> <p>\u56fe 2.3 \u663e\u793a\u4e86 [\u22128, +7] \u8303\u56f4\u5185\u7684\u6709\u7b26\u53f7\u6574\u6570\u5982\u4f55\u7f16\u7801\u4e3a\u4f7f\u7528 8 \u7684\u504f\u5dee\u6765\u8868\u793a 0 \u5230 15 \u4e4b\u95f4\u7684\u65e0\u7b26\u53f7\u503c\u3002\u5bf9\u4e8e k \u4f4d\u8868\u793a\u548c \\(2^{k\u22121}\\) \u7684\u504f\u5dee\uff0c\u6700\u5de6\u8fb9\u7684\u4f4d\u8868\u793a\u6240\u8868\u793a\u503c\u7684\u7b26\u53f7\uff080 = \u8d1f\uff0c1 = \u6b63\uff09\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u4e0e\u5e38\u7528\u7684\u6570\u5b57\u7b26\u53f7\u7ea6\u5b9a\u76f8\u53cd\u3002\u5f53\u504f\u5dee\u4e3a \\(2^{k\u22121}\\) \u6216 \\(2^{k\u22121} \u2212 1\\) \u65f6\uff0c\u8868\u793a\u7684\u6574\u6570\u8303\u56f4\u51e0\u4e4e\u662f\u5bf9\u79f0\u7684\u3002</p> <p></p> <p>\u56fe 2.3 \u504f\u7f6e\u4e3a 8 \u7684 4 \u4f4d\u504f\u7f6e\u6574\u6570\u8868\u793a\u7cfb\u7edf\u3002</p> <p>Biased representation does not lend itself to simple arithmetic algorithms. Addition and subtraction become somewhat more complicated because one must subtract or add the bias from/to the result of a normal add/subtract operation, since</p> <p>\u504f\u7f6e\u8868\u793a\u4e0d\u9002\u5408\u7b80\u5355\u7684\u7b97\u672f\u7b97\u6cd5\u3002\u52a0\u6cd5\u548c\u51cf\u6cd5\u53d8\u5f97\u66f4\u52a0\u590d\u6742\uff0c\u56e0\u4e3a\u5fc5\u987b\u4ece\u6b63\u5e38\u52a0/\u51cf\u8fd0\u7b97\u7684\u7ed3\u679c\u4e2d\u51cf\u53bb\u6216\u6dfb\u52a0\u504f\u5dee\uff0c\u56e0\u4e3a</p> \\[ \\begin{array}{l} x + y + bias = (x + bias) + (y + bias) \u2212 bias \\\\ x \u2212 y + bias = (x + bias) \u2212 (y + bias) + bias \\end{array} \\] <p>With  k-bit numbers and a bias of 2 k\u22121, adding or subtracting the bias amounts to complementing the leftmost bit. Thus, the extra complexity in addition or subtraction is negligible. </p> <p>\u4f46\u5982\u679c\u5bf9\u4e8e k \u4f4d\u6570\u5b57\u662f\\(2^{k\u22121}\\) \u7684\u504f\u5dee\uff0c\u6dfb\u52a0\u6216\u51cf\u53bb\u504f\u5dee\u76f8\u5f53\u4e8e\u5bf9\u6700\u5de6\u8fb9\u7684\u4f4d\u6c42\u8865\u3002\u56e0\u6b64\uff0c\u52a0\u6cd5\u6216\u51cf\u6cd5\u7684\u989d\u5916\u590d\u6742\u6027\u53ef\u4ee5\u5ffd\u7565\u4e0d\u8ba1\u3002</p> <p>Multiplication and division become significantly more difficult if these operations are to be performed directly on biased numbers. For this reason, the practical use of biased representation is limited to the exponent parts of floating-point numbers, which are never multiplied or divided. </p> <p>\u5982\u679c\u76f4\u63a5\u5bf9\u6709\u504f\u5dee\u7684\u6570\u6267\u884c\u4e58\u6cd5\u548c\u9664\u6cd5\uff0c\u8fd9\u4e9b\u8fd0\u7b97\u5c31\u4f1a\u53d8\u5f97\u66f4\u52a0\u56f0\u96be\u3002\u56e0\u6b64\uff0c\u504f\u7f6e\u8868\u793a\u7684\u5b9e\u9645\u4f7f\u7528\u4ec5\u9650\u4e8e\u6d6e\u70b9\u6570\u7684\u6307\u6570\u90e8\u5206\uff0c\u8fd9\u4e9b\u90e8\u5206\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u4e58\u6cd5\u6216\u9664\u6cd5\u3002</p>"},{"location":"Part_01/02/#23","title":"2.3 \u8865\u7801\u8868\u793a","text":"<p>In a complement number representation system, a suitably large complementation constant  M  is selected and the negative value \u2212 x  is represented as the unsigned value  M \u2212  x.  Figure 2.4 depicts the encodings used for positive and negative values and the arbitrary boundary between the two regions. </p> <p>\u5728\u8865\u6570\u8868\u793a\u7cfb\u7edf\u4e2d\uff0c\u9009\u62e9\u9002\u5f53\u5927\u7684\u8865\u5e38\u6570M\uff0c\u5e76\u5c06\u8d1f\u503c-x\u8868\u793a\u4e3a\u65e0\u7b26\u53f7\u503c\\(M-x\\)\u3002</p> <p>\u56fe 2.4 \u63cf\u8ff0\u4e86\u7528\u4e8e\u6b63\u503c\u548c\u8d1f\u503c\u7684\u7f16\u7801\u4ee5\u53ca\u4e24\u4e2a\u533a\u57df\u4e4b\u95f4\u7684\u4efb\u610f\u8fb9\u754c\u3002</p> <p></p> <p>To represent integers in the range [\u2212 N , + P] unambiguously, the complementation constant  M  must satisfy  M \u2265  N + P +1. This is justified by noting that to prevent overlap between the representations of positive and negative values in Figure 2.4, we must have M \u2212  N &gt; P. The choice of  M =  N +  P + 1 yields maximum coding efficiency, since no code will go to waste. </p> <p>\u4e3a\u4e86\u660e\u786e\u5730\u8868\u793a \\([\u2212N , +P]\\) \u8303\u56f4\u5185\u7684\u6574\u6570\uff0c\u8865\u7801\u5e38\u6570 M \u5fc5\u987b\u6ee1\u8db3 \\(M \\ge N + P +1\\)\u3002\u8fd9\u662f\u5408\u7406\u7684\uff0c\u6ce8\u610f\u5230\u4e3a\u4e86\u9632\u6b62\u56fe 2.4 \u4e2d\u6b63\u503c\u548c\u8d1f\u503c\u7684\u8868\u793a\u4e4b\u95f4\u7684\u91cd\u53e0\uff0c\u6211\u4eec\u5fc5\u987b\u6709 \\(M \u2212 N \\gt P\\)\u3002\u9009\u62e9 \\(M = N + P + 1\\) \u53ef\u4ee5\u4ea7\u751f\u6700\u5927\u7684\u7f16\u7801\u6548\u7387\uff0c\u56e0\u4e3a\u4e0d\u4f1a\u6d6a\u8d39\u4efb\u4f55\u4ee3\u7801\u3002</p> <p></p> <p>\u8868 2.1 \u8865\u7801\u7cfb\u7edf\u4e2d\u7684\u52a0\u6cd5\uff0c\u4f7f\u7528\u4e92\u8865\u5e38\u6570M \u548c\u8303\u56f4 \\([\u2212N, +P]\\)</p> \u671f\u671b\u7684\u64cd\u4f5c \u6a21M\u524d\u8ba1\u7b97 \u6ca1\u6709\u4e0a\u6ea2\u7684\u6b63\u786e\u7ed3\u679c \u4e0a\u6ea2\u51fa\u6761\u4ef6 \\((+x)+(+y)\\) \\(x+y\\) \\(x+y\\) \\(x+y \\gt P\\) \\((+x)+(-y)\\) \\(x+(M-y)\\) \u5982\u679c\\(y\\le x\\), \u5f97\u5230\\(x-y\\) \u4e0d\u4f1a \u5982\u679c\\(y\\gt x\\), \u5f97\u5230\\(M-(y-x)\\) \\((-x)+(+y)\\) \\((M-x)+y\\) \u5982\u679c\\(x\\le y\\), \u5f97\u5230\\(y-x\\) \u4e0d\u4f1a \u5982\u679c\\(x\\gt y\\), \u5f97\u5230\\(M-(x-y)\\) \\((-x)+(-y)\\) \\((M-x)+(M-y)\\) \\(M-(x+y)\\) \\(x+y \\gt N\\) <p>In a complement system with the complementation constant  M  and the number representation range [\u2212 N , + P], addition is done by adding the respective unsigned representations (modulo  M). The addition process is thus always the same, independent of the number signs. This is easily understood if we note that in modulo- M  arithmetic adding  M \u2212 1 is the same as subtracting 1. Table 2.1 shows the addition rules for complement representations, along with conditions that lead to overflow. </p> <p>\u5728\u5177\u6709\u8865\u7801\u5e38\u6570 M \u548c\u6570\u5b57\u8868\u793a\u8303\u56f4 [\u2212 N , + P] \u7684\u8865\u7801\u7cfb\u7edf\u4e2d\uff0c\u52a0\u6cd5\u662f\u901a\u8fc7\u5c06\u5404\u4e2a\u65e0\u7b26\u53f7\u8868\u793a\u76f8\u52a0\uff08\u6a21 M\uff09\u6765\u5b8c\u6210\u7684\u3002\u56e0\u6b64\uff0c\u52a0\u6cd5\u8fc7\u7a0b\u603b\u662f\u76f8\u540c\u7684\uff0c\u4e0e\u6570\u5b57\u7b26\u53f7\u65e0\u5173\u3002\u5982\u679c\u6211\u4eec\u6ce8\u610f\u5230\u5728\u6a21 M \u7b97\u672f\u4e2d\u52a0 M \u2212 1 \u4e0e\u51cf 1 \u76f8\u540c\uff0c\u90a3\u4e48\u8fd9\u5f88\u5bb9\u6613\u7406\u89e3\u3002\u8868 2.1 \u663e\u793a\u4e86\u8865\u7801\u8868\u793a\u7684\u52a0\u6cd5\u89c4\u5219\uff0c\u4ee5\u53ca\u5bfc\u81f4\u6ea2\u51fa\u7684\u6761\u4ef6\u3002</p> <p>Subtraction can be performed by complementing the subtrahend and then performing addition. Thus, assuming that a selective complementer is available, addition and subtraction become essentially the same operation, and this is the primary advantage of complement representations. </p> <p>\u51cf\u6cd5\u53ef\u4ee5\u901a\u8fc7\u5bf9\u51cf\u6570\u6c42\u8865\u6765\u8fdb\u884c\uff0c\u7136\u540e\u6267\u884c\u52a0\u6cd5\u3002\u56e0\u6b64\uff0c\u5047\u8bbe\u6709\u9009\u62e9\u6027\u8865\u7801\u5668\u53ef\u7528\uff0c\u52a0\u6cd5\u548c\u51cf\u6cd5\u672c\u8d28\u4e0a\u53d8\u6210\u76f8\u540c\u7684\u8fd0\u7b97\uff0c\u8fd9\u662f\u8865\u7801\u8868\u793a\u7684\u4e3b\u8981\u4f18\u70b9\u3002</p> <p>Complement representation can be used for fixed-point numbers that have a fractional part. The only difference is that consecutive values in the circular representation of Fig. 2.4 will be separated by  ulp  instead of by 1. As a decimal example, given the complementation constant  M = 12.000 and a fixed-point number range of [\u22126.000, +5.999], the fixed-point number \u22123.258 has the complement representation 12.000 \u22123.258 = 8.742. </p> <p>\u8865\u7801\u8868\u793a\u53ef\u7528\u4e8e\u5177\u6709\u5c0f\u6570\u90e8\u5206\u7684\u5b9a\u70b9\u6570\u3002\u552f\u4e00\u7684\u533a\u522b\u662f\u56fe 1 \u7684\u5706\u5f62\u8868\u793a\u4e2d\u7684\u8fde\u7eed\u503c\u3002\u56fe2.4 \u5c06\u7528 ulp \u800c\u4e0d\u662f\u7528 1 \u5206\u9694\u3002\u4f5c\u4e3a\u5341\u8fdb\u5236\u793a\u4f8b\uff0c\u7ed9\u5b9a\u8865\u7801\u5e38\u6570 M = 12.000 \u548c\u5b9a\u70b9\u6570\u8303\u56f4 [\u22126.000, +5.999]\uff0c\u5b9a\u70b9\u6570 \u22123.258 \u7684\u8865\u7801\u8868\u793a\u5f62\u5f0f\u4e3a 12.000 \u22123.258 = 8.742\u3002</p> <p>We note that two auxiliary operations are required for complement representations to be effective: complementation or change of sign (computing  M \u2212  x) and computations of residues mod  M. If finding  M \u2212  x  requires subtraction and finding residues mod  M implies division, then complement representation becomes quite inefficient. Thus M must be selected such that these two operations are simplified. Two choices allow just this for fixed-point radix- r arithmetic with k whole digits and l fractional digits: Radix complement</p> <p>\u6211\u4eec\u6ce8\u610f\u5230\uff0c\u8981\u4f7f\u8865\u7801\u8868\u793a\u6709\u6548\uff0c\u9700\u8981\u4e24\u4e2a\u8f85\u52a9\u64cd\u4f5c\uff1a\u8865\u7801\u6216\u7b26\u53f7\u66f4\u6539\uff08\u8ba1\u7b97 M \u2212 x\uff09\u4ee5\u53ca\u6b8b\u6570 mod M \u7684\u8ba1\u7b97\u3002 \u5982\u679c\u627e\u5230 M \u2212 x \u9700\u8981\u51cf\u6cd5\uff0c\u800c\u627e\u5230 mod M \u4f59\u6570\u610f\u5473\u7740\u9664\u6cd5\uff0c\u90a3\u4e48\u8865\u7801\u8868\u793a\u53d8\u5f97\u975e\u5e38\u4f4e\u6548\u3002 \u56e0\u6b64\uff0c\u5fc5\u987b\u9009\u62e9*M*\u4ee5\u7b80\u5316\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u3002 \u5bf9\u4e8e\u5e26\u6709 k \u6574\u6570\u4f4d\u548c l \u5c0f\u6570\u4f4d\u7684\u5b9a\u70b9\u57fa\u6570 r \u7b97\u672f\uff0c\u6709\u4e24\u79cd\u9009\u62e9\uff1a </p> <ul> <li>\u57fa\u6570\u8865\u7801Radix complement \\(M=r^k\\)</li> <li>\u6570\u5b57\u6216\u51cf\u57fa\u6570\u8865\u7801 Digit or diminished-radix complement \\(M=r^k-ulp\\)</li> </ul> <p>For radix-complement representations, modulo- M reduction is done by ignoring the carry-out from digit position k \u22121 in a (k+ l)-digit radix- r addition. For digit-complement representations, computing the complement of x (i.e., M \u2212 x), is done by simply replacing each nonzero digit xi by r \u2212 1 \u2212 xi. This is particularly easy if r is a power of 2.</p> <p>\u5bf9\u4e8e\u57fa\u6570\u8865\u7801\u8868\u793a\uff0c\u6a21 M \u5f52\u7ea6\u662f\u901a\u8fc7\u5ffd\u7565 (k+l) \u4f4d\u57fa\u6570 r \u52a0\u6cd5\u4e2d\u7684\u6570\u5b57\u4f4d\u7f6e k -1 \u7684\u8fdb\u4f4d\u6765\u5b8c\u6210\u7684\u3002\u5bf9\u4e8e\u6570\u5b57\u8865\u7801\u8868\u793a\uff0c\u8ba1\u7b97 x \u7684\u8865\u7801\uff08\u5373 M \u2212 x\uff09\u662f\u901a\u8fc7\u7b80\u5355\u5730\u5c06\u6bcf\u4e2a\u975e\u96f6\u6570\u5b57 xi \u66ff\u6362\u4e3a r \u2212 1 \u2212 xi \u6765\u5b8c\u6210\u7684\u3002\u5982\u679c r \u662f 2 \u7684\u5e42\uff0c\u8fd9\u5c24\u5176\u5bb9\u6613\u3002</p> <p>Complementation with M = rk and mod- M reduction with M = rk \u2212 ulp are similarly simple. You should be able to supply the details for radix r after reading Section 2.4, which deals with the important special case of r = 2.</p> <p>M = rk \u7684\u4e92\u8865\u548c M = rk \u2212 ulp \u7684 mod-M \u7ea6\u7b80\u4e5f\u540c\u6837\u7b80\u5355\u3002\u9605\u8bfb\u7b2c 2.4 \u8282\u540e\uff0c\u60a8\u5e94\u8be5\u80fd\u591f\u63d0\u4f9b\u57fa\u6570 r \u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u8be5\u8282\u6d89\u53ca r = 2 \u7684\u91cd\u8981\u7279\u6b8a\u60c5\u51b5\u3002</p>"},{"location":"Part_01/02/#24-2s-1s","title":"2.4 2\u2019S \u548c1\u2019S \u8865\u7801\u6570","text":"<p>2\u2019S- AND 1\u2019S-COMPLEMENT NUMBERS</p> <p>In the special case of r = 2, the radix complement representation that corresponds to M = 2 k is known as 2\u2019s complement. Figure 2.5 shows the 4-bit, 2\u2019s-complement integer system (k = 4, l = 0, M = 2^4 = 16 ) and the meanings of the 16 representations allowed with 4 bits. The boundary between positive and negative values is drawn approximately in the middle to make the range roughly symmetric and to allow simple sign detection (the leftmost bit is the sign).</p> <p>\u5728 r = 2 \u7684\u7279\u6b8a\u60c5\u51b5\u4e0b\uff0c\u5bf9\u5e94\u4e8e \\(M = 2^k\\) \u7684\u57fa\u6570\u8865\u7801\u8868\u793a\u5f62\u5f0f\u79f0\u4e3a**\u4e8c\u8fdb\u5236\u8865\u7801**\u3002\u56fe 2.5 \u663e\u793a\u4e86 4 \u4f4d 2 \u8865\u7801\u6574\u6570\u7cfb\u7edf\uff08\\(k = 4\uff0cl = 0\uff0cM = 2^4 = 16\\)\uff09\u4ee5\u53ca 4 \u4f4d\u5141\u8bb8\u7684 16 \u79cd\u8868\u793a\u7684\u542b\u4e49\u3002\u6b63\u503c\u548c\u8d1f\u503c\u4e4b\u95f4\u7684\u8fb9\u754c\u5927\u7ea6\u7ed8\u5236\u5728\u4e2d\u95f4\uff0c\u4ee5\u4f7f\u8303\u56f4\u5927\u81f4\u5bf9\u79f0\u5e76\u5141\u8bb8\u7b80\u5355\u7684\u7b26\u53f7\u68c0\u6d4b\uff08\u6700\u5de6\u8fb9\u7684\u4f4d\u662f\u7b26\u53f7\uff09\u3002</p> <p></p> <p>The 2\u2019s complement of a number  x  can be found via bitwise complementation of  x and the addition of  ulp:</p> <p>\u6570\u5b57 x \u7684 2 \u8865\u7801\u53ef\u4ee5\u901a\u8fc7 x \u7684\u6309\u4f4d\u6c42\u8865\u548c ulp \u7684\u52a0\u6cd5\u6c42\u51fa\uff1a</p> \\[ 2^k \u2212 x = [ ( 2^k \u2212 ulp) \u2212 x] + ulp = x^{compl} + ulp \\] <p>Note that the binary representation of 2 k \u2212  ulp  consists of all 1s, making  ( 2 k \u2212  ulp) \u2212  x equivalent to the bitwise complement of  x, denoted as  x compl. Whereas finding the bitwise complement of  x  is easy, adding  ulp  to the result is a slow process, since in the worst case it involves full carry propagation. We will see later how this addition of  ulp  can usually be avoided. </p> <p>\u6ce8\u610f\\(2^k \u2212 ulp\\) \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u5f62\u5f0f\u5168\u4e3a 1\uff0c\u4f7f\u5f97 \\((2^k \u2212 ulp) \u2212 x\\) \u7b49\u4ef7\u4e8e x \u7684\u6309\u4f4d\u8865\u7801\uff0c\u8868\u793a\u4e3a \\(x^{compl}\\)\u3002\u867d\u7136\u627e\u5230 x \u7684\u6309\u4f4d\u8865\u7801\u5f88\u5bb9\u6613\uff0c\u4f46\u5c06 ulp \u6dfb\u52a0\u5230\u7ed3\u679c\u4e2d\u662f\u4e00\u4e2a\u7f13\u6162\u7684\u8fc7\u7a0b\uff0c\u56e0\u4e3a\u5728\u6700\u574f\u7684\u60c5\u51b5\u4e0b\u5b83\u6d89\u53ca\u5b8c\u5168\u8fdb\u4f4d\u4f20\u64ad\u3002\u7a0d\u540e\u6211\u4eec\u5c06\u770b\u5230\u901a\u5e38\u5982\u4f55\u907f\u514d\u505a\u52a0 ulp\u3002</p> <p>To add numbers modulo 2 k , we simply drop a carry-out of 1 produced by position k \u2212 1. Since this carry is worth 2 k  units, dropping it is equivalent to reducing the magnitude of the result by 2 k . </p> <p>\u4e3a\u4e86\u5bf9\u6a21 \\(2^k\\) \u8fdb\u884c\u52a0\u6cd5\uff0c\u6211\u4eec\u53ea\u9700\u5220\u9664\u4f4d\u7f6e \\(k \u2212 1\\) \u751f\u6210\u7684 \\(1\\) \u8fdb\u4f4d\u5373\u53ef\u3002\u7531\u4e8e\u8be5\u8fdb\u4f4d\u503c\u662f \\(2^k\\) \u5355\u4f4d\uff0c\u56e0\u6b64\u5220\u9664\u5b83\u76f8\u5f53\u4e8e\u5c06\u7ed3\u679c\u7684\u5927\u5c0f\u51cf\u5c11 \\(2^k\\) \u3002</p> <p>The range of representable numbers in a 2\u2019s-complement number system with  k whole bits is from \u2212 2 k\u22121 to 2 k\u22121 \u2212  ulp</p> <p>k \u4e2a\u6574\u6570\u4f4d\u7684 2 \u8865\u6570\u7cfb\u7edf\u4e2d\u53ef\u8868\u793a\u7684\u6570\u5b57\u8303\u56f4\u4e3a\uff1a\u4ece\\(\u2212 2^{k\u22121}\\) \u81f3 \\(2^{k\u22121} \u2212 ulp\\)</p> <p>Because of this slightly asymmetric range, complementation can lead to overflow! Thus, if complementation is done as a separate sign change operation, it must include overflow detection. However, we will see later that complementation needed to convert subtraction into addition requires no special provision. </p> <p>\u7531\u4e8e\u8fd9\u4e2a\u8303\u56f4\u7a0d\u5fae\u4e0d\u5bf9\u79f0\uff0c\u6c42\u8865\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6ea2\u51fa\uff01\u56e0\u6b64\uff0c\u5982\u679c\u8865\u7801\u4f5c\u4e3a\u5355\u72ec\u7684\u7b26\u53f7\u66f4\u6539\u64cd\u4f5c\u5b8c\u6210\uff0c\u5219\u5b83\u5fc5\u987b\u5305\u62ec\u6ea2\u51fa\u68c0\u6d4b\u3002\u7136\u800c\uff0c\u6211\u4eec\u7a0d\u540e\u4f1a\u770b\u5230\uff0c\u5c06\u51cf\u6cd5\u8f6c\u6362\u4e3a\u52a0\u6cd5\u6240\u9700\u7684\u8865\u6570\u4e0d\u9700\u8981\u7279\u6b8a\u89c4\u5b9a\u3002</p> <p>The name \u201c2\u2019s complement\u201d actually comes from the special case of  k = 1 that leads to the complementation constant  M = 2. In this case, represented numbers have 1 whole bit, which acts as the sign, and  l  fractional bits. Thus, fractional values in the range [\u22121, 1 \u2212  ulp] are represented in such a fractional 2\u2019s-complement number system. Figure 2.5 can be readily modified to represent this number system by simply inserting a radix point after the leading digit for numbers outside the circle (turning them into 0.000, 0.001, and so on) and replacing each value  x  inside the circle with  x/ 8 (0, 0.125, 0.25, and so on). </p> <p>\u201c2 \u7684\u8865\u7801\u201d\u8fd9\u4e2a\u540d\u79f0\u5b9e\u9645\u4e0a\u6765\u81ea k = 1 \u7684\u7279\u6b8a\u60c5\u51b5\uff0c\u5b83\u5bfc\u81f4\u8865\u7801\u5e38\u6570 \\(M = 2\\)\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8868\u793a\u7684\u6570\u5b57\u6709 1 \u4e2a\u6574\u6570\u4f4d\uff08\u5145\u5f53\u7b26\u53f7\uff09\u548c \\(l\\) \u4e2a\u5c0f\u6570\u4f4d\u3002\u56e0\u6b64\uff0c\\([\u22121, 1\u2212ulp]\\) \u8303\u56f4\u5185\u7684\u5c0f\u6570\u503c\u4ee5\u8fd9\u6837\u7684\u5c0f\u6570 2 \u8865\u7801\u6570\u5b57\u7cfb\u7edf\u8868\u793a\u3002\u56fe 2.5 \u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u4fee\u6539\u6765\u8868\u793a\u8fd9\u4e2a\u6570\u5b57\u7cfb\u7edf\uff0c\u53ea\u9700\u5728\u5706\u5916\u6570\u5b57\u7684\u524d\u5bfc\u6570\u5b57\u540e\u9762\u63d2\u5165\u4e00\u4e2a\u5c0f\u6570\u70b9\uff08\u5c06\u5b83\u4eec\u53d8\u6210 0.000\u30010.001 \u7b49\uff09\uff0c\u5e76\u5c06\u5706\u5185\u7684\u6bcf\u4e2a\u503c x \u66ff\u6362\u4e3a x/ 8\uff080\u30010.125\u30010.25 \u7b49\uff09\u3002</p> <p>The digit or diminished-radix complement representation is known as  1\u2019s complement in the special case of  r = 2. The complementation constant in this case is  M = 2 k \u2212  ulp. For example, Fig. 2.6 shows the 4-bit, 1\u2019s-complement integer system ( k = 4,  l = 0,  M = 24 \u2212 1 = 15) and the meanings of the 16 representations allowed with 4 bits. The boundary between positive and negative values is again drawn approximately in the middle to make the range symmetric and to allow simple sign detection (the leftmost bit is the sign). </p> <p>\u5728 r = 2 \u7684\u7279\u6b8a\u60c5\u51b5\u4e0b\uff0c\u6570\u5b57\u6216\u51cf\u57fa\u8865\u7801\u8868\u793a\u5f62\u5f0f\u79f0\u4e3a 1 \u7684\u8865\u7801\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\u7684\u8865\u7801\u5e38\u6570\u4e3a \\(M = 2^k \u2212 ulp\\)\u3002\u4f8b\u5982\uff0c\u56fe 2.6 \u663e\u793a\u4e86 4 \u4f4d\u30011 \u7684\u8865\u7801\u6574\u6570\u7cfb\u7edf \\(( k = 4, l = 0, M = 2^4 \u2212 1 = 15)\\) \u4ee5\u53ca 4 \u4f4d\u5141\u8bb8\u7684 16 \u79cd\u8868\u793a\u7684\u542b\u4e49\u3002\u6b63\u503c\u548c\u8d1f\u503c\u4e4b\u95f4\u7684\u8fb9\u754c\u518d\u6b21\u5927\u7ea6\u5728\u4e2d\u95f4\u7ed8\u5236\uff0c\u4ee5\u4f7f\u8303\u56f4\u5bf9\u79f0\u5e76\u5141\u8bb8\u7b80\u5355\u7684\u7b26\u53f7\u68c0\u6d4b\uff08\u6700\u5de6\u8fb9\u7684\u4f4d\u662f\u7b26\u53f7\uff09\u3002</p> <p></p> <p>Note that compared with the 2\u2019s-complement representation of Fig. 2.5, the representation for \u22128 has been eliminated and instead an alternate code has been assigned to 0 (technically, \u22120). This may somewhat complicate 0 detection in that both the all-0s and the all-1s patterns represent 0. The arithmetic circuits can be designed such that the all-1s pattern is detected and automatically converted to the all-0s pattern. Keeping \u22120 intact does not cause problems in computations, however, since all computations are modulo 15. For example, adding +1 (0001) to \u22120 (1111) will yield the correct result of +1 (0001) when the addition is done modulo 15. </p> <p>\u8bf7\u6ce8\u610f\uff0c\u4e0e\u56fe 2.5 \u7684 2 \u8865\u7801\u8868\u793a\u76f8\u6bd4\uff0c-8 \u7684\u8868\u793a\u5df2\u88ab\u6d88\u9664\uff0c\u800c\u662f\u5c06\u66ff\u4ee3\u4ee3\u7801\u5206\u914d\u7ed9 0\uff08\u6280\u672f\u4e0a\u4e3a -0\uff09\u3002\u8fd9\u53ef\u80fd\u4f1a\u4f7f 0 \u68c0\u6d4b\u53d8\u5f97\u6709\u4e9b\u590d\u6742\uff0c\u56e0\u4e3a\u5168 0 \u548c\u5168 1 \u6a21\u5f0f\u90fd\u8868\u793a 0\u3002\u7b97\u672f\u7535\u8def\u53ef\u4ee5\u8bbe\u8ba1\u4e3a\u68c0\u6d4b\u5168 1 \u6a21\u5f0f\u5e76\u81ea\u52a8\u8f6c\u6362\u4e3a\u5168 0 \u6a21\u5f0f\u3002\u4fdd\u6301-0\u4e0d\u53d8\u4e0d\u4f1a\u5bfc\u81f4\u8ba1\u7b97\u51fa\u73b0\u95ee\u9898\uff0c\u56e0\u4e3a\u6240\u6709\u8ba1\u7b97\u90fd\u662f\u6a21 15\u3002\u4f8b\u5982\uff0c\u5c06 +1 (0001) \u6dfb\u52a0\u5230 -0 (1111) \u5c06\u4ea7\u751f\u6b63\u786e\u7684\u7ed3\u679c+1 (0001)\uff0c \u56e0\u4e3a\u52a0\u6cd5\u6700\u540e\u4ee5 15 \u53d6\u6a21\u3002</p> <p>The 1\u2019s complement of a number  x  can be found by bitwise complementation: ( 2^k \u2212  ulp) \u2212  x =  x compl</p> <p>\u6570\u5b57 x \u7684 1 \u8865\u7801\u53ef\u4ee5\u901a\u8fc7\u6309\u4f4d\u8865\u6c42\u51fa\uff1a$ (2^k \u2212 ulp) \u2212 x = x^{compl}$</p> <p>To add numbers modulo \\(2^k \u2212 ulp\\), we simply drop a carry-out of 1 produced by position k \u2212 1 and simultaneously insert a carry-in of 1 into position \\(\u2212 l\\). Since the dropped carry is worth 2 k  units and the inserted carry is worth  ulp, the combined effect is to reduce the magnitude of the result by \\(2^k \u2212 ulp\\). In terms of hardware, the carry-out of our ( k +  l)-bit adder should be directly connected to its carry-in; this is known as  end-around carry. </p> <p>\u4e3a\u4e86\u5bf9\u6a21 \\(2^k \u2212 ulp\\) \u8fdb\u884c\u52a0\u6cd5\uff0c\u6211\u4eec\u53ea\u9700\u5220\u9664\u4f4d\u7f6e \\(k \u2212 1\\) \u4ea7\u751f\u7684 1 \u7684\u8fdb\u4f4d\u8f93\u51fa\uff0c\u540c\u65f6\u5c06 1 \u7684\u8fdb\u4f4d\u63d2\u5165\u5230\u4f4d\u7f6e \\(\u2212l\\)\u4e2d\u3002\u7531\u4e8e\u4e22\u5f03\u7684\u8fdb\u4f4d\u503c\u4e3a \\(2^k\\)\u4e2a\u5355\u4f4d\uff0c\u800c\u63d2\u5165\u7684\u8fdb\u4f4d\u4ef7\u503c\u4e3a \\(ulp\\)\uff0c\u56e0\u6b64\u7efc\u5408\u6548\u679c\u662f\u5c06\u7ed3\u679c\u7684\u5927\u5c0f\u51cf\u5c11 \\(2^k \u2212 ulp\\)\u3002\u5728\u786c\u4ef6\u65b9\u9762\uff0c\u6211\u4eec\u7684\uff08\\(k+l\\)\uff09\u4f4d\u52a0\u6cd5\u5668\u7684\u8fdb\u4f4d\u8f93\u51fa\u5e94\u8be5\u76f4\u63a5\u8fde\u63a5\u5230\u5b83\u7684\u8fdb\u4f4d\u8f93\u5165\uff1b\u8fd9\u5c31\u662f\u6240\u8c13\u7684*\u672b\u7aef\u5faa\u73af\u8fdb\u4f4d*\u3002</p> <p>The foregoing scheme properly handles any sum that equals or exceeds 2 k . When the sum is 2 k \u2212  ulp, however, the carry-out will be zero and modular reduction is not accomplished. As suggested earlier, such an all-1s result can be interpreted as an alternate representation of 0 that is either kept intact (making 0 detection more difficult) or is automatically converted by hardware to +0. </p> <p>\u4e0a\u8ff0\u65b9\u6848\u6b63\u786e\u5730\u5904\u7406\u7b49\u4e8e\u6216\u8d85\u8fc72 k \u7684\u4efb\u4f55\u603b\u548c\u3002\u7136\u800c\uff0c\u5f53\u603b\u548c\u4e3a \\(2^k \u2212 ulp\\) \u65f6\uff0c\u8fdb\u4f4d\u5c06\u4e3a\u96f6\uff0c\u5e76\u4e14\u672a\u5b8c\u6210\u6a21\u7ea6\u7b80\u3002\u5982\u524d\u6240\u8ff0\uff0c\u8fd9\u6837\u7684\u5168 1 \u7ed3\u679c\u53ef\u4ee5\u89e3\u91ca\u4e3a 0 \u7684\u66ff\u4ee3\u8868\u793a\uff0c\u5b83\u8981\u4e48\u4fdd\u6301\u4e0d\u53d8\uff08\u4f7f 0 \u68c0\u6d4b\u66f4\u52a0\u56f0\u96be\uff09\uff0c\u8981\u4e48\u7531\u786c\u4ef6\u81ea\u52a8\u8f6c\u6362\u4e3a +0\u3002</p> <p>The range of representable numbers in a 1\u2019s-complement number system with  k whole bits is from \\(\u2212(2^{k\u22121} \u2212 ulp)\\) to \\(2^{k\u22121} \u2212 ulp\\) . This symmetric range is one of the advantages of 1\u2019s-complement number representation. </p> <p>k \u4e2a\u6574\u6570\u4f4d\u7684 1 \u8865\u6570\u7cfb\u7edf\u4e2d\u53ef\u8868\u793a\u7684\u6570\u5b57\u8303\u56f4\u4e3a\u4ece\\(\u2212(2^{k\u22121} \u2212 ulp)\\)\u5230\\(2^{k\u22121} \u2212 ulp\\)\u3002\u8fd9\u79cd\u5bf9\u79f0\u8303\u56f4\u662f 1 \u8865\u7801\u6570\u5b57\u8868\u793a\u7684\u4f18\u70b9\u4e4b\u4e00\u3002</p> <p>Table 2.2 presents a brief comparison of radix- and digit-complement number representation systems for radix  r. We might conclude from Table 2.2 that each of the two complement representation schemes has some advantages and disadvantages with respect to the other, making them equally desirable. However, since complementation is often performed for converting subtraction to addition, the addition of  ulp  required in the case of 2\u2019s-complement numbers can be accomplished by providing a carry-in of 1 into the least significant, or (\u2212 l)th, position of the adder. Figure 2.7 shows the required elements for a 2\u2019s-complement adder/subtractor. With the complementation disadvantage mitigated in this way, 2\u2019s-complement representation has become the favored choice in virtually all modern digital systems.</p> <p>\u8868 2.2 \u7b80\u8981\u6bd4\u8f83\u4e86\u57fa\u6570 r \u7684\u57fa\u6570\u548c\u6570\u5b57\u8865\u6570\u8868\u793a\u7cfb\u7edf\u3002\u6211\u4eec\u53ef\u4ee5\u4ece\u8868 2.2 \u4e2d\u5f97\u51fa\u7ed3\u8bba\uff0c\u4e24\u79cd\u8865\u7801\u8868\u793a\u65b9\u6848\u76f8\u5bf9\u4e8e\u53e6\u4e00\u79cd\u65b9\u6848\u90fd\u6709\u4e00\u4e9b\u4f18\u70b9\u548c\u7f3a\u70b9\uff0c\u56e0\u6b64\u5b83\u4eec\u540c\u6837\u503c\u5f97\u671f\u5f85\u3002\u7136\u800c\uff0c\u7531\u4e8e\u901a\u5e38\u6267\u884c\u8865\u7801\u6765\u5c06\u51cf\u6cd5\u8f6c\u6362\u4e3a\u52a0\u6cd5\uff0c\u56e0\u6b64\u5728 2 \u8865\u7801\u6570\u7684\u60c5\u51b5\u4e0b\u6240\u9700\u7684 ulp \u52a0\u6cd5\u53ef\u4ee5\u901a\u8fc7\u5411\u52a0\u6cd5\u5668\u7684\u6700\u4f4e\u6709\u6548\u4f4d\u7f6e\u6216\u7b2c \\((\u2212l)\\) \u4e2a\u4f4d\u7f6e\u63d0\u4f9b\u8fdb\u4f4d 1 \u6765\u5b8c\u6210\u3002\u56fe 2.7 \u663e\u793a\u4e86 2 \u8865\u7801\u52a0\u6cd5\u5668/\u51cf\u6cd5\u5668\u6240\u9700\u7684\u5143\u7d20\u3002\u52a3\u52bf\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u7f13\u89e3\uff0c2 \u7684\u8865\u7801\u8868\u793a\u5df2\u6210\u4e3a\u51e0\u4e4e\u6240\u6709\u73b0\u4ee3\u6570\u5b57\u7cfb\u7edf\u4e2d\u7684\u9996\u9009\u3002</p> \u7279\u5f81/\u7279\u6027 \u57fa\u6570\u8865\u7801 \u6570\u5b57\u8865\u7801 \u5bf9\u79f0\u6027\uff08P=N\uff1f\uff09 \u5bf9\u4e8e\u5947\u6570 r \u53ef\u80fd\uff08\u5b9e\u9645\u7528\u7684\u90fd\u662f\u5076\u6570\uff09 \u5bf9\u4e8e\u5947\u5076\u6570 r \u90fd\u662f \u72ec\u7279\u7684\u96f6\uff1f Yes No \u6c42\u8865 \u5bf9\u6240\u6709\u6570\u5b57\u6c42\u53cd\u5e76\u6dfb\u52a0 ulp \u5bf9\u6240\u6709\u6570\u5b57\u6c42\u8865 Mod-M \u52a0\u6cd5 \u4e22\u5f03\u8fdb\u4f4d\u8f93\u51fa \u672b\u7aef\u5faa\u73af\u8fdb\u4f4d <p></p> <p>Interestingly, the arrangement shown in Fig. 2.7 also removes the disadvantage of asymmetric range. If the operand  y  is \u22122 k\u22121, represented in 2\u2019s complement as 1 followed by all 0s, its complementation does not lead to overflow. This is because the 2\u2019s complement of  y  is essentially represented in two parts:  y compl, which represents 2 k\u22121 \u2212 1, and  cin  which represents 1. </p> <p>\u6709\u8da3\u7684\u662f\uff0c\u56fe2.7\u6240\u793a\u7684\u5b89\u6392\u4e5f\u6d88\u9664\u4e86\u4e0d\u5bf9\u79f0\u8303\u56f4\u8fd9\u4e2a\u7f3a\u70b9\u3002\u5982\u679c\u64cd\u4f5c\u6570 y \u4e3a \\(\u22122^{k\u22121}\\)\uff0c\u5219\u7528 2 \u7684\u8865\u7801\u8868\u793a\u4e3a 1\u540e\u9762\u51680\uff0c\u5176\u8865\u7801\u4e0d\u4f1a\u5bfc\u81f4\u6ea2\u51fa\u3002\u8fd9\u662f\u56e0\u4e3a y \u7684 2 \u8865\u7801\u672c\u8d28\u4e0a\u7531\u4e24\u90e8\u5206\u8868\u793a\uff1a\\(y^{compl}\\)\uff0c\u8868\u793a \\(2^{k\u22121} \u2212 1\\)\uff0c\\(c_{in}\\) \u8868\u793a 1\u3002</p> <p>Occasionally we need to extend the number of digits in an operand to make it of the same length as another operand. For example, if a 16-bit number is to be added to a 32-bit number, the former is first converted to 32-bit format, with the two 32-bit numbers then added using a 32-bit adder. Unsigned- or signed-magnitude fixed-point binary numbers can be extended from the left (whole part) or the right (fractional part) by simply padding them with 0s. This type of range or precision extension is only slightly more difficult for 2\u2019s- and 1\u2019s-complement numbers. </p> <p>\u6709\u65f6\u6211\u4eec\u9700\u8981\u6269\u5c55\u4e00\u4e2a\u64cd\u4f5c\u6570\u7684\u4f4d\u6570\uff0c\u4f7f\u5176\u4e0e\u53e6\u4e00\u4e2a\u64cd\u4f5c\u6570\u7684\u957f\u5ea6\u76f8\u540c\u3002\u4f8b\u5982\uff0c\u5982\u679c\u8981\u5c06 16 \u4f4d\u6570\u5b57\u4e0e 32 \u4f4d\u6570\u5b57\u76f8\u52a0\uff0c\u5219\u9996\u5148\u5c06 16 \u4f4d\u6570\u5b57\u8f6c\u6362\u4e3a 32 \u4f4d\u683c\u5f0f\uff0c\u7136\u540e\u4f7f\u7528 32 \u4f4d\u52a0\u6cd5\u5668\u5c06\u4e24\u4e2a 32 \u4f4d\u6570\u5b57\u76f8\u52a0\u3002\u65e0\u7b26\u53f7\u6216\u6709\u7b26\u53f7\u6570\u503c\u5b9a\u70b9\u4e8c\u8fdb\u5236\u6570\u53ef\u4ee5\u901a\u8fc7\u7b80\u5355\u5730\u7528 0 \u586b\u5145\u6765\u4ece\u5de6\u4fa7\uff08\u6574\u4e2a\u90e8\u5206\uff09\u6216\u53f3\u4fa7\uff08\u5c0f\u6570\u90e8\u5206\uff09\u8fdb\u884c\u6269\u5c55\u3002\u5bf9\u4e8e 2 \u548c 1 \u8865\u7801\u6570\u5b57\u6765\u8bf4\uff0c\u8fd9\u79cd\u7c7b\u578b\u7684\u8303\u56f4\u6216\u7cbe\u5ea6\u6269\u5c55\u53ea\u662f\u7a0d\u5fae\u56f0\u96be\u4e00\u4e9b\u3002</p> <p>Given a 2\u2019s-complement number\\(x_{k\u22121} x_{k\u22122} \u00b7 \u00b7 \u00b7 x_1 x_0 . x_{\u22121} x_{\u22122} \u00b7 \u00b7 \u00b7 x_{\u2212l}\\), extension can be achieved from the left by replicating the sign bit ( sign extension) and from the right by padding it with 0s. </p> <p>\u7ed9\u5b9a\u4e00\u4e2a 2 \u7684\u8865\u7801 \\(x_{k\u22121} x_{k\u22122} \u00b7 \u00b7 \u00b7 x_1 x_0 . x_{\u22121} x_{\u22122} \u00b7 \u00b7 \u00b7 x_{\u2212l}\\)\uff0c\u53ef\u4ee5\u901a\u8fc7\u590d\u5236\u7b26\u53f7\u4f4d\uff08\u7b26\u53f7\u6269\u5c55\uff09\u4ece\u5de6\u4fa7\u5b9e\u73b0\u6269\u5c55\uff0c\u5e76\u901a\u8fc7\u7528 0 \u586b\u5145\u4ece\u53f3\u4fa7\u5b9e\u73b0\u6269\u5c55\u3002</p> \\[ \\cdots x_{k\u22121} x_{k\u22121} x_{k\u22121} x_{k\u22121} x_{k\u22122} \u00b7 \u00b7 \u00b7 x_1 x_0 . x_{\u22121} x_{\u22122} \u00b7 \u00b7 \u00b7 x_{\u2212l} 000 \\cdots \\] <p>To justify the foregoing rule, note that when the number of whole (fractional) digits is increased from  k ( l) to  k ( l), the complementation constant increases from  M = 2 k  to  M  = 2 k. Hence, the difference of the two complementation constants</p> <p>\u4e3a\u4e86\u8bc1\u660e\u4e0a\u8ff0\u89c4\u5219\u7684\u5408\u7406\u6027\uff0c\u8bf7\u6ce8\u610f\uff0c\u5f53\u6574\u6570\uff08\u5c0f\u6570\uff09\u4f4d\u6570\u4ece \\(k ( l)\\) \u589e\u52a0\u5230 \\({k}' ({l}')\\) \u65f6\uff0c\u8865\u7801\u5e38\u6570\u4ece \\(M = 2^k\\) \u589e\u52a0\u5230\\({M}' = 2^{{k}'}\\)\u3002\u56e0\u6b64\uff0c\u4e24\u4e2a\u8865\u7801\u5e38\u6570\u7684\u5dee</p> \\[ {M}' \u2212 M = 2^{{k}'} \u2212 2^k = 2^k ( 2^{{k}'\u2212 k}  \u2212 1 ) \\] <p>must be added to the representation of any negative number. This difference is a binary integer consisting of  k \u2212  k  1s followed by  k  0s; hence the need for sign extension. </p> <p>\u5fc5\u987b\u6dfb\u52a0\u5230\u4efb\u4f55\u8d1f\u6570\u7684\u8868\u793a\u4e2d\u3002\u8be5\u5dee\u503c\u662f\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6574\u6570\uff0c\u7531 \\({k}' \u2212 k\\) \u4e2a 1 \u548c\u540e\u9762\u7684 k \u4e2a 0 \u7ec4\u6210\uff1b\u56e0\u6b64\u9700\u8981\u7b26\u53f7\u6269\u5c55\u3002</p> <p>A 1\u2019s-complement number must be sign-extended from both ends:</p> <p>1 \u7684\u8865\u7801\u6570\u5fc5\u987b\u4ece\u4e24\u7aef\u8fdb\u884c\u7b26\u53f7\u6269\u5c55\uff1a</p> \\[ \\cdots x_{k\u22121} x_{k\u22121} x_{k\u22121} x_{k\u22121} x_{k\u22122} \u00b7 \u00b7 \u00b7 x_1 x_0 . x_{\u22121} x_{\u22122} \u00b7 \u00b7 \u00b7 x_{\u2212l} x_{k\u22121} x_{k\u22121} x_{k\u22121}  \\cdots \\] <p>Justifying the rule above for 1\u2019s-complement numbers is left as an exercise. </p> <p>\u8bc1\u660e\u4e0a\u8ff0 1 \u8865\u7801\u89c4\u5219\u7684\u7559\u4f5c\u7ec3\u4e60\u3002</p> <p>An unsigned binary number can be multiplied or divided by 2^h  via an  h-bit left or right shift, essentially changing the location of the radix point within the original digit-vector.  To perform similar operations on 2\u2019s- and 1\u2019s-complement numbers, the operand must be first extended, so that the vacated positions on the right or left side of the fixed-width number after shifting receive the correct digit values. Put another way, in performing an h-bit right shift for dividing a number by 2^h, copies of the sign bit must be shifted in from the left. In the case of an  h-bit left shift to multiply an operand by 2^h, we need to shift in the sign bit for 1\u2019s complement and 0s for 2\u2019s complement. </p> <p>\u65e0\u7b26\u53f7\u4e8c\u8fdb\u5236\u6570\u53ef\u4ee5\u901a\u8fc7 h \u4f4d\u5de6\u79fb\u6216\u53f3\u79fb\u4e58\u4ee5\u6216\u9664\u4ee5 \\(2^h\\)\uff0c\u672c\u8d28\u4e0a\u6539\u53d8\u4e86\u539f\u59cb\u6570\u5b57\u5411\u91cf\u4e2d\u5c0f\u6570\u70b9\u7684\u4f4d\u7f6e\u3002\u8981\u5bf9 2 \u548c 1 \u8865\u7801\u8fdb\u884c\u7c7b\u4f3c\u7684\u64cd\u4f5c\uff0c\u5fc5\u987b\u5148\u6269\u5c55\u64cd\u4f5c\u6570\uff0c\u4ee5\u4fbf\u56fa\u5b9a\u5bbd\u5ea6\u6570\u5b57\u5728\u79fb\u4f4d\u540e\u53f3\u4fa7\u6216\u5de6\u4fa7\u7a7a\u51fa\u7684\u4f4d\u7f6e\u63a5\u6536\u5230\u6b63\u786e\u7684\u6570\u5b57\u503c\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5728\u6267\u884c h \u4f4d\u53f3\u79fb\u4ee5\u5c06\u6570\u5b57\u9664\u4ee5 \\(2^h\\) \u65f6\uff0c\u7b26\u53f7\u4f4d\u7684\u526f\u672c\u5fc5\u987b\u4ece\u5de6\u4fa7\u79fb\u5165\u3002\u5728 h \u4f4d\u5de6\u79fb\u5c06\u64cd\u4f5c\u6570\u4e58\u4ee5 \\(2^h\\) \u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u9700\u8981\u79fb\u5165 1 \u8865\u7801\u7684\u7b26\u53f7\u4f4d\u548c 2 \u8865\u7801\u7684 0\u3002</p>"},{"location":"Part_01/02/#25","title":"2.5 \u76f4\u63a5\u548c\u95f4\u63a5\u6709\u7b26\u53f7\u7b97\u672f","text":"<p>DIRECT AND INDIRECT SIGNED ARITHMETIC</p> <p>In the preceding pages, we dealt with the addition and subtraction of signed numbers for a variety of number representation schemes (signed-magnitude, biased, complement). In all these cases, signed numbers were handled directly by the addition/subtraction hardware ( direct signed arithmetic), consistent with our desire to avoid using separate addition and subtraction units. </p> <p>\u5728\u524d\u9762\u7684\u51e0\u9875\u4e2d\uff0c\u6211\u4eec\u8ba8\u8bba\u4e86\u5404\u79cd\u6570\u5b57\u8868\u793a\u65b9\u6848\uff08\u6709\u7b26\u53f7\u6570\u503c\u3001\u6709\u504f\u5dee\u3001\u8865\u7801\uff09\u7684\u6709\u7b26\u53f7\u6570\u7684\u52a0\u6cd5\u548c\u51cf\u6cd5\u3002\u5728\u6240\u6709\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5e26\u7b26\u53f7\u7684\u6570\u5b57\u90fd\u7531\u52a0\u6cd5/\u51cf\u6cd5\u786c\u4ef6\u76f4\u63a5\u5904\u7406\uff08\u76f4\u63a5\u5e26\u7b26\u53f7\u7b97\u672f\uff09\uff0c\u8fd9\u4e0e\u6211\u4eec\u907f\u514d\u4f7f\u7528\u5206\u5f00\u7684\u52a0\u6cd5\u548c\u51cf\u6cd5\u5355\u5143\u7684\u613f\u671b\u4e00\u81f4\u3002</p> <p>For some arithmetic operations, it may be desirable to restrict the hardware to unsigned operands, thus necessitating  indirect signed arithmetic. Basically, the operands are converted to unsigned values, a tentative result is obtained based on these unsigned values, and finally the necessary adjustments are made to find the result corresponding to the original signed operands. Figure 2.8 depicts the direct and indirect approaches to signed arithmetic. </p> <p>\u5bf9\u4e8e\u67d0\u4e9b\u7b97\u672f\u8fd0\u7b97\uff0c\u53ef\u80fd\u9700\u8981\u5c06\u786c\u4ef6\u9650\u5236\u4e3a\u65e0\u7b26\u53f7\u64cd\u4f5c\u6570\uff0c\u56e0\u6b64\u9700\u8981 \u95f4\u63a5\u6709\u7b26\u53f7\u7b97\u672f\u3002\u57fa\u672c\u4e0a\uff0c\u64cd\u4f5c\u6570\u88ab\u8f6c\u6362\u4e3a\u65e0\u7b26\u53f7\u503c\uff0c\u6839\u636e\u8fd9\u4e9b\u65e0\u7b26\u53f7\u503c\u83b7\u5f97\u6682\u5b9a\u7ed3\u679c\uff0c\u6700\u540e\u8fdb\u884c\u5fc5\u8981\u7684\u8c03\u6574\u4ee5\u627e\u5230\u4e0e\u539f\u59cb\u6709\u7b26\u53f7\u64cd\u4f5c\u6570\u76f8\u5bf9\u5e94\u7684\u7ed3\u679c\u3002\u56fe 2.8 \u63cf\u8ff0\u4e86\u6709\u7b26\u53f7\u7b97\u672f\u7684\u76f4\u63a5\u548c\u95f4\u63a5\u65b9\u6cd5\u3002</p> <p></p> <p>Indirect signed arithmetic can be performed, for example, for multiplication or division of signed numbers, although we will see in Parts III and IV that direct algorithms are also available for this purpose. The process is trivial for signed-magnitude numbers. If  x  and  y  are biased numbers, then both the sign removal and adjustment steps involve addition/subtraction. If  x  and  y  are complement numbers, these steps involve selective complementation. </p> <p>\u95f4\u63a5\u6709\u7b26\u53f7\u7b97\u672f\u53ef\u4ee5\u6267\u884c\uff0c\u4f8b\u5982\u6709\u7b26\u53f7\u6570\u7684\u4e58\u6cd5\u6216\u9664\u6cd5\uff0c\u5c3d\u7ba1\u6211\u4eec\u5c06\u5728\u7b2c\u4e09\u90e8\u5206\u548c\u7b2c\u56db\u90e8\u5206\u4e2d\u770b\u5230\u76f4\u63a5\u7b97\u6cd5\u4e5f\u53ef\u7528\u4e8e\u6b64\u76ee\u7684\u3002\u5bf9\u4e8e\u7b26\u53f7-\u5e45\u5ea6\u8868\u793a\u6765\u8bf4\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u5f88\u7b80\u5355\u3002\u5982\u679cx\u548cy\u662f\u504f\u7f6e\u6570\uff0c\u5219\u53bb\u9664\u7b26\u53f7\u548c\u8c03\u6574\u6b65\u9aa4\u90fd\u6d89\u53ca\u52a0\u6cd5/\u51cf\u6cd5\u3002\u5982\u679c x \u548c y \u662f\u8865\u7801\uff0c\u5219\u8fd9\u4e9b\u6b65\u9aa4\u6d89\u53ca\u9009\u62e9\u6027\u4e92\u8865\u3002</p> <p>This type of preprocessing for operands, and postprocessing for computation results, is useful not only for dealing with signed values but also in the case of unacceptable or inconvenient operand values. For example, in computing sin  x, the operand can be brought to within [0,  \u03c0/ 2] by taking advantage of identities such as sin (\u2212 x) = \u2212 sin  x  and sin ( 2 \u03c0 + x) = sin (\u03c0 \u2212 x) = sin  x. Chapter 22 contains examples of such transformations. </p> <p>\u8fd9\u79cd\u7c7b\u578b\u7684\u64cd\u4f5c\u6570\u9884\u5904\u7406\u548c\u8ba1\u7b97\u7ed3\u679c\u540e\u5904\u7406\u4e0d\u4ec5\u5bf9\u4e8e\u5904\u7406\u6709\u7b26\u53f7\u503c\u5f88\u6709\u7528\uff0c\u800c\u4e14\u5728\u5904\u7406\u4e0d\u53ef\u63a5\u53d7\u6216\u4e0d\u65b9\u4fbf\u7684\u64cd\u4f5c\u6570\u503c\u7684\u60c5\u51b5\u4e0b\u4e5f\u5f88\u6709\u7528\u3002\u4f8b\u5982\uff0c\u5728\u8ba1\u7b97 sin x \u65f6\uff0c\u53ef\u4ee5\u5229\u7528 \\(\\sin(\u2212 x) = \u2212\\sin x\\) \u548c \\(\\sin ( 2 \\pi + x) = \\sin (\\pi \u2212 x) = \\sin x\\) \u7b49\u6052\u7b49\u5f0f\u5c06\u64cd\u4f5c\u6570\u9650\u5236\u5728 [0, \u03c0/ 2] \u8303\u56f4\u5185\u3002\u7b2c 22 \u7ae0\u5305\u542b\u6b64\u7c7b\u8f6c\u6362\u7684\u793a\u4f8b\u3002</p> <p>As a second example, some division algorithms become more efficient when the divisor is in a certain range (e.g., close to 1). In this case, the dividend and divisor can be scaled by the same factor in a preprocessing step to bring the divisor within the desired range (see Section 15.1).</p> <p>\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u4f8b\u5b50\uff0c\u5f53\u9664\u6570\u5728\u4e00\u5b9a\u8303\u56f4\u5185\uff08\u4f8b\u5982\uff0c\u63a5\u8fd1 1\uff09\u65f6\uff0c\u67d0\u4e9b\u9664\u6cd5\u7b97\u6cd5\u4f1a\u53d8\u5f97\u66f4\u6709\u6548\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u88ab\u9664\u6570\u548c\u9664\u6570\u53ef\u4ee5\u5728\u9884\u5904\u7406\u6b65\u9aa4\u4e2d\u6309\u76f8\u540c\u7684\u56e0\u5b50\u7f29\u653e\uff0c\u4ee5\u4f7f\u9664\u6570\u5904\u4e8e\u6240\u9700\u7684\u8303\u56f4\u5185\uff08\u53c2\u89c1\u7b2c 15.1 \u8282\uff09\u3002</p>"},{"location":"Part_01/02/#26","title":"2.6 \u4f7f\u7528\u5e26\u7b26\u53f7\u4f4d\u7f6e\u6216\u5e26\u7b26\u53f7\u6570\u5b57","text":"<p>Using Signed Positions or Signed Digits</p> <p>The value of a 2\u2019s-complement number can be found by using the standard binary-to-decimal conversion process, except that the weight of the most significant bit (sign position) is taken to be negative. Figure 2.9 shows an example 8-bit, 2\u2019s-complement number converted to decimal by considering its sign bit to have the negative weight \u22122^7.</p> <p>2 \u7684\u8865\u7801\u6570\u7684\u503c\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u6807\u51c6\u4e8c\u8fdb\u5236\u5230\u5341\u8fdb\u5236\u7684\u8f6c\u6362\u8fc7\u7a0b\uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u6700\u9ad8\u6709\u6548\u4f4d\uff08\u7b26\u53f7\u4f4d\u7f6e\uff09\u7684\u6743\u91cd\u88ab\u53d6\u4e3a\u8d1f\u6570\u3002\u56fe 2.9 \u663e\u793a\u4e86\u4e00\u4e2a 8 \u4f4d 2 \u8865\u7801\u6570\u8f6c\u6362\u4e3a\u5341\u8fdb\u5236\u7684\u793a\u4f8b\uff0c\u8003\u8651\u5176\u7b26\u53f7\u4f4d\u5177\u6709\u8d1f\u6743\u91cd \u2212\\(2^7\\)\u3002</p> <p></p> <p>This very important property of 2\u2019s-complement systems is used to advantage in many algorithms that deal directly with signed numbers. The property is formally expressed as follows:</p> <p>2 \u8865\u7801\u7cfb\u7edf\u7684\u8fd9\u4e00\u975e\u5e38\u91cd\u8981\u7684\u5c5e\u6027\u5728\u8bb8\u591a\u76f4\u63a5\u5904\u7406\u6709\u7b26\u53f7\u6570\u7684\u7b97\u6cd5\u4e2d\u5f97\u5230\u4e86\u5229\u7528\u3002\u8be5\u5c5e\u6027\u6b63\u5f0f\u8868\u793a\u5982\u4e0b\uff1a</p> \\[ \\begin{array}{l} x &amp;= (x_{k\u22121} x_{k\u22122} \\cdots x_1 x_0 . x_{\u22121} x_{\u22122} \\cdots x_{\u2212l})_{2's\u2212compl} \\\\   &amp;= \u2212x_{k\u22121}2^{k\u22121} + \\sum_{i=-l}^{k-2}x_i2^i \\end{array} \\] <p>\u8bc1\u660e\u662f\u76f8\u5f53\u7b80\u5355\u7684\uff0c\u5982\u679c\u6211\u4eec\u8003\u8651\u5206\u522b\u4e24\u79cd\u60c5\u51b5\uff1a\\(x_{k-1}=0\\) \u548c \\(x_{k-1}=1\\)</p> <p>\u5bf9\u4e8e\\(x_{k-1}=0\\) \u7684\u60c5\u51b5\u6211\u4eec\u6709</p> \\[ \\begin{array}{l} x &amp;= (0x_{k\u22122} \\cdots x_1 x_0 . x_{\u22121} x_{\u22122} \\cdots x_{\u2212l})_{2's\u2212compl} \\\\   &amp;= (0x_{k\u22122} \\cdots x_1 x_0 . x_{\u22121} x_{\u22122} \\cdots x_{\u2212l})_2 \\\\   &amp;= \\sum_{i=-l}^{k-2}x_i2^i \\end{array} \\] <p>\u5bf9\u4e8e\\(x_{k-1}=1\\) \u7684\u60c5\u51b5\u6211\u4eec\u6709</p> \\[ \\begin{array}{l} x &amp;= (1x_{k\u22122} \\cdots x_1 x_0 . x_{\u22121} x_{\u22122} \\cdots x_{\u2212l})_{2's\u2212compl} \\\\   &amp;= -[2^k-(1x_{k\u22122} \\cdots x_1 x_0 . x_{\u22121} x_{\u22122} \\cdots x_{\u2212l})_2] \\\\   &amp;= -2^{k-1}+\\sum_{i=-l}^{k-2}x_i2^i \\end{array} \\] <p>Developing the corresponding interpretation for 1\u2019s-complement numbers is left as an exercise. </p> <p>\u5f00\u53d1 1 \u8865\u7801\u7684\u76f8\u5e94\u89e3\u91ca\u7559\u4f5c\u7ec3\u4e60\u3002</p> <p>A simple generalization of the notion above immediately suggests itself [Kore81]. Let us assign negative weights to an arbitrary subset of the  k +  l  positions in a radix- r number and positive weights to the rest of the positions. A vector</p> <p>\u4e0a\u8ff0\u6982\u5ff5\u7684\u7b80\u5355\u6982\u62ec\u7acb\u5373\u663e\u73b0\u51fa\u6765[Kore81]\u3002\u8ba9\u6211\u4eec\u5c06\u8d1f\u6743\u91cd\u5206\u914d\u7ed9\u57fa\u6570 r \u6570\u4e2d \\(k + l\\) \u4e2a\u4f4d\u7f6e\u7684\u4efb\u610f\u5b50\u96c6\uff0c\u5e76\u5c06\u6b63\u6743\u91cd\u5206\u914d\u7ed9\u5176\u4f59\u4f4d\u7f6e\u3002\u4e00\u4e2a\u5411\u91cf</p> \\[ \u03bb = (\u03bb_{k\u22121} \u03bb_{k\u22122} \u00b7 \u00b7 \u00b7 \u03bb_1 \u03bb_0 . \u03bb_{\u22121} \u03bb_{\u22122} \u00b7 \u00b7 \u00b7 \u03bb_{\u2212l}) \\] <p>with elements  \u03bbi  in {\u22121, 1}, can be used to specify the signs associated with the various positions. With these conventions, the value represented by the digit vector  x  of length k +  l  is</p> <p>\u5143\u7d20 \\(\u03bb_i\\) \u5c5e\u4e8e {\u22121, 1} \uff0c\u53ef\u7528\u4e8e\u6307\u5b9a\u4e0e\u4efb\u610f\u4f4d\u7f6e\u76f8\u5173\u7684\u7b26\u53f7\u3002\u6839\u636e\u8fd9\u4e9b\u7ea6\u5b9a\uff0c\u957f\u5ea6\u4e3a \\(k + l\\) \u7684\u6570\u5b57\u5411\u91cf x \u8868\u793a\u7684\u503c\u662f</p> \\[ (x_{k\u22121} x_{k\u22122} \\cdots x_1 x_0. x_{\u22121} x_{\u22122} \\cdots x_{\u2212l})_{r, \u03bb} = \\sum_{i=-l}^{k-1}\\lambda_ix_ir^i \\] <p>Note that the scheme above covers unsigned radix- r, 2\u2019s-complement, and negative-radix number systems as special cases:</p> <p>\u8bf7\u6ce8\u610f\uff0c\u4e0a\u9762\u7684\u65b9\u6848\u6db5\u76d6\u4e86\u65e0\u7b26\u53f7\u57fa\u6570 r\u30012 \u7684\u8865\u7801\u548c\u8d1f\u57fa\u6570\u7cfb\u7edf\u4f5c\u4e3a\u7279\u6b8a\u60c5\u51b5\uff1a</p> <pre><code>\u03bb =  1  1  1 \u00b7 \u00b7 \u00b7  1  1  1  1     \u6b63\u57fa\u6570 Positive radix\n\u03bb = \u22121  1  1 \u00b7 \u00b7 \u00b7  1  1  1  1     2\u7684\u8865\u7801 2's complement\n\u03bb =          \u00b7 \u00b7 \u00b7 \u22121  1 \u22121  1     \u8d1f\u57fa\u6570 Negative radix\n</code></pre> <p>We can take one more step in the direction of generality and postulate that instead of a single sign vector \u03bb being associated with the digit positions in the number system (i.e., with all numbers represented), a separate sign vector is defined for each number. Thus, the digits are viewed as having signed values:</p> <p>\u6211\u4eec\u53ef\u4ee5\u5728\u4e00\u822c\u6027\u7684\u65b9\u5411\u4e0a\u518d\u8fc8\u51fa\u4e00\u6b65\uff0c\u5047\u8bbe\u4e0d\u662f\u5355\u4e2a\u7b26\u53f7\u5411\u91cf \u03bb \u4e0e\u6570\u5b57\u7cfb\u7edf\u4e2d\u7684\u6570\u5b57\u4f4d\u7f6e\u76f8\u5173\u8054\uff08\u5373\u8868\u793a\u6240\u6709\u6570\u5b57\uff09\uff0c\u4e3a\u6bcf\u4e2a\u6570\u5b57\u5b9a\u4e49\u4e00\u4e2a\u5355\u72ec\u7684\u7b26\u53f7\u5411\u91cf\u3002\u56e0\u6b64\uff0c\u6570\u5b57\u88ab\u89c6\u4e3a\u5177\u6709\u6709\u7b26\u53f7\u503c\uff1a</p> \\[ x_i = \\lambda_i|x_i| \\text{ \u5176\u4e2d }\\lambda_i \\in \\{ -1, 1\\} \\] <p>Here,  \u03bbi  is the sign and | xi| is the magnitude of the  i th digit. In fact once we begin to view the digits as signed values, there is no reason to limit ourselves to signed-magnitude representation of the digit values. Any type of coding, including biased or complement representation, can be used for the digits. Furthermore, the range of digit values need not be symmetric. We have already covered some examples of such signed-digit number systems in Section 1.4 (see Examples 1.1, 1.3, and 1.4). </p> <p>\u8fd9\u91cc\uff0c \\(\u03bb_i\\) \u662f\u7b26\u53f7\u800c \\(|x_i|\\)\u662f\u7b2c i \u4f4d\u6570\u5b57\u7684\u5927\u5c0f\u3002\u4e8b\u5b9e\u4e0a\uff0c\u4e00\u65e6\u6211\u4eec\u5f00\u59cb\u5c06\u6570\u5b57\u89c6\u4e3a\u6709\u7b26\u53f7\u503c\uff0c\u5c31\u6ca1\u6709\u7406\u7531\u5c06\u81ea\u5df1\u9650\u5236\u4e8e\u503c\u7684\u7b26\u53f7\u5e45\u5ea6\u8868\u793a\u3002\u4efb\u4f55\u7c7b\u578b\u7684\u7f16\u7801\uff0c\u5305\u62ec\u504f\u7f6e\u6216\u8865\u7801\u8868\u793a\uff0c\u90fd\u53ef\u4ee5\u7528\u4e8e\u6570\u5b57\u3002\u6b64\u5916\uff0c\u6570\u5b57\u503c\u7684\u8303\u56f4\u4e0d\u5fc5\u662f\u5bf9\u79f0\u7684\u3002\u6211\u4eec\u5df2\u7ecf\u5728 1.4 \u8282\u4e2d\u4ecb\u7ecd\u4e86\u6b64\u7c7b\u5e26\u7b26\u53f7\u6570\u5b57\u7cfb\u7edf\u7684\u4e00\u4e9b\u793a\u4f8b\uff08\u53c2\u89c1\u793a\u4f8b 1.1\u30011.3 \u548c 1.4\uff09\u3002</p> <p>Basically, any set [\u2212 \u03b1,  \u03b2] of  r  or more consecutive integers that includes 0 can be used as the digit set for radix  r. If exactly  r  digit values are used, then the number system is irredundant and offers a unique representation for each value within its range. On the other hand, if more than  r  digit values are used,  \u03c1 =  \u03b1 +  \u03b2 + 1 \u2212  r  represents the  redundancy index  of the number system and some values will have multiple representations. In Chapter 3, we will see that such redundant representations can eliminate the propagation of carries in addition and thus allow us to implement truly parallel fast adders. </p> <p>\u57fa\u672c\u4e0a\uff0c\u4efb\u4f55\u5305\u542b 0 \u7684 r \u4e2a\u6216\u66f4\u591a\u8fde\u7eed\u6574\u6570\u7684\u96c6\u5408 [\u2212 \u03b1, \u03b2] \u90fd\u53ef\u4ee5\u7528\u4f5c\u57fa\u6570 r \u7684\u6570\u5b57\u96c6\u3002\u5982\u679c\u6070\u597d\u4f7f\u7528 r \u4f4d\u503c\uff0c\u5219\u6570\u5b57\u7cfb\u7edf\u662f\u975e\u5197\u4f59\u7684\uff0c\u5e76\u4e3a\u5176\u8303\u56f4\u5185\u7684\u6bcf\u4e2a\u503c\u63d0\u4f9b\u552f\u4e00\u7684\u8868\u793a\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5982\u679c\u4f7f\u7528\u591a\u4e8e r \u4e2a\u6570\u5b57\u7684\u503c\uff0c\u5219 \\(\u03c1 = \u03b1 + \u03b2 + 1 \u2212 r\\) \u8868\u793a\u6570\u5b57\u7cfb\u7edf\u7684 \u5197\u4f59\u7d22\u5f15 \uff0c\u5e76\u4e14\u67d0\u4e9b\u503c\u5c06\u5177\u6709\u591a\u79cd\u8868\u793a\u5f62\u5f0f\u3002\u5728\u7b2c3\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u770b\u5230\u8fd9\u79cd\u5197\u4f59\u8868\u793a\u53ef\u4ee5\u989d\u5916\u6d88\u9664\u8fdb\u4f4d\u4f20\u64ad\uff0c\u4ece\u800c\u4f7f\u6211\u4eec\u80fd\u591f\u5b9e\u73b0\u771f\u6b63\u7684\u5e76\u884c\u5feb\u901f\u52a0\u6cd5\u5668\u3002</p> <p>As an example of nonredundant signed-digit representations, consider a radix-4 number system with the digit set [\u22121, 2]. A  k-digit number of this type can represent any integer from \u2212 ( 4 k \u2212 1 )/ 3 to 2 ( 4 k \u2212 1 )/ 3. Given a standard radix-4 integer using the digit set [0, 3], it can be converted to the preceding representation by simply rewriting each digit of 3 as \u22121 + 4, where the second term becomes a carry of 1 that propagates leftward. Figure 2.10 shows a numerical example. Note that the result may require  k + 1 digits. </p> <p>\u4f5c\u4e3a\u975e\u5197\u4f59\u7b26\u53f7\u6570\u5b57\u8868\u793a\u7684\u793a\u4f8b\uff0c\u8bf7\u8003\u8651\u5177\u6709\u6570\u5b57\u96c6 [\u22121, 2] \u7684\u57fa 4 \u6570\u5b57\u7cfb\u7edf\u3002\u8fd9\u79cd\u7c7b\u578b\u7684 k \u4f4d\u6570\u5b57\u53ef\u4ee5\u8868\u793a\u4ece \\(- (4^k - 1 )/3\\) \u5230 \\(2(4^k - 1)/3\\) \u7684\u4efb\u4f55\u6574\u6570\u3002\u7ed9\u5b9a\u4f7f\u7528\u6570\u5b57\u96c6 [0, 3] \u7684\u6807\u51c6\u57fa 4 \u6574\u6570\uff0c\u53ef\u4ee5\u901a\u8fc7\u7b80\u5355\u5730\u5c06 3 \u7684\u6bcf\u4e2a\u6570\u5b57\u91cd\u5199\u4e3a \\(-1 + 4\\) \u6765\u8f6c\u6362\u4e3a\u524d\u9762\u7684\u8868\u793a\u5f62\u5f0f\uff0c\u5176\u4e2d\u7b2c\u4e8c\u9879\u6210\u4e3a\u5411\u5de6\u4f20\u64ad\u7684\u8fdb\u4f4d 1\u3002\u56fe 2.10 \u663e\u793a\u4e86\u4e00\u4e2a\u6570\u503c\u793a\u4f8b\u3002\u8bf7\u6ce8\u610f\uff0c\u7ed3\u679c\u53ef\u80fd\u9700\u8981 \\(k + 1\\) \u6570\u5b57\u3002</p> <p></p> <p>The conversion process of Fig. 2.10 stops when there remains no digit with value 3 that needs to be rewritten. The reverse conversion is similarly done by rewriting any digit of \u22121 as 3 with a borrow of 1 (carry of \u22121). </p> <p>\u5f53\u6ca1\u6709\u9700\u8981\u91cd\u5199\u7684\u503c\u4e3a3\u7684\u6570\u5b57\u65f6\uff0c\u56fe2.10\u7684\u8f6c\u6362\u8fc7\u7a0b\u505c\u6b62\u3002\u53cd\u5411\u8f6c\u6362\u7c7b\u4f3c\u5730\u901a\u8fc7\u5c06\u4efb\u4f55 -1 \u6570\u5b57\u91cd\u5199\u4e3a 3 \u5e76\u501f\u4f4d 1\uff08\u8fdb\u4f4d -1\uff09\u6765\u5b8c\u6210\u3002</p> <p>More generally, to convert between digit sets, each old digit value is rewritten as a valid new digit value and an appropriate transfer (carry or borrow) into the next higher digit position. Because these transfers can propagate, the conversion process is essentially a digit-serial one, beginning with the least-significant digit. </p> <p>\u66f4\u4e00\u822c\u5730\u8bf4\uff0c\u4e3a\u4e86\u5728\u6570\u5b57\u96c6\u4e4b\u95f4\u8fdb\u884c\u8f6c\u6362\uff0c\u6bcf\u4e2a\u65e7\u6570\u5b57\u503c\u90fd\u88ab\u91cd\u5199\u4e3a\u6709\u6548\u7684\u65b0\u6570\u5b57\u503c\uff0c\u5e76\u9002\u5f53\u8f6c\u79fb\uff08\u8fdb\u4f4d\u6216\u501f\u4f4d\uff09\u5230\u4e0b\u4e00\u4e2a\u66f4\u9ad8\u7684\u6570\u5b57\u4f4d\u7f6e\u3002\u7531\u4e8e\u8fd9\u4e9b\u4f20\u8f93\u53ef\u4ee5\u4f20\u64ad\uff0c\u56e0\u6b64\u8f6c\u6362\u8fc7\u7a0b\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u6570\u5b57\u4e32\u884c\u8fc7\u7a0b\uff0c\u4ece\u6700\u4f4e\u6709\u6548\u4f4d\u5f00\u59cb\u3002</p> <p>As an example of redundant signed-digit representations, consider a radix-4 number system with the digit set [\u22122, 2]. A  k-digit number of this type can represent any integer from \u22122 ( 4 k \u2212 1 )/ 3 to 2 ( 4 k \u2212 1 )/ 3. Given a standard radix-4 number using the digit set [0, 3], it can be converted to the preceding representation by simply rewriting each digit of 3 as \u22121 + 4 and each digit of 2 as \u22122 + 4, where the second term in each case becomes a carry of 1 that propagates leftward. Figure 2.11 shows a numerical example. </p> <p>\u4f5c\u4e3a\u5197\u4f59\u7b26\u53f7\u6570\u5b57\u8868\u793a\u7684\u793a\u4f8b\uff0c\u8bf7\u8003\u8651\u5177\u6709\u6570\u5b57\u96c6 [\u22122, 2] \u7684\u57fa 4 \u6570\u5b57\u7cfb\u7edf\u3002\u8fd9\u79cd\u7c7b\u578b\u7684 k \u4f4d\u6570\u5b57\u53ef\u4ee5\u8868\u793a\u4ece \\(\u22122 ( 4^k \u2212 1 )/ 3 \u5230 2 ( 4^k \u2212 1 )/ 3\\) \u7684\u4efb\u4f55\u6574\u6570\u3002\u7ed9\u5b9a\u4f7f\u7528\u6570\u5b57\u96c6 [0, 3] \u7684\u6807\u51c6\u57fa 4 \u6570\u5b57\uff0c\u53ef\u4ee5\u901a\u8fc7\u7b80\u5355\u5730\u5c06 3 \u7684\u6bcf\u4e2a\u6570\u5b57\u91cd\u5199\u4e3a \\(\u22121 + 4\\) \u5e76\u5c06 2 \u7684\u6bcf\u4e2a\u6570\u5b57\u91cd\u5199\u4e3a \\(\u22122 + 4\\) \u6765\u8f6c\u6362\u4e3a\u524d\u9762\u7684\u8868\u793a\u5f62\u5f0f\uff0c\u5176\u4e2d\u6bcf\u79cd\u60c5\u51b5\u4e0b\u7684\u7b2c\u4e8c\u9879\u90fd\u6210\u4e3a\u5411\u5de6\u4f20\u64ad\u7684\u8fdb\u4f4d 1\u3002\u56fe 2.11 \u663e\u793a\u4e86\u4e00\u4e2a\u6570\u503c\u793a\u4f8b\u3002</p> <p></p> <p>In this case, the transfers do not propagate, since each transfer of 1 can be absorbed by the next higher position that has a digit value in [\u22122, 1], forming a final result digit in [\u22122, 2]. The conversion process from conventional radix-4 to the preceding redundant representation is thus carry-free. The reverse process, however, remains digit-serial. </p> <p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f20\u8f93\u4e0d\u4f1a\u4f20\u64ad\uff0c\u56e0\u4e3a\u6bcf\u4e2a 1 \u7684\u4f20\u8f93\u90fd\u53ef\u4ee5\u88ab\u5177\u6709 [\u22122, 1] \u4e2d\u6570\u5b57\u503c\u7684\u4e0b\u4e00\u4e2a\u66f4\u9ad8\u4f4d\u7f6e\u5438\u6536\uff0c\u5f62\u6210\u6700\u7ec8\u7ed3\u679c\u6570\u5b57\u8303\u56f4\u5728[\u22122, 2]\u3002\u56e0\u6b64\uff0c\u4ece\u4f20\u7edf\u57fa\u6570 4 \u5230\u524d\u9762\u7684\u5197\u4f59\u8868\u793a\u7684\u8f6c\u6362\u8fc7\u7a0b\u662f\u65e0\u8fdb\u4f4d\u7684\u3002\u7136\u800c\uff0c\u76f8\u53cd\u7684\u8fc7\u7a0b\u4ecd\u7136\u662f\u6570\u5b57\u4e32\u884c\u7684\u3002</p> <p>We end this chapter by extending the dot notation of Section 1.6 to include negatively weighted bits, or negabits, which are represented as small hollow circles. Using this extended dot notation, positive-radix, 2\u2019s-complement, and negative-radix numbers, compared earlier in this section, can be represented graphically as in Fig. 2.12. Also, arithmetic algorithms on such numbers can be visualized for better understanding. For example, Fig. 2.13 depicts the operands, intermediate values, and final results when </p> <p>\u6211\u4eec\u901a\u8fc7\u6269\u5c55\u7b2c 1.6 \u8282\u7684\u70b9\u8868\u793a\u6cd5\u6765\u7ed3\u675f\u672c\u7ae0\uff0c\u4ee5\u5305\u62ec\u8d1f\u6743\u91cd\u4f4d\u6216\u8d1f\u4f4d\uff0c\u5b83\u4eec\u8868\u793a\u4e3a\u5c0f\u7a7a\u5fc3\u5706\u5708\u3002\u4f7f\u7528\u8fd9\u79cd\u6269\u5c55\u7684\u70b9\u8868\u793a\u6cd5\uff0c\u672c\u8282\u524d\u9762\u6bd4\u8f83\u7684\u6b63\u57fa\u6570\u30012 \u7684\u8865\u7801\u548c\u8d1f\u57fa\u6570\u53ef\u4ee5\u7528\u56fe\u5f62\u8868\u793a\uff0c\u5982\u56fe 2.12 \u6240\u793a\u3002\u6b64\u5916\uff0c\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u6570\u5b57\u7684\u7b97\u672f\u7b97\u6cd5\u53ef\u89c6\u5316\uff0c\u4ee5\u4fbf\u66f4\u597d\u5730\u7406\u89e3\u3002\u4f8b\u5982\uff0c\u56fe2.13\u63cf\u8ff0\u4e86\u56fe2.11\u65f6\u7684\u64cd\u4f5c\u6570\u3001\u4e2d\u95f4\u503c\u548c\u6700\u7ec8\u7ed3\u679c</p> <p></p> <p>adding or multiplying 2\u2019s-complement numbers. As a case in point, Fig. 2.13b helps us understand that to multiply 2\u2019s-complement numbers, we need a process that allows us to add partial results containing a mix of posibits and negabits, in a way that yields a final result that includes only 1 negabit.</p> <p>2 \u7684\u8865\u7801\u6570\u76f8\u52a0\u6216\u76f8\u4e58\u3002\u4f5c\u4e3a\u4e00\u4e2a\u4f8b\u5b50\uff0c\u56fe 2.13b \u5e2e\u52a9\u6211\u4eec\u7406\u89e3\uff0c\u8981\u4e58\u4ee5 2 \u7684\u8865\u7801\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u8fc7\u7a0b\uff0c\u5141\u8bb8\u6211\u4eec\u5c06\u5305\u542b\u6b63\u4f4d\u548c\u8d1f\u4f4d\u6df7\u5408\u7684\u90e8\u5206\u7ed3\u679c\u76f8\u52a0\uff0c\u4ece\u800c\u4ea7\u751f\u4ec5\u5305\u542b 1 \u4e2a\u8d1f\u4f4d\u7684\u6700\u7ec8\u7ed3\u679c\u3002</p>"},{"location":"Part_01/02/#_1","title":"\u95ee\u9898","text":""},{"location":"Part_01/02/#_2","title":"\u53c2\u8003\u6587\u732e\u548c\u8fdb\u4e00\u6b65\u9605\u8bfb","text":"<pre><code>[Aviz61]    Avizienis, A., \u201cSigned-Digit Number Representation for Fast Parallel Arithmetic,\u201d\n            IRE Trans. Electronic Computers, Vol. 10, pp. 389\u2013400, 1961.\n[Gosl80]    Gosling, J. B., Design of Arithmetic Units for Digital Computers, Macmillan,\n            1980.\n[Knut97]    Knuth, D. E., The Art of Computer Programming, 3rd ed., Vol. 2: Seminumerical\n            Algorithms, Addison-Wesley, 1997.\n[Kore81]    Koren, I., and Y. Maliniak, \u201cOn Classes of Positive, Negative, and Imaginary Radix\n            Number Systems,\u201d IEEE Trans. Computers, Vol. 30, No. 5, pp. 312\u2013317, 1981.\n[Korn94]    Kornerup, P., \u201cDigit-Set Conversions: Generalizations and Applications,\u201d IEEE\n            Trans. Computers, Vol. 43, No. 8, pp. 622\u2013629, 1994.\n[Parh90]    Parhami, B., \u201cGeneralized Signed-Digit Number Systems: A Unifying Framework\n            for Redundant Number Representations,\u201d IEEE Trans. Computers, Vol. 39, No. 1,\n            pp. 89\u201398, 1990.\n</code></pre>"},{"location":"Part_01/03/","title":"3. \u5197\u4f59\u6570\u7cfb\u7edf","text":"<p>Redundant Number Systems</p> <p>\u201cNumbers constitute the only universal language.\u201d </p> <p>\u2014 NATHANAE LWEST</p> <p>\u201c\u6570\u5b57\u6784\u6210\u4e86\u552f\u4e00\u7684\u901a\u7528\u8bed\u8a00\u3002\u201d</p> <p>\u2014 \u7eb3\u6492\u5c3c\u5c14\u00b7\u97e6\u65af\u7279</p> <p>This chapter deals with the representation of signed fixed-point numbers using a positive integer radix  r  and a redundant digit set composed of more than  r  digit values. After showing that such representations eliminate carry propagation, we cover variations in digit sets, addition algorithms, input/output conversions, and arithmetic support functions. Chapter topics include:</p> <p>\u672c\u7ae0\u8ba8\u8bba\u6709\u7b26\u53f7\u5b9a\u70b9\u6570\u4f7f\u7528\u6b63\u6574\u6570\u57fa\u6570r\u548c\u7531\u591a\u4e8er\u4e2a\u6570\u5b57\u503c\u7ec4\u6210\u7684\u5197\u4f59\u6570\u5b57\u96c6\u7684\u8868\u793a\u6cd5\u3002\u5728\u8bc1\u660e\u8fd9\u79cd\u8868\u793a\u6d88\u9664\u4e86\u8fdb\u4f4d\u4f20\u64ad\u4e4b\u540e\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86\u6570\u5b57\u96c6\u3001\u52a0\u6cd5\u7b97\u6cd5\u3001\u8f93\u5165/\u8f93\u51fa\u8f6c\u6362\u548c\u7b97\u672f\u652f\u6301\u51fd\u6570\u7684\u53d8\u5316\u3002\u7ae0\u8282\u4e3b\u9898\u5305\u62ec\uff1a</p> <p>3.1 \u5904\u7406\u8fdb\u4f4d\u95ee\u9898 Coping with the Carry Problem</p> <p>3.2 \u8ba1\u7b97\u673a\u7b97\u672f\u4e2d\u7684\u5197\u4f59 Redundancy in Computer Arithmetic</p> <p>3.3 \u6570\u5b57\u96c6\u548c\u6570\u5b57\u96c6\u8f6c\u6362Digit Sets and Digit-Set Conversions</p> <p>3.4 \u5e7f\u4e49\u7684\u6709\u7b26\u53f7\u6570\u5b57\u6570 Generalized Signed-Digit Numbers</p> <p>3.5 \u65e0\u8fdb\u4f4d\u52a0\u6cd5\u7b97\u6cd5 Carry-Free Addition Algorithms</p> <p>3.6 \u8f6c\u6362\u548c\u652f\u6301\u529f\u80fd Conversions and Support Functions</p>"},{"location":"Part_01/03/#31","title":"3.1 \u5904\u7406\u8fdb\u4f4d\u95ee\u9898","text":"<p>Addition is a primary building block in implementing arithmetic operations. If addition is slow or expensive, all other operations suffer in speed or cost. Addition can be slow and/or expensive because:</p> <p>a. With  k-digit operands, one has to allow for O( k) worst-case carry-propagation stages in simple ripple-carry adder design. </p> <p>b. The carry computation network is a major source of complexity and cost in the design of carry-lookahead and other fast adders. </p> <p>The carry problem can be dealt with in several ways:</p> <p>1. Limit carry propagation to within a small number of bits. </p> <p>2. Detect the end of propagation rather than wait for worst-case time. </p> <p>3. Speed up propagation via lookahead and other methods. </p> <p>4. Ideal: Eliminate carry propagation altogether! </p> <p>\u52a0\u6cd5\u662f\u5b9e\u73b0\u7b97\u672f\u8fd0\u7b97\u7684\u4e3b\u8981\u6784\u5efa\u5757\u3002\u5982\u679c\u52a0\u6cd5\u901f\u5ea6\u6162\u6216\u6210\u672c\u9ad8\uff0c\u5219\u6240\u6709\u5176\u4ed6\u64cd\u4f5c\u7684\u901f\u5ea6\u6216\u6210\u672c\u90fd\u4f1a\u53d7\u5230\u5f71\u54cd\u3002\u52a0\u6cd5\u53ef\u80fd\u4f1a\u5f88\u6162\u548c/\u6216\u6602\u8d35\u662f\u56e0\u4e3a\uff1a</p> <p>a. \u5bf9\u4e8e k \u4f4d\u64cd\u4f5c\u6570\uff0c\u5728\u7b80\u5355\u7684\u7eb9\u6ce2\u8fdb\u4f4d\u52a0\u6cd5\u5668\u8bbe\u8ba1\u4e2d\u5fc5\u987b\u8003\u8651\u5230 O(k) \u4e2a\u6700\u574f\u60c5\u51b5\u7684\u8fdb\u4f4d\u4f20\u64ad\u9636\u6bb5\u3002</p> <p>b. \u8fdb\u4f4d\u8ba1\u7b97\u7f51\u7edc\u662f\u8d85\u524d\u8fdb\u4f4d\u548c\u5176\u4ed6\u5feb\u901f\u52a0\u6cd5\u5668\u8bbe\u8ba1\u4e2d\u590d\u6742\u6027\u548c\u6210\u672c\u7684\u4e3b\u8981\u6765\u6e90\u3002</p> <p>\u8fdb\u4f4d\u95ee\u9898\u53ef\u4ee5\u901a\u8fc7\u591a\u79cd\u65b9\u5f0f\u5904\u7406\uff1a</p> <ol> <li> <p>\u5c06\u8fdb\u4f4d\u4f20\u64ad\u9650\u5236\u5728\u5c11\u91cf\u4f4d\u5185\u3002</p> </li> <li> <p>\u68c0\u6d4b\u4f20\u64ad\u7684\u7ed3\u675f\u800c\u4e0d\u662f\u7b49\u5f85\u6700\u574f\u60c5\u51b5\u7684\u65f6\u95f4\u3002</p> </li> <li> <p>\u901a\u8fc7\u8d85\u524d\u770b\u548c\u5176\u4ed6\u65b9\u6cd5\u52a0\u901f\u4f20\u64ad\u3002</p> </li> <li> <p>\u7406\u60f3\uff1a\u5b8c\u5168\u6d88\u9664\u8fdb\u4f4d\u4f20\u64ad\uff01</p> </li> </ol> <p>As examples of option 1, hybrid-redundant and residue number system representations are covered in Section 3.4 and Chapter 4, respectively. Asynchronous adder design (option 2) is considered in Section 5.4. Speedup methods for carry propagation are covered in Chapters 6 and 7. </p> <p>In the remainder of this chapter, we deal with option 4, focusing first on the question: Can numbers be represented in such a way that addition does not involve carry propagation? We will see shortly that this is indeed possible. The resulting number representations can be used as the primary encoding scheme in the design of high-performance systems and are also useful in representing intermediate results in machines that use conventional number representation. </p> <p>\u4f5c\u4e3a\u9009\u9879 1 \u7684\u793a\u4f8b\uff0c\u7b2c 3.4 \u8282\u548c\u7b2c 4 \u7ae0\u5206\u522b\u4ecb\u7ecd\u4e86\u6df7\u5408\u5197\u4f59\u548c\u6b8b\u6570\u7cfb\u7edf\u8868\u793a\u3002\u7b2c 5.4 \u8282\u8003\u8651\u4e86\u5f02\u6b65\u52a0\u6cd5\u5668\u8bbe\u8ba1\uff08\u9009\u9879 2\uff09\u3002\u7b2c 6 \u7ae0\u548c\u7b2c 7 \u7ae0\u4ecb\u7ecd\u4e86\u8fdb\u4f4d\u4f20\u64ad\u7684\u52a0\u901f\u65b9\u6cd5\u3002</p> <p>\u5728\u672c\u7ae0\u7684\u5176\u4f59\u90e8\u5206\uff0c\u6211\u4eec\u5c06\u8ba8\u8bba\u9009\u9879 4\uff0c\u9996\u5148\u5173\u6ce8\u8fd9\u4e2a\u95ee\u9898\uff1a\u6570\u5b57\u662f\u5426\u53ef\u4ee5\u7528\u52a0\u6cd5\u4e0d\u6d89\u53ca\u8fdb\u4f4d\u4f20\u64ad\u7684\u65b9\u5f0f\u8868\u793a\uff1f\u6211\u4eec\u5f88\u5feb\u5c31\u4f1a\u770b\u5230\u8fd9\u786e\u5b9e\u662f\u53ef\u80fd\u7684\u3002\u7531\u6b64\u4ea7\u751f\u7684\u6570\u5b57\u8868\u793a\u53ef\u4ee5\u7528\u4f5c\u9ad8\u6027\u80fd\u7cfb\u7edf\u8bbe\u8ba1\u4e2d\u7684\u4e3b\u8981\u7f16\u7801\u65b9\u6848\uff0c\u5e76\u4e14\u4e5f\u53ef\u7528\u4e8e\u8868\u793a\u4f7f\u7528\u4f20\u7edf\u6570\u5b57\u8868\u793a\u7684\u673a\u5668\u4e2d\u7684\u4e2d\u95f4\u7ed3\u679c\u3002</p> <p>We begin with a decimal example  (r = 10 ), assuming the standard digit set [0, 9].  Consider the addition of the following two decimal numbers without carry propagation.  For this, we simply compute \u201cposition sums\u201d and write them down in the corresponding columns. We can use the symbols  A = 10,  B = 11,  C = 12, etc., for the extended digit values or simply represent them with two standard digits. </p> <p>\u6211\u4eec\u4ece\u4e00\u4e2a\u5341\u8fdb\u5236\u793a\u4f8b (r = 10) \u5f00\u59cb\uff0c\u5047\u8bbe\u6807\u51c6\u6570\u5b57\u96c6 [0, 9]\u3002 \u8003\u8651\u4ee5\u4e0b\u4e24\u4e2a\u5341\u8fdb\u5236\u6570\u76f8\u52a0\u800c\u4e0d\u8fdb\u884c\u8fdb\u4f4d\u4f20\u64ad\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u53ea\u9700\u8ba1\u7b97\u201c\u4f4d\u7f6e\u603b\u548c\u201d\u5e76\u5c06\u5176\u5199\u5728\u76f8\u5e94\u7684\u5217\u4e2d\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7b26\u53f7 A = 10\u3001B = 11\u3001C = 12 \u7b49\u6765\u8868\u793a\u6269\u5c55\u6570\u5b57\u503c\uff0c\u6216\u8005\u7b80\u5355\u5730\u7528\u4e24\u4e2a\u6807\u51c6\u6570\u5b57\u6765\u8868\u793a\u5b83\u4eec\u3002</p> <pre><code>   5  7  8  2  4  9\n+  6  2  9  3  8  9     Operand digits in [0, 9]\n----------------------------------------------------\n  11  9 17  5 12 18     Position sums in [0, 18]\n</code></pre> <p>So, if we allow the digit set [0, 18], the scheme works, but only for the first addition! Subsequent additions will cause problems. </p> <p>\u56e0\u6b64\uff0c\u5982\u679c\u6211\u4eec\u5141\u8bb8\u6570\u5b57\u96c6 [0, 18]\uff0c\u5219\u8be5\u65b9\u6848\u6709\u6548\uff0c\u4f46\u4ec5\u9002\u7528\u4e8e\u7b2c\u4e00\u6b21\u52a0\u6cd5\uff01\u540e\u7eed\u6dfb\u52a0\u4f1a\u51fa\u73b0\u95ee\u9898\u3002</p> <p>Consider now adding two numbers in the radix-10 number system using the digit set [0, 18]. The sum of digits for each position is in [0, 36], which can be decomposed into an interim sum in [0, 16] and a transfer digit in [0, 2]. In other words</p> <p>\u73b0\u5728\u8003\u8651\u4f7f\u7528\u6570\u5b57\u96c6[0, 18]\u5c06\u57fa 10 \u6570\u5b57\u7cfb\u7edf\u4e2d\u7684\u4e24\u4e2a\u6570\u5b57\u76f8\u52a0\u3002\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u6570\u5b57\u548c\u5728[0, 36]\u4e2d\uff0c\u53ef\u4ee5\u5206\u89e3\u4e3a[0, 16]\u4e2d\u7684\u4e2d\u95f4\u548c\u548c[0, 2]\u4e2d\u7684\u8f6c\u79fb\u6570\u5b57\u3002\u6362\u53e5\u8bdd\u8bf4</p> <p>\u200b     [0, 36] = 10 \u00d7 [0, 2] + [0, 16]</p> <p>Adding the interim sum and the incoming transfer digit yields a digit in [0, 18] and creates no new transfer. In interval notation, we have</p> <p>\u5c06\u4e34\u65f6\u603b\u548c\u4e0e\u4f20\u5165\u7684\u4f20\u8f93\u6570\u5b57\u76f8\u52a0\u4f1a\u4ea7\u751f [0, 18] \u4e2d\u7684\u6570\u5b57\uff0c\u5e76\u4e14\u4e0d\u4f1a\u521b\u5efa\u65b0\u7684\u4f20\u8f93\u3002\u5728\u533a\u95f4\u8868\u793a\u6cd5\u4e2d\uff0c\u6211\u4eec\u6709</p> <p>\u200b    [0, 16] + [0, 2] = [0, 18]</p> <p>Figure 3.1 shows an example addition. </p> <p>\u56fe 3.1 \u663e\u793a\u4e86\u4e00\u4e2a\u52a0\u6cd5\u793a\u4f8b\u3002</p> <p></p> <p>So, even though we cannot do true carry-free addition (Fig. 3.2a), the next best thing, where carry propagates by only one position (Fig. 3.2b), is possible if we use the digit set [0, 18] in radix 10. We refer to this best possible scheme as \u201ccarry-free\u201d addition. The key to the ability to do carry-free addition is the representational redundancy that provides multiple encodings for some numbers. Figure 3.2c shows that the single-stage propagation of transfers can be eliminated by a simple lookahead scheme; that is, instead of first computing the transfer into position  i  based on the digits  xi\u22121 and  yi\u22121 and then combining it with the interim sum, we can determine  si  directly from  xi,  yi,  xi\u22121, and yi\u22121. This may make the adder logic somewhat more complex, but in general the result is higher speed. </p> <p>\u56e0\u6b64\uff0c\u5373\u4f7f\u6211\u4eec\u4e0d\u80fd\u8fdb\u884c\u771f\u6b63\u7684\u65e0\u8fdb\u4f4d\u52a0\u6cd5\uff08\u56fe 3.2a\uff09\uff0c\u5982\u679c\u6211\u4eec\u5728\u57fa\u6570 10 \u4e2d\u4f7f\u7528\u6570\u5b57\u96c6 [0, 18]\uff0c\u5219\u4e0b\u4e00\u4e2a\u6700\u597d\u7684\u65b9\u6848\u662f\u53ef\u80fd\u7684\uff0c\u5176\u4e2d\u8fdb\u4f4d\u4ec5\u4f20\u64ad\u4e00\u4e2a\u4f4d\u7f6e\uff08\u56fe 3.2b\uff09\u3002\u6211\u4eec\u5c06\u8fd9\u79cd\u6700\u4f73\u53ef\u80fd\u65b9\u6848\u79f0\u4e3a\u201c\u65e0\u8fdb\u4f4d\u201d\u52a0\u6cd5\u3002\u8fdb\u884c\u65e0\u8fdb\u4f4d\u52a0\u6cd5\u7684\u80fd\u529b\u7684\u5173\u952e\u662f\u8868\u793a\u5197\u4f59\uff0c\u5b83\u4e3a\u67d0\u4e9b\u6570\u5b57\u63d0\u4f9b\u4e86\u591a\u79cd\u7f16\u7801\u3002\u56fe3.2c\u663e\u793a\u5355\u7ea7\u4f20\u8f93\u7684\u4f20\u64ad\u53ef\u4ee5\u901a\u8fc7\u7b80\u5355\u7684\u524d\u77bb\u65b9\u6848\u6765\u6d88\u9664\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u6839\u636e \\(x_i\u3001y_i\u3001x_{i\u22121}\\) \u548c \\(y_{i\u22121}\\) \u786e\u5b9a \\(s_i\\)\uff0c\u800c\u4e0d\u662f\u9996\u5148\u6839\u636e\u6570\u5b57 \\(x_{i\u22121}\\) \u548c \\(y_{i\u22121}\\) \u8ba1\u7b97\u5230\u4f4d\u7f6e \\(i\\) \u7684\u8f6c\u79fb\uff0c\u7136\u540e\u5c06\u5176\u4e0e\u4e34\u65f6\u548c\u76f8\u7ed3\u5408\u3002\u8fd9\u53ef\u80fd\u4f1a\u4f7f\u52a0\u6cd5\u5668\u903b\u8f91\u66f4\u52a0\u590d\u6742\uff0c\u4f46\u901a\u5e38\u7ed3\u679c\u662f\u901f\u5ea6\u66f4\u9ad8\u3002</p> <p></p> <p>In the decimal example of Fig. 3.1, the digit set [0, 18] was used to effect carry-free addition. The 9 \u201cdigit\u201d values 10 through 18 are redundant. However, we really do not need this much redundancy in a decimal number system for carry-free addition; the digit set [0, 11] will do. Our example addition (after converting the numbers to the new digit set) is shown in Fig. 3.3. </p> <p>\u5728\u56fe 3.1 \u7684\u5341\u8fdb\u5236\u793a\u4f8b\u4e2d\uff0c\u6570\u5b57\u96c6 [0, 18] \u7528\u4e8e\u5b9e\u73b0\u65e0\u8fdb\u4f4d\u52a0\u6cd5\u3002 10 \u5230 18 \u7684 9 \u4e2a\u201c\u6570\u5b57\u201d\u503c\u662f\u5197\u4f59\u7684\u3002\u5728\u5341\u8fdb\u5236\u6570\u5b57\u7cfb\u7edf\u4e2d\uff0c\u6211\u4eec\u786e\u5b9e\u4e0d\u9700\u8981\u8fd9\u4e48\u591a\u5197\u4f59\u6765\u8fdb\u884c\u65e0\u8fdb\u4f4d\u52a0\u6cd5\uff1b\u6570\u5b57\u96c6 [0, 11] \u5373\u53ef\u3002\u6211\u4eec\u7684\u52a0\u6cd5\u793a\u4f8b\uff08\u5c06\u6570\u5b57\u8f6c\u6362\u4e3a\u65b0\u7684\u6570\u5b57\u96c6\u4e4b\u540e\uff09\u5982\u56fe 3.3 \u6240\u793a\u3002</p> <p></p> <p>A natural question at this point is: How much redundancy in the digit set is needed to enable carry-free addition? For example, will the example addition of Fig. 3.3 work with the digit set [0, 10]? (Try it and see.) We will answer this question in Section 3.5. </p> <p>\u6b64\u65f6\u4e00\u4e2a\u81ea\u7136\u7684\u95ee\u9898\u662f\uff1a\u6570\u5b57\u96c6\u4e2d\u9700\u8981\u591a\u5c11\u5197\u4f59\u624d\u80fd\u5b9e\u73b0\u65e0\u8fdb\u4f4d\u52a0\u6cd5\uff1f\u4f8b\u5982\uff0c\u56fe 3.3 \u4e2d\u7684\u52a0\u6cd5\u793a\u4f8b\u662f\u5426\u9002\u7528\u4e8e\u6570\u5b57\u96c6 [0, 10]\uff1f \uff08\u5c1d\u8bd5\u4e00\u4e0b\u770b\u770b\u3002\uff09\u6211\u4eec\u5c06\u5728 3.5 \u8282\u4e2d\u56de\u7b54\u8fd9\u4e2a\u95ee\u9898\u3002</p>"},{"location":"Part_01/03/#32","title":"3.2 \u8ba1\u7b97\u673a\u7b97\u672f\u4e2d\u7684\u5197\u4f59","text":"<p>Redundancy is used extensively for speeding up arithmetic operations. The oldest example, first suggested in 1959 [Metz59], pertains to carry-save or stored-carry numbers using the radix-2 digit set [0, 2] for fast addition of a sequence of binary operands. Figure 3.4 provides an example, showing how the intermediate sum is kept in stored-carry format, allowing each subsequent addition to be performed in a carry-free manner. </p> <p>\u5197\u4f59\u88ab\u5e7f\u6cdb\u7528\u4e8e\u52a0\u901f\u7b97\u672f\u8fd0\u7b97\u3002\u6700\u53e4\u8001\u7684\u793a\u4f8b\u4e8e 1959 \u5e74\u9996\u6b21\u63d0\u51fa [Metz59]\uff0c\u6d89\u53ca\u4f7f\u7528\u57fa\u6570 2 \u6570\u5b57\u96c6 [0, 2] \u8fdb\u884c\u4e8c\u8fdb\u5236\u64cd\u4f5c\u6570\u5e8f\u5217\u7684\u5feb\u901f\u52a0\u6cd5\u7684\u8fdb\u4f4d\u4fdd\u5b58\u6216\u5b58\u50a8\u8fdb\u4f4d\u6570\u3002\u56fe 3.4 \u63d0\u4f9b\u4e86\u4e00\u4e2a\u793a\u4f8b\uff0c\u663e\u793a\u4e86\u4e2d\u95f4\u548c\u5982\u4f55\u4ee5\u5b58\u50a8\u8fdb\u4f4d\u683c\u5f0f\u4fdd\u5b58\uff0c\u4ece\u800c\u5141\u8bb8\u4ee5\u65e0\u8fdb\u4f4d\u65b9\u5f0f\u6267\u884c\u6bcf\u4e2a\u540e\u7eed\u52a0\u6cd5\u3002</p> <p></p> <p>Why is this scheme called carry-save or stored-carry? Figure 3.5 provides an explanation. Let us use the 2-bit encoding</p> <p>\u4e3a\u4ec0\u4e48\u8fd9\u4e2a\u65b9\u6848\u88ab\u79f0\u4e3a\u8fdb\u4f4d\u4fdd\u5b58\u6216\u5b58\u50a8\u8fdb\u4f4d\uff1f\u56fe 3.5 \u63d0\u4f9b\u4e86\u4e00\u4e2a\u89e3\u91ca\u3002\u8ba9\u6211\u4eec\u4f7f\u75282\u4f4d\u7f16\u7801</p> <p>\u200b      0 :  (0, 0),  1 : (0, 1) \u6216 (1, 0),  2 :  (1, 1)</p> <p>to represent the digit set [0, 2]. With this encoding, each stored-carry number is really composed of two binary numbers, one for each bit of the encoding. These two binary numbers can be added to an incoming binary number, producing two binary numbers composed of the sum bits kept in place and the carry bits shifted one position to the left. </p> <p>\u8868\u793a\u6570\u5b57\u96c6 [0, 2]\u3002\u901a\u8fc7\u8fd9\u79cd\u7f16\u7801\uff0c\u6bcf\u4e2a\u5b58\u50a8\u8fdb\u4f4d\u6570\u5b9e\u9645\u4e0a\u7531\u4e24\u4e2a\u4e8c\u8fdb\u5236\u6570\u7ec4\u6210\uff0c\u6bcf\u4e2a\u4e8c\u8fdb\u5236\u6570\u5bf9\u5e94\u7f16\u7801\u7684\u6bcf\u4e00\u4f4d\u3002\u8fd9\u4e24\u4e2a\u4e8c\u8fdb\u5236\u6570\u53ef\u4ee5\u4e0e\u4f20\u5165\u7684\u4e8c\u8fdb\u5236\u6570\u76f8\u52a0\uff0c\u4ea7\u751f\u4e24\u4e2a\u4e8c\u8fdb\u5236\u6570\uff0c\u5176\u4e2d\u548c\u4f4d\u4fdd\u6301\u5728\u539f\u4f4d\uff0c\u8fdb\u4f4d\u4f4d\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d\u3002</p> <p>These sum and carry bits form the partial sum and can be stored in two registers for the next addition. Thus, the carries are \u201csaved\u201d or \u201cstored\u201d instead of being allowed to propagate. </p> <p>\u8fd9\u4e9b\u548c\u548c\u8fdb\u4f4d\u4f4d\u5f62\u6210\u90e8\u5206\u548c\uff0c\u5e76\u4e14\u53ef\u4ee5\u5b58\u50a8\u5728\u4e24\u4e2a\u5bc4\u5b58\u5668\u4e2d\u4ee5\u4f9b\u4e0b\u4e00\u6b21\u52a0\u6cd5\u4f7f\u7528\u3002\u56e0\u6b64\uff0c\u8fdb\u4f4d\u88ab\u201c\u4fdd\u5b58\u201d\u6216\u201c\u5b58\u50a8\u201d\uff0c\u800c\u4e0d\u662f\u88ab\u5141\u8bb8\u4f20\u64ad\u3002</p> <p></p> <p>Figure 3.5 shows that one stored-carry number and one standard binary number can be added to form a stored-carry sum in a single full-adder delay (2\u20134 gate levels, depending on the full adder\u2019s logic implementation of the outputs  s =  x \u2295  y \u2295  c in and c out =  xy\u2228 xc in \u2228 yc in ). This is significantly faster than standard carry-propagate addition to accumulate the sum of several binary numbers, even if a fast carry-lookahead adder is used for the latter. Of course once the final sum has been obtained in stored-carry form, it may have to be converted to standard binary by using a carry-propagate adder to add the two components of the stored-carry number. The key point is that the carry-propagation delay occurs only once, at the very end, rather than in each addition step. </p> <p>\u56fe3.5\u663e\u793a\u4e861\u4e2a\u5b58\u50a8\u8fdb\u4f4d\u6570\u548c1\u4e2a\u6807\u51c6\u4e8c\u8fdb\u5236\u6570\u53ef\u4ee5\u76f8\u52a0\u5f97\u5230\u5b58\u50a8\u8fdb\u4f4d\u6570\uff0c\u9700\u8981\u5355\u4e2a\u5168\u52a0\u5668\u5ef6\u8fdf\uff082-4 \u4e2a\u95e8\u7ea7\uff0c\u53d6\u51b3\u4e8e\u5168\u52a0\u5668\u7684\u8f93\u51fa\u903b\u8f91\u5b9e\u73b0 s = x \u2295 y \u2295 c in \u548c c out = xy\u2228 xc in \u2228 yc in \uff09\u3002\u8fd9\u6bd4\u7d2f\u52a0\u51e0\u4e2a\u4e8c\u8fdb\u5236\u6570\u4e4b\u548c\u7684\u6807\u51c6\u8fdb\u4f4d\u4f20\u64ad\u52a0\u6cd5\u8981\u5feb\u5f97\u591a\uff0c\u5373\u4f7f\u540e\u8005\u4f7f\u7528\u5feb\u901f\u8fdb\u4f4d\u8d85\u524d\u52a0\u6cd5\u5668\u4e5f\u662f\u5982\u6b64\u3002\u5f53\u7136\uff0c\u4e00\u65e6\u4ee5\u5b58\u50a8\u8fdb\u4f4d\u5f62\u5f0f\u83b7\u5f97\u6700\u7ec8\u603b\u548c\uff0c\u53ef\u80fd\u5fc5\u987b\u4f7f\u7528\u8fdb\u4f4d\u4f20\u64ad\u52a0\u6cd5\u5668\u5c06\u5b58\u50a8\u8fdb\u4f4d\u6570\u7684\u4e24\u4e2a\u5206\u91cf\u76f8\u52a0\uff0c\u5c06\u5176\u8f6c\u6362\u4e3a\u6807\u51c6\u4e8c\u8fdb\u5236\u3002\u5173\u952e\u70b9\u662f\u8fdb\u4f4d\u4f20\u64ad\u5ef6\u8fdf\u4ec5\u5728\u6700\u540e\u53d1\u751f\u4e00\u6b21\uff0c\u800c\u4e0d\u662f\u5728\u6bcf\u4e2a\u52a0\u6cd5\u6b65\u9aa4\u4e2d\u53d1\u751f\u3002</p> <p>Since the carry-save addition scheme of Fig. 3.5 converts three binary numbers to two binary numbers with the same sum, it is sometimes referred to as a 3/2 reduction circuit or (3; 2) counter. The latter name reflects the essential function of a full adder: it counts the number of 1s among its three input bits and outputs the result as a 2-bit binary number. More on this in Chapter 8. </p> <p>\u7531\u4e8e\u56fe 3.5 \u7684\u8fdb\u4f4d\u4fdd\u5b58\u52a0\u6cd5\u65b9\u6848\u5c06\u4e09\u4e2a\u4e8c\u8fdb\u5236\u6570\u8f6c\u6362\u4e3a\u5177\u6709\u76f8\u540c\u548c\u7684\u4e24\u4e2a\u4e8c\u8fdb\u5236\u6570\uff0c\u56e0\u6b64\u6709\u65f6\u5c06\u5176\u79f0\u4e3a 3/2 \u5f52\u7ea6\u7535\u8def\u6216 (3; 2) \u8ba1\u6570\u5668\u3002\u540e\u4e00\u4e2a\u540d\u79f0\u53cd\u6620\u4e86\u5168\u52a0\u5668\u7684\u57fa\u672c\u529f\u80fd\uff1a\u5b83\u8ba1\u7b97\u4e09\u4e2a\u8f93\u5165\u4f4d\u4e2d 1 \u7684\u6570\u91cf\uff0c\u5e76\u5c06\u7ed3\u679c\u4f5c\u4e3a 2 \u4f4d\u4e8c\u8fdb\u5236\u6570\u8f93\u51fa\u3002\u66f4\u591a\u5185\u5bb9\u8bf7\u53c2\u89c1\u7b2c 8 \u7ae0\u3002</p> <p>Other examples of the use of redundant representations in computer arithmetic are found in fast multiplication and division schemes, where the multiplier or quotient is represented or produced in redundant form. More on these in Parts III and IV. </p> <p>\u5728\u8ba1\u7b97\u673a\u7b97\u672f\u4e2d\u4f7f\u7528\u5197\u4f59\u8868\u793a\u7684\u5176\u4ed6\u793a\u4f8b\u53ef\u4ee5\u5728\u5feb\u901f\u4e58\u6cd5\u548c\u9664\u6cd5\u65b9\u6848\u4e2d\u627e\u5230\uff0c\u5176\u4e2d\u4e58\u6570\u6216\u5546\u4ee5\u5197\u4f59\u5f62\u5f0f\u8868\u793a\u6216\u4ea7\u751f\u3002\u6709\u5173\u8fd9\u4e9b\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1\u7b2c\u4e09\u90e8\u5206\u548c\u7b2c\u56db\u90e8\u5206\u3002</p>"},{"location":"Part_01/03/#33","title":"3.3 \u6570\u5b57\u96c6\u548c\u6570\u5b57\u96c6\u8f6c\u6362","text":"<p>Conventional radix- r numbers use the standard digit set [0, r \u2212 1]. However, many other redundant and nonredundant digit sets are possible. A necessary condition is that the digit set contain at least r different digit values. If it contains more than r values, the number system is redundant.</p> <p>\u4f20\u7edf\u7684\u57fa\u6570 r \u6570\u5b57\u4f7f\u7528\u6807\u51c6\u6570\u5b57\u96c6 \\([0, r \u2212 1]\\)\u3002\u7136\u800c\uff0c\u8bb8\u591a\u5176\u4ed6\u5197\u4f59\u548c\u975e\u5197\u4f59\u6570\u5b57\u96c6\u4e5f\u662f\u53ef\u80fd\u7684\u3002\u5fc5\u8981\u6761\u4ef6\u662f\u6570\u5b57\u96c6\u5408\u81f3\u5c11\u5305\u542br\u4e2a\u4e0d\u540c\u7684\u6570\u5b57\u503c\u3002\u5982\u679c\u5b83\u5305\u542b\u591a\u4e8e r \u503c\uff0c\u5219\u6570\u5b57\u7cfb\u7edf\u662f\u5197\u4f59\u7684\u3002</p> <p>Conversion of numbers between standard and other digit sets is quite simple and essentially entails a digit-serial process in which, beginning at the right end of the given number, each digit is rewritten as a valid digit in the new digit set and a transfer (carry or borrow) into the next higher digit position. This conversion process is essentially like carry propagation in that it must be done from right to left and, in the worst case, the most significant digit is affected by a \u201ccarry\u201d coming from the least significant position. The following examples illustrate the process (see also the examples at the end of Section 2.6).</p> <p>\u6807\u51c6\u6570\u5b57\u96c6\u548c\u5176\u4ed6\u6570\u5b57\u96c6\u4e4b\u95f4\u7684\u6570\u5b57\u8f6c\u6362\u975e\u5e38\u7b80\u5355\uff0c\u672c\u8d28\u4e0a\u9700\u8981\u4e00\u4e2a\u6570\u5b57\u4e32\u884c\u8fc7\u7a0b\uff0c\u5176\u4e2d\u4ece\u7ed9\u5b9a\u6570\u5b57\u7684\u53f3\u7aef\u5f00\u59cb\uff0c\u6bcf\u4e2a\u6570\u5b57\u90fd\u88ab\u91cd\u5199\u4e3a\u65b0\u6570\u5b57\u96c6\u4e2d\u7684\u6709\u6548\u6570\u5b57\uff0c\u5e76\u8f6c\u79fb\uff08\u8fdb\u4f4d\u6216\u501f\u4f4d\uff09\u5230\u4e0b\u4e00\u4e2a\u66f4\u9ad8\u7684\u6570\u5b57\u4f4d\u7f6e\u3002\u6b64\u8f6c\u6362\u8fc7\u7a0b\u672c\u8d28\u4e0a\u7c7b\u4f3c\u4e8e\u8fdb\u4f4d\u4f20\u64ad\uff0c\u56e0\u4e3a\u5b83\u5fc5\u987b\u4ece\u53f3\u5230\u5de6\u5b8c\u6210\uff0c\u5e76\u4e14\u5728\u6700\u574f\u7684\u60c5\u51b5\u4e0b\uff0c\u6700\u9ad8\u6709\u6548\u6570\u5b57\u4f1a\u53d7\u5230\u6765\u81ea\u6700\u4f4e\u6709\u6548\u4f4d\u7f6e\u7684\u201c\u8fdb\u4f4d\u201d\u7684\u5f71\u54cd\u3002\u4ee5\u4e0b\u793a\u4f8b\u8bf4\u660e\u4e86\u8be5\u8fc7\u7a0b\uff08\u53e6\u8bf7\u53c2\u89c1\u7b2c 2.6 \u8282\u672b\u5c3e\u7684\u793a\u4f8b\uff09\u3002</p> <p>EXAMPLE 3.1 Convert the following radix-10 number with the digit set [0, 18] to one using the conventional digit set [0, 9].</p> <p>\u793a\u4f8b3.1 \u5c06\u4ee5\u4e0b\u6570\u5b57\u96c6[0, 18] \u7684\u57fa10 \u6570\u8f6c\u6362\u4e3a\u4f7f\u7528\u4f20\u7edf\u6570\u5b57\u96c6[0, 9] \u7684\u3002</p> <pre><code>  11  9 17 10 12 18   Rewrite 18 as 10 (carry 1) +8\n  11  9 17 10 13  8   13 = 10 (carry 1) + 3\n  11  9 17 11  3  8   11 = 10 (carry 1) + 1\n  11  9 18  1  3  8   18 = 10 (carry 1) + 8\n  11 10  8  1  3  8   10 = 10 (carry 1) + 0\n  12  0  8  1  3  8   12 = 10 (carry 1) + 2\n1  2  0  8  1  3  8   Answer: all digits in [0, 9]\n</code></pre> <p>EXAMPLE 3.2 Convert the following radix-2 carry-save number to binary; that is, from digit set [0, 2] to digit set [0, 1].</p> <p>\u793a\u4f8b3.2 \u5c06\u4ee5\u4e0b\u57fa2 \u8fdb\u4f4d\u4fdd\u5b58\u6570\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\uff1b\u5373\u4ece\u6570\u5b57\u96c6[0, 2]\u5230\u6570\u5b57\u96c6[0, 1]\u3002</p> <pre><code>  1 1 2 0 2 0   Rewrite 2 as 2 (carry 1) + 0\n  1 1 2 1 0 0   2 = 2 (carry 1) + 0\n  1 2 0 1 0 0   2 = 2 (carry 1) + 0\n  2 0 0 1 0 0   2 = 2 (carry 1) + 0\n1 0 0 0 1 0 0   Answer: all digits in [0, 1]\n</code></pre> <p>Another way to accomplish the preceding conversion is to decompose the carry-save number into two numbers, both of which have 1s where the original number has a digit of 2. The sum of these two numbers is then the desired binary number.</p> <p>\u5b8c\u6210\u4e0a\u8ff0\u8f6c\u6362\u7684\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u5c06\u8fdb\u4f4d\u4fdd\u5b58\u6570\u5206\u89e3\u4e3a\u4e24\u4e2a\u6570\uff0c\u8fd9\u4e24\u4e2a\u6570\u90fd\u662f 1\uff0c\u800c\u539f\u59cb\u6570\u7684\u4f4d\u6570\u4e3a 2\u3002\u8fd9\u4e24\u4e2a\u6570\u7684\u548c\u5c31\u662f\u6240\u9700\u7684\u4e8c\u8fdb\u5236\u6570\u3002</p> <pre><code>  1 1 1 0 1 0 First number: \u201csum\u201d bits\n+ 0 0 1 0 1 0 Second number: \u201ccarry\u201d bits\n--------------------------------------------\n1 0 0 0 1 0 0 Sum of the two numbers\n</code></pre> <p>EXAMPLE 3.3 Digit values do not have to be positive. We reconsider Example 3.1 using the asymmetric target digit set [\u22126, 5].</p> <p>\u793a\u4f8b3.3 \u6570\u5b57\u503c\u4e0d\u5fc5\u662f\u6b63\u6570\u3002\u6211\u4eec\u4f7f\u7528\u4e0d\u5bf9\u79f0\u76ee\u6807\u6570\u5b57\u96c6 [\u22126, 5] \u91cd\u65b0\u8003\u8651\u793a\u4f8b 3.1\u3002</p> <pre><code>   11   9  17  10  12  18    Rewrite 18 as 20 (carry 2) \u2212 2\n   11   9  17  10  14  \u22122    14 = 10 (carry 1) + 4\n   11   9  17  11   4  \u22122    11 = 10 (carry 1) + 1\n   11   9  18   1   4  \u22122    18 = 20 (carry 2) \u2212 2\n   11  11  \u22122   1   4  \u22122    11 = 10 (carry 1) + 1\n   12   1  \u22122   1   4  \u22122    12 = 10 (carry 1) + 2\n1   2   1  \u22122   1   4  \u22122    Answer: all digits in [\u22126, 5]\n</code></pre> <p>On line 2 of this conversion, we could have rewritten 14 as 20 (carry 2) \u2212 6, which would have led to a different, but equivalent, representation. In general, several representations may be possible with a redundant digit set.</p> <p>\u5728\u8fd9\u4e2a\u8f6c\u6362\u7684\u7b2c 2 \u884c\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 14 \u91cd\u5199\u4e3a 20 (carry 2) \u2212 6\uff0c\u8fd9\u5c06\u5bfc\u81f4\u4e0d\u540c\u4f46\u7b49\u6548\u7684\u8868\u793a\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5197\u4f59\u6570\u5b57\u96c6\u53ef\u80fd\u6709\u591a\u79cd\u8868\u793a\u5f62\u5f0f\u3002</p> <p>EXAMPLE 3.4 If we change the target digit set of Example 3.2 from [0, 1] to [\u22121, 1], we can do the conversion digit-serially as before. However, carry-free conversion is possible for this example if we rewrite each 2 as 2 (carry 1) + 0 and each 1 as 2 (carry 1) \u22121.</p> <p>\u4f8b3.4 \u5982\u679c\u6211\u4eec\u5c06\u4f8b3.2 \u7684\u76ee\u6807\u6570\u5b57\u96c6\u4ece[0, 1] \u66f4\u6539\u4e3a[\u22121, 1]\uff0c\u6211\u4eec\u53ef\u4ee5\u50cf\u4ee5\u524d\u4e00\u6837\u8fdb\u884c\u6570\u5b57\u4e32\u884c\u8f6c\u6362\u3002\u7136\u800c\uff0c\u5982\u679c\u6211\u4eec\u5c06\u6bcf\u4e2a 2 \u91cd\u5199\u4e3a 2 (\u8fdb\u4f4d 1) + 0\uff0c\u5e76\u5c06\u6bcf\u4e2a 1 \u91cd\u5199\u4e3a 2 (\u8fdb\u4f4d 1) -1\uff0c\u5219\u5728\u672c\u793a\u4f8b\u4e2d\uff0c\u65e0\u8fdb\u4f4d\u8f6c\u6362\u662f\u53ef\u80fd\u7684\u3002</p> <p>The resulting interim digits in [\u22121, 0] can absorb an incoming carry of 1 with no further propagation.</p> <p>[\u22121, 0] \u4e2d\u4ea7\u751f\u7684\u4e2d\u95f4\u6570\u5b57\u53ef\u4ee5\u5438\u6536\u4f20\u5165\u7684 1 \u8fdb\u4f4d\uff0c\u800c\u4e0d\u4f1a\u8fdb\u4e00\u6b65\u4f20\u64ad\u3002</p> <pre><code>   1  1  2  0  2  0  Given carry-save number\n  \u22121 \u22121  0  0  0  0  Interim digits in [\u22121, 0]\n   1  1  1  0  1  0  Transfer digits in [0, 1]\n1  0  0  0  1  0  0  Answer: all digits in [\u22121, 1]\n</code></pre>"},{"location":"Part_01/03/#34","title":"3.4 \u5e7f\u4e49\u6709\u7b26\u53f7\u6570\u5b57\u6570","text":"<p>We have seen thus far that the digit set of a radix- r  positional number system need not be the standard set [0,  r\u22121]. Using the digit set [\u22121, 1] for radix-2 numbers was proposed by E. Collignon as early as 1897 [Glas81]. Whether this was just a mathematical curiosity, or motivated by an application or advantage, is not known. In the early 1960s, Avizienis [Aviz61] defined the class of signed-digit number systems with symmetric digit sets [\u2212 \u03b1,  \u03b1] and radix  r &gt;  2, where  \u03b1  is any integer in the range  r/ 2 + 1 \u2264  \u03b1 \u2264  r \u2212 1.  These number systems allow at least 2 r/ 2 + 3 digit values, instead of the minimum required  r  values, and are thus redundant. </p> <p>\u5230\u76ee\u524d\u4e3a\u6b62\u6211\u4eec\u5df2\u7ecf\u770b\u5230\uff0c\u57fa\u6570 r \u4f4d\u7f6e\u6570\u7cfb\u7edf\u7684\u6570\u5b57\u96c6\u4e0d\u4e00\u5b9a\u662f\u6807\u51c6\u96c6 \\([0, r\u22121]\\)\u3002 E. Collignon \u65e9\u5728 1897 \u5e74\u5c31\u63d0\u51fa\u4f7f\u7528\u6570\u5b57\u96c6 \\([\u22121, 1]\\) \u8868\u793a\u57fa 2 \u6570 [Glas81]\u3002\u8fd9\u662f\u5426\u53ea\u662f\u4e00\u79cd\u6570\u5b66\u597d\u5947\u5fc3\uff0c\u8fd8\u662f\u51fa\u4e8e\u5e94\u7528\u6216\u4f18\u52bf\u7684\u52a8\u673a\uff0c\u5c1a\u4e0d\u6e05\u695a\u3002 20 \u4e16\u7eaa 60 \u5e74\u4ee3\u521d\uff0cAvizienis [Aviz61] \u5b9a\u4e49\u4e86\u5177\u6709\u5bf9\u79f0\u6570\u5b57\u96c6\u7684\u6709\u7b26\u53f7\u6570\u7684\u6570\u5b57\u7cfb\u7edf\u7c7b \\([\u2212 \u03b1, \u03b1]\\) \u4e14\u57fa\u6570 \\(r &gt; 2\\)\uff0c\u5176\u4e2d \\(\u03b1\\) \u662f \\(\\left \\lfloor r/2 \\right \\rfloor + 1 \u2264 \u03b1 \u2264 r \u2212 1\\) \u8303\u56f4\u5185\u7684\u4efb\u610f\u6574\u6570\u3002\u8fd9\u4e9b\u6570\u5b57\u7cfb\u7edf\u5141\u8bb8\u81f3\u5c11 \\(2 \\left \\lfloor r/2 \\right \\rfloor + 3\\) \u4f4d\u6570\u5b57\u503c\uff0c\u800c\u4e0d\u662f\u6240\u9700\u7684\u6700\u5c0f r \u503c\uff0c\u56e0\u6b64\u662f\u5197\u4f59\u7684\u3002</p> <p>Subsequently, redundant number systems with general, possibly asymmetric, digit sets of the form [\u2212 \u03b1,  \u03b2] were studied as tools for unifying all redundant number representations used in practice. This class is called \u201cgeneralized signed-digit (GSD) representation\u201d and differs from the ordinary signed-digit (OSD) representation of Avizienis in its more general digit set as well as the possibility of higher or lower redundancy. </p> <p>\u968f\u540e\u53c8\u6709\u7814\u7a76\u5177\u6709\u4e00\u822c\u7684\u3001\u53ef\u80fd\u4e0d\u5bf9\u79f0\u7684\u3001\u5f62\u5f0f\u4e3a \\([\u2212 \u03b1, \u03b2]\\) \u7684\u6570\u5b57\u96c6\u7684\u5197\u4f59\u6570\u7cfb\u7edf\uff0c\u4f5c\u4e3a\u5de5\u5177\u6765\u7edf\u4e00\u5b9e\u8df5\u4e2d\u4f7f\u7528\u7684\u6240\u6709\u5197\u4f59\u6570\u8868\u793a\u3002\u6b64\u7c7b\u79f0\u4e3a\u201c\u5e7f\u4e49\u7b26\u53f7\u6570\u5b57 (GSD) \u8868\u793a\u201d\uff0c\u4e0e Avizienis \u7684\u666e\u901a\u7b26\u53f7\u6570\u5b57 (OSD) \u8868\u793a\u4e0d\u540c\uff0c\u5176\u66f4\u901a\u7528\u7684\u6570\u5b57\u96c6\u4ee5\u53ca\u66f4\u9ad8\u6216\u66f4\u4f4e\u5197\u4f59\u7684\u53ef\u80fd\u6027\u3002</p> <p>Binary stored-carry numbers, with  r = 2 and digit set [0, 2], offer a good example for the usefulness of asymmetric digit sets. Higher redundancy is exemplified by the digit set [\u22127, 7] in radix 4 or [0, 3] in radix 2. An example for lower redundancy is the binary signed-digit (BSD) representation with  r = 2 and digit set [\u22121, 1]. None of these is covered by OSD. </p> <p>\u4e8c\u8fdb\u5236\u5b58\u50a8\u8fdb\u4f4d\u6570\uff0c\u5176\u4e2d r = 2 \u548c\u6570\u5b57\u96c6 [0, 2]\uff0c\u4e3a\u975e\u5bf9\u79f0\u6570\u5b57\u96c6\u7684\u6709\u7528\u6027\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5f88\u597d\u7684\u4f8b\u5b50\u3002\u8f83\u9ad8\u5197\u4f59\u7684\u793a\u4f8b\u662f\u57fa\u6570 4 \u4e2d\u7684\u6570\u5b57\u96c6 [\u22127, 7] \u6216\u57fa\u6570 2 \u4e2d\u7684 [0, 3]\u3002\u8f83\u4f4e\u5197\u4f59\u7684\u793a\u4f8b\u662f\u4e8c\u8fdb\u5236\u6709\u7b26\u53f7\u6570\u5b57 (BSD) \u8868\u793a\uff0c\u5176\u4e2d r = 2 \u548c\u6570\u5b57\u96c6 [\u22121, 1]\u3002 OSD \u4e0d\u6db5\u76d6\u8fd9\u4e9b\u5185\u5bb9\u3002</p> <p>An important parameter of a GSD number system is its  redundancy index, defined as \u03c1 =  \u03b1 +  \u03b2 + 1 \u2212  r (i.e., the amount by which the size of its digit set exceeds the size  r  of a nonredundant digit set for radix  r). Figure 3.6 presents a taxonomy of redundant and nonredundant positional number systems showing the names of some useful subclasses and their various relationships. Note that the redundancy index  \u03c1  is quite general and can be applied to any digit set. Another way of quantifying the redundancy of a number system with the symmetric digit set [\u2212 \u03b1,  \u03b1] in radix  r  is to use the ratio  h =  \u03b1/(r \u2212 1 ). This formulation of redundancy, which is inapplicable to the general digit set [\u2212 \u03b1,  \u03b2], has been used in connection with high-radix division algorithms, to be discussed in Chapter 14. Besides its general inapplicability, the index  h  suffers from the problem that it varies from 1 (for no redundancy), through 1 (for  \u03b1 =  r \u2212 1), to values larger than 1 for highly redundant number representation systems. Encountering redundancy indices below 1 is unusual and could be misleading.</p> <p>GSD \u6570\u5b57\u7cfb\u7edf\u7684\u4e00\u4e2a\u91cd\u8981\u53c2\u6570\u662f\u5176**\u5197\u4f59\u6307\u6570**\uff0c\u5b9a\u4e49\u4e3a \\(\u03c1 = \u03b1 + \u03b2 + 1 \u2212 r\\)\uff08\u5373\uff0c\u5176\u6570\u5b57\u96c6\u7684\u5927\u5c0f\u8d85\u8fc7\u57fa\u6570 r \u7684\u975e\u5197\u4f59\u6570\u5b57\u96c6\u7684\u5927\u5c0f r \u7684\u91cf\uff09\u3002\u56fe 3.6 \u5c55\u793a\u4e86\u5197\u4f59\u548c\u975e\u5197\u4f59\u4f4d\u7f6e\u6570\u5b57\u7cfb\u7edf\u7684\u5206\u7c7b\uff0c\u663e\u793a\u4e86\u4e00\u4e9b\u6709\u7528\u5b50\u7c7b\u7684\u540d\u79f0\u53ca\u5176\u5404\u79cd\u5173\u7cfb\u3002\u8bf7\u6ce8\u610f\uff0c\u5197\u4f59\u6307\u6570 \u03c1 \u975e\u5e38\u901a\u7528\uff0c\u53ef\u4ee5\u5e94\u7528\u4e8e\u4efb\u4f55\u6570\u5b57\u96c6\u3002\u5ea6\u91cf\u5177\u6709\u57fa\u6570 r \u4e2d\u7684\u5bf9\u79f0\u6570\u5b57\u96c6 \\([\u2212 \u03b1, \u03b1]\\) \u7684\u6570\u5b57\u7cfb\u7edf\u7684\u5197\u4f59\u5ea6\u7684\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528\u6bd4\u7387 \\(h = \u03b1/(r \u2212 1 )\\)\u3002\u8fd9\u79cd\u5197\u4f59\u516c\u5f0f\u4e0d\u9002\u7528\u4e8e\u4e00\u822c\u6570\u5b57\u96c6 \\([\u2212 \u03b1, \u03b2]\\)\uff0c\u5df2\u4e0e\u9ad8\u57fa\u6570\u9664\u6cd5\u7b97\u6cd5\u7ed3\u5408\u4f7f\u7528\uff0c\u5c06\u5728\u7b2c 14 \u7ae0\u4e2d\u8ba8\u8bba\u3002\u9664\u4e86\u5176\u4e00\u822c\u4e0d\u9002\u7528\u6027\u4e4b\u5916\uff0c\u7d22\u5f15 h \u8fd8\u5b58\u5728\u4ee5\u4e0b\u95ee\u9898\uff1a\u5b83\u4ece \\(\\frac{1}{2}\\)\uff08\u5bf9\u4e8e\u65e0\u5197\u4f59\uff09\u5230 1\uff08\u5bf9\u4e8e \u03b1 = r \u2212 1\uff09\u5230\u5927\u4e8e 1 \u7684\u503c\u7528\u4e8e\u9ad8\u5ea6\u5197\u4f59\u7684\u6570\u5b57\u8868\u793a\u7cfb\u7edf\u3002\u9047\u5230\u4f4e\u4e8e 1 \u7684\u5197\u4f59\u6307\u6570\u662f\u4e0d\u5bfb\u5e38\u7684\uff0c\u5e76\u4e14\u53ef\u80fd\u4f1a\u4ea7\u751f\u8bef\u5bfc\u3002</p> <p></p> <p>Any hardware implementation of GSD arithmetic requires the choice of a binary encoding scheme for the  \u03b1 +  \u03b2 + 1 digit values in the digit set [\u2212 \u03b1,  \u03b2]. Multivalued logic realizations have been considered, but we limit our discussion here to binary logic and proceed to show the importance and implications of the encoding scheme chosen through some examples. </p> <p>\u4efb\u4f55 GSD \u7b97\u672f\u7684\u786c\u4ef6\u5b9e\u73b0\u90fd\u9700\u8981\u9009\u62e9\u4e8c\u8fdb\u5236\u7684\u7f16\u7801\u65b9\u6848\u5bf9\u6570\u5b57\u96c6 \\([\u2212 \u03b1, \u03b2]\\) \u4e2d \\(\u03b1 + \u03b2 + 1\\) \u4e2a\u6570\u5b57\u503c\u7f16\u7801\u3002\u5df2\u7ecf\u8003\u8651\u4e86\u591a\u503c\u903b\u8f91\u5b9e\u73b0\uff0c\u4f46\u6211\u4eec\u5c06\u8fd9\u91cc\u7684\u8ba8\u8bba\u9650\u5236\u4e3a\u4e8c\u8fdb\u5236\u903b\u8f91\uff0c\u5e76\u7ee7\u7eed\u901a\u8fc7\u4e00\u4e9b\u793a\u4f8b\u6765\u5c55\u793a\u6240\u9009\u62e9\u7684\u7f16\u7801\u65b9\u6848\u7684\u91cd\u8981\u6027\u548c\u542b\u4e49\u3002</p> <p>Consider, for example, the BSD number system with  r = 2 and the digit set [\u22121, 1]. One needs at least 2 bits to encode these three digit values. Figure 3.7 shows four of the many possible encodings that can be used. </p> <p>\u4f8b\u5982\uff0c\u8003\u8651 BSD \u6570\u5b57\u7cfb\u7edf\uff0c\u5176\u4e2d r = 2 \u548c\u6570\u5b57\u96c6 [\u22121, 1]\u3002\u81f3\u5c11\u9700\u8981 2 \u4f4d\u6765\u5bf9\u8fd9\u4e09\u4f4d\u6570\u5b57\u503c\u8fdb\u884c\u7f16\u7801\u3002\u56fe 3.7 \u663e\u793a\u4e86\u53ef\u4ee5\u4f7f\u7528\u7684\u591a\u79cd\u53ef\u80fd\u7f16\u7801\u4e2d\u7684\u56db\u79cd\u3002</p> <p></p> <p>With the ( n,  p) encoding, the code (1, 1) may be considered an alternate representation of 0 or else viewed as an invalid combination. Many implementations have shown that the ( n,  p) encoding tends to simplify the hardware and also increases the speed by reducing the number of gate levels [Parh88]. The 1-out-of-3 encoding requires more bits per number but allows the detection of some storage and processing errors. </p> <p>\u5bf9\u4e8e (n, p) \u7f16\u7801\uff0c\u4ee3\u7801 (1, 1) \u53ef\u4ee5\u88ab\u89c6\u4e3a 0 \u7684\u66ff\u4ee3\u8868\u793a\uff0c\u6216\u8005\u88ab\u89c6\u4e3a\u65e0\u6548\u7ec4\u5408\u3002\u8bb8\u591a\u5b9e\u65bd\u8868\u660e( n, p) \u7f16\u7801\u503e\u5411\u4e8e\u7b80\u5316\u786c\u4ef6\uff0c\u5e76\u901a\u8fc7\u51cf\u5c11\u95e8\u7ea7\u6570\u91cf\u6765\u63d0\u9ad8\u901f\u5ea6 [Parh88]\u3002 3 \u53d6 1 \u7f16\u7801\u6bcf\u4e2a\u6570\u5b57\u9700\u8981\u66f4\u591a\u4f4d\uff0c\u4f46\u5141\u8bb8\u68c0\u6d4b\u4e00\u4e9b\u5b58\u50a8\u548c\u5904\u7406\u9519\u8bef\u3002</p> <p>The  (n,  p)  and 2\u2019s-complement encodings of Fig. 3.7 are examples of encodings in which two-valued signals having various weights collectively represent desired values. Figure 3.8a depicts three new symbols, besides posibits and negabits previously introduced in Figs. 1.4 and 2.13. A  doublebit  represents one of the two values in the set {0, 2}. A  negadoublebit  is a negatively weighted doublebit. Finally, a  unibit  assumes one of the two values in {\u22121, 1}. A posibit and a negabit together represent one of the values in the set {\u22121, 0, 1}, yielding the  (n,  p)  encoding of a BSD. A negadoublebit and a posibit form a 2-bit 2\u2019s-complement number capable of representing a value in [\u22122, 1] and thus a BSD. These two encodings for a 5-digit BSD number are shown in Fig. 3.8b. The third representation in Fig. 3.8b is derived from the second one by shifting the negadoublebits to the left by one position and changing them into negabits. Each BSD digit now spans two digit positions in its encoding. These weighted bit-set encodings have been found quite useful for the efficient representation and processing of redundant numbers [Jabe05]. </p> <p>\u56fe 3.7 \u7684 (n, p) \u548c 2 \u8865\u7801\u7f16\u7801\u662f\u5177\u6709\u5404\u79cd\u6743\u91cd\u7684\u4e8c\u503c\u4fe1\u53f7\u5171\u540c\u8868\u793a\u671f\u671b\u503c\u7684\u7f16\u7801\u793a\u4f8b\u3002\u9664\u4e86\u4e4b\u524d\u5728\u56fe 1.4 \u548c 2.13 \u4e2d\u4ecb\u7ecd\u7684**\u6b63\u4f4d**\u548c**\u8d1f\u4f4d**\u4e4b\u5916\uff0c\u56fe 3.8a \u8fd8\u63cf\u8ff0\u4e86\u4e09\u4e2a\u65b0\u7b26\u53f7\u3002 **\u53cc\u4f4d**\u8868\u793a\u96c6\u5408 {0, 2} \u4e2d\u7684\u4e24\u4e2a\u503c\u4e4b\u4e00\u3002**\u8d1f\u53cc\u4f4d**\u662f\u8d1f\u52a0\u6743\u53cc\u4f4d\u3002\u6700\u540e\uff0c\u4e00\u4e2a\u5355\u6bd4\u7279\u91c7\u7528 {\u22121, 1} \u4e2d\u7684\u4e24\u4e2a\u503c\u4e4b\u4e00\u3002\u6b63\u4f4d\u548c\u8d1f\u4f4d\u4e00\u8d77\u8868\u793a\u96c6\u5408 {\u22121, 0, 1} \u4e2d\u7684\u503c\u4e4b\u4e00\uff0c\u4ea7\u751f BSD \u7684 (n, p) \u7f16\u7801\u3002 negadoublebit \u548c posibit \u5f62\u6210\u4e00\u4e2a 2 \u4f4d 2 \u7684\u8865\u7801\u6570\uff0c\u80fd\u591f\u8868\u793a [\u22122, 1] \u4e2d\u7684\u503c\uff0c\u4ece\u800c\u8868\u793a BSD\u30025 \u4f4d BSD \u53f7\u7801\u7684\u8fd9\u4e24\u79cd\u7f16\u7801\u5982\u56fe 3.8b \u6240\u793a\u3002\u56fe 3.8b \u4e2d\u7684\u7b2c\u4e09\u79cd\u8868\u793a\u6cd5\u662f\u4ece\u7b2c\u4e8c\u79cd\u8868\u793a\u6cd5\u4e2d\u5bfc\u51fa\u7684\uff0c\u65b9\u6cd5\u662f\u5c06\u8d1f\u53cc\u4f4d\u5411\u5de6\u79fb\u52a8\u4e00\u4f4d\u5e76\u5c06\u5176\u66f4\u6539\u4e3a\u8d1f\u4f4d\u3002\u6bcf\u4e2a BSD \u6570\u5b57\u73b0\u5728\u5728\u5176\u7f16\u7801\u4e2d\u8de8\u8d8a\u4e24\u4e2a\u6570\u5b57\u4f4d\u7f6e\u3002\u4eba\u4eec\u53d1\u73b0\u8fd9\u4e9b\u52a0\u6743\u4f4d\u96c6\u7f16\u7801\u5bf9\u4e8e\u5197\u4f59\u6570\u7684\u6709\u6548\u8868\u793a\u548c\u5904\u7406\u975e\u5e38\u6709\u7528[Jabe05]\u3002</p> <p></p> <p>Hybrid signed-digit representations [Phat94] came about from an attempt to strike a balance between algorithmic speed and implementation cost by introducing redundancy in selected positions only. For example, standard binary representation may be used with BSD digits allowed in every third position, as shown in the addition example of Fig. 3.9. </p> <p>\u6df7\u5408\u7b26\u53f7\u6570\u5b57\u8868\u793a\u6cd5 [Phat94] \u7684\u4ea7\u751f\u662f\u4e3a\u4e86\u901a\u8fc7\u4ec5\u5728\u9009\u5b9a\u4f4d\u7f6e\u5f15\u5165\u5197\u4f59\u6765\u5728\u7b97\u6cd5\u901f\u5ea6\u548c\u5b9e\u73b0\u6210\u672c\u4e4b\u95f4\u53d6\u5f97\u5e73\u8861\u3002\u4f8b\u5982\uff0c\u6807\u51c6\u4e8c\u8fdb\u5236\u8868\u793a\u53ef\u4ee5\u4e0e\u6bcf\u7b2c\u4e09\u4e2a\u4f4d\u7f6e\u5141\u8bb8\u7684 BSD \u6570\u5b57\u4e00\u8d77\u4f7f\u7528\uff0c\u5982\u56fe 3.9 \u7684\u52a0\u6cd5\u793a\u4f8b\u6240\u793a\u3002</p> <p></p> <p>The addition algorithm depicted in Fig. 3.9 proceeds as follows. First one completes the position sums  pi  that are in [0, 2] for standard binary and [\u22122, 2] in BSD positions. The BSD position sums are then broken into an interim sum  wi  and transfer  ti+1, both in [\u22121, 1]. For the interim sum digit, the value 1 (\u22121) is chosen only if it is certain that the incoming transfer cannot be 1 (\u22121); that is, when the two binary operand digits in position  i \u2212 1 are (not) both 0s. The worst-case carry propagation spans a single group, beginning with a BSD that produces a transfer digit in [\u22121, 1] and ending with the next higher BSD position. </p> <p>\u56fe 3.9 \u4e2d\u63cf\u8ff0\u7684\u52a0\u6cd5\u7b97\u6cd5\u8fdb\u884c\u5982\u4e0b\u3002\u7b2c\u4e00\u4e2a\u5b8c\u6210\u6807\u51c6\u4e8c\u8fdb\u5236\u7684 [0, 2] \u548c BSD \u4f4d\u7f6e\u7684 [\u22122, 2] \u4e2d\u7684\u4f4d\u7f6e\u603b\u548c \\(p_i\\)\u3002\u7136\u540e\uff0cBSD \u4f4d\u7f6e\u548c\u88ab\u5206\u89e3\u4e3a\u4e34\u65f6\u548c \\(w_i\\) \u5e76\u4f20\u8f93 \\(t_{i+1}\\)\uff0c\u4e24\u8005\u90fd\u5728 [\u22121, 1] \u4e2d\u3002\u5bf9\u4e8e\u4e34\u65f6\u548c\u6570\u4f4d\uff0c\u4ec5\u5f53\u786e\u5b9a\u4f20\u5165\u4e0d\u80fd\u4e3a 1 (\u22121) \u65f6\u624d\u9009\u62e9\u503c 1 (\u22121)\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u4f4d\u7f6e \\(i \u2212 1\\) \u4e2d\u7684\u4e24\u4e2a\u4e8c\u8fdb\u5236\u64cd\u4f5c\u6570\u6570\u5b57\uff08\u4e0d\u662f\uff09\u90fd\u662f 0 \u65f6\u3002\u6700\u574f\u60c5\u51b5\u7684\u8fdb\u4f4d\u4f20\u64ad\u8de8\u8d8a\u5355\u4e2a\u7ec4\uff0c\u4ece\u5728 [\u22121, 1] \u4e2d\u4ea7\u751f\u4f20\u8f93\u6570\u5b57\u7684 BSD \u5f00\u59cb\uff0c\u5e76\u4ee5\u4e0b\u4e00\u4e2a\u66f4\u9ad8\u7684 BSD \u4f4d\u7f6e\u7ed3\u675f\u3002</p> <p>More generally, the group size can be  g  rather than 3. A larger group size reduces the hardware complexity (since the adder block in a BSD position is more complex than that in other positions) but adds to the carry-propagation delay in the worst case; hence, the hybrid scheme offers a trade-off between speed and cost. </p> <p>\u66f4\u4e00\u822c\u5730\uff0c\u7ec4\u5927\u5c0f\u53ef\u4ee5\u662f g \u800c\u4e0d\u662f 3\u3002\u8f83\u5927\u7684\u7ec4\u5927\u5c0f\u4f1a\u964d\u4f4e\u786c\u4ef6\u590d\u6742\u6027\uff08\u56e0\u4e3a BSD \u4f4d\u7f6e\u7684\u52a0\u6cd5\u5668\u5757\u6bd4\u5176\u4ed6\u4f4d\u7f6e\u7684\u52a0\u6cd5\u5668\u5757\u66f4\u590d\u6742\uff09\uff0c\u4f46\u5728\u6700\u574f\u7684\u60c5\u51b5\u4e0b\u4f1a\u589e\u52a0\u8fdb\u4f4d\u4f20\u64ad\u5ef6\u8fdf\uff1b\u56e0\u6b64\uff0c\u6df7\u5408\u65b9\u6848\u63d0\u4f9b\u4e86\u901f\u5ea6\u548c\u6210\u672c\u4e4b\u95f4\u7684\u6743\u8861\u3002</p> <p>Hybrid signed-digit representation with uniform spacing of BSD positions can be viewed as a special case of GSD systems. For the example of Fig. 3.9, arranging the numbers in 3-digit groups starting from the right end leads to a radix-8 GSD system with digit set [\u22124, 7]: that is, digit values from  (\u22121 0 0 ) two to  ( 1 1 1 ) two. So the hybrid scheme of Fig. 3.9 can be viewed as an implementation of (digit encoding for) this particular radix-8 GSD representation. </p> <p>\u5177\u6709\u5747\u5300 BSD \u4f4d\u7f6e\u95f4\u8ddd\u7684\u6df7\u5408\u7b26\u53f7\u6570\u5b57\u8868\u793a\u53ef\u4ee5\u88ab\u89c6\u4e3a GSD \u7cfb\u7edf\u7684\u7279\u4f8b\u3002\u5bf9\u4e8e\u56fe 3.9 \u7684\u793a\u4f8b\uff0c\u4ece\u53f3\u7aef\u5f00\u59cb\u5c06\u6570\u5b57\u6392\u5217\u4e3a 3 \u4f4d\u7ec4\uff0c\u5f97\u5230\u4e00\u4e2a\u6570\u5b57\u96c6\u4e3a [\u22124, 7] \u7684\u57fa 8 GSD \u7cfb\u7edf\uff1a\u5373\u4ece (\u22121 0 0 ) 2 \u5230 ( 1 1 1 ) 2 \u7684\u6570\u5b57\u503c\u3002\u56e0\u6b64\uff0c\u56fe 3.9 \u7684\u6df7\u5408\u65b9\u6848\u53ef\u4ee5\u88ab\u89c6\u4e3a\u6b64\u7279\u5b9a\u57fa 8 GSD \u8868\u793a\uff08\u7684\u6570\u5b57\u7f16\u7801\uff09\u7684\u5b9e\u73b0\u3002</p> <p>The hybrid-redundant representation of Fig. 3.9, constituting an encoding for the radix-8 digit set [\u22124, 7], is depicted in Fig. 3.10 using extended dot notation. The asymmetry of the digit set, and thus of the number representation range, is an unfortunate feature of such representations that allow only posibits in nonredundant positions. By removing the latter restriction, we can obtain more desirable symmetric hybrid-redundant representations, exemplified by the second encoding of Fig. 3.10, which constitutes an encoding for the radix-8 digit set [\u22124, 4]. Arithmetic on all such extended hybrid-redundant representations can be performed with equal ease [Jabe06]. </p> <p>\u56fe 3.9 \u7684\u6df7\u5408\u5197\u4f59\u8868\u793a\u6784\u6210\u4e86\u57fa\u6570 8 \u6570\u5b57\u96c6 [\u22124, 7] \u7684\u7f16\u7801\uff0c\u5728\u56fe 3.10 \u4e2d\u4f7f\u7528\u6269\u5c55\u70b9\u8868\u793a\u6cd5\u8fdb\u884c\u4e86\u63cf\u8ff0\u3002\u6570\u5b57\u96c6\u7684\u4e0d\u5bf9\u79f0\u6027\u4ee5\u53ca\u6570\u5b57\u8868\u793a\u8303\u56f4\u7684\u4e0d\u5bf9\u79f0\u6027\u662f\u6b64\u7c7b\u4ec5\u5141\u8bb8\u975e\u5197\u4f59\u4f4d\u7f6e\u4e2d\u7684 pos \u4f4d\u7684\u8868\u793a\u6cd5\u7684\u4e00\u4e2a\u4e0d\u5e78\u7279\u5f81\u3002\u901a\u8fc7\u6d88\u9664\u540e\u4e00\u4e2a\u9650\u5236\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u66f4\u7406\u60f3\u7684\u5bf9\u79f0\u6df7\u5408\u5197\u4f59\u8868\u793a\uff0c\u5982\u56fe3.10\u7684\u7b2c\u4e8c\u4e2a\u7f16\u7801\u6240\u793a\uff0c\u5b83\u6784\u6210\u4e86\u57fa8\u6570\u5b57\u96c6[\u22124, 4]\u7684\u7f16\u7801\u3002\u6240\u6709\u6b64\u7c7b\u6269\u5c55\u6df7\u5408\u5197\u4f59\u8868\u793a\u7684\u7b97\u672f\u90fd\u53ef\u4ee5\u540c\u6837\u8f7b\u677e\u5730\u6267\u884c[Jabe06]\u3002</p> <p></p>"},{"location":"Part_01/03/#35","title":"3.5 \u65e0\u8fdb\u4f4d\u52a0\u6cd5\u7b97\u6cd5","text":"<p>The GSD carry-free addition algorithm, corresponding to the scheme of Fig. 3.2b, is as follows:</p> <p>GSD\u65e0\u8fdb\u4f4d\u52a0\u6cd5\u7b97\u6cd5\uff0c\u5bf9\u5e94\u56fe3.2b\u7684\u65b9\u6848\u5982\u4e0b\uff1a</p> <p>Carry-free addition algorithm for GSD numbers</p> <ul> <li> <p>Compute the position sums pi = xi + yi.</p> </li> <li> <p>Divide each pi into a transfer ti+1 and an interim sum wi = pi \u2212 rti+1.</p> </li> <li> <p>Add the incoming transfers to obtain the sum digits si = wi + ti.</p> </li> </ul> <p>GSD \u6570\u5b57\u7684\u65e0\u8fdb\u4f4d\u52a0\u6cd5\u7b97\u6cd5</p> <ul> <li> <p>\u8ba1\u7b97\u4f4d\u7f6e\u603b\u548c \\(p_i = x_i + y_i\\)\u3002</p> </li> <li> <p>\u5c06\u6bcf\u4e2a \\(p_i\\) \u5206\u4e3a\u8fdb\u4f4d \\(t_{i+1}\\) \u4e0e\u4e2d\u95f4\u603b\u548c \\(w_i = p_i \u2212 rt_{i+1}\\)\u3002</p> </li> <li> <p>\u5c06\u4f20\u5165\u4f20\u8f93\u76f8\u52a0\u4ee5\u83b7\u5f97\u6570\u5b57\u603b\u548c \\(s_i = w_i + t_i\\)\u3002</p> </li> </ul> <p>Let us assume that the transfer digits ti are from the digit set [\u2212 \u03bb, \u00b5]. To ensure that the last step leads to no new transfer, the following condition must be satisfied:</p> <p>\u8ba9\u6211\u4eec\u5047\u8bbe\u4f20\u8f93\u6570\u5b57 \\(t_i\\) \u6765\u81ea\u6570\u5b57\u96c6 \\([\u2212 \u03bb, \u00b5]\\)\u3002\u4e3a\u4e86\u786e\u4fdd\u6700\u540e\u4e00\u6b65\u4e0d\u4f1a\u5bfc\u81f4\u65b0\u7684\u8f6c\u79fb\uff0c\u5fc5\u987b\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff1a $$ \\begin{array}{c} -\\alpha+\\lambda &amp; \\le p_i-rt_{i+1} \\le &amp; \\beta-\\mu \\ | &amp; \\text{ \u4e2d\u95f4\u548c } &amp; | \\ \\text{\u5982\u679c\u4f20\u5165\u7684\u2212\u03bb\u662f\u53ef\u5438\u6536\u7684\uff0c\u6700\u5c0f\u7684\u4e2d\u95f4\u548c} &amp; \\text{} &amp; \\text{\u5982\u679c\u4f20\u5165\u7684\u00b5\u662f\u53ef\u5438\u6536\u7684\uff0c\u6700\u5927\u7684\u4e2d\u95f4\u548c} \\end{array} $$ From the preceding inequalities, we can easily derive the conditions  \u03bb \u2265  \u03b1/(r \u2212 1 ) and  \u00b5 \u2265  \u03b2/(r \u2212 1 ). Once  \u03bb  and  \u00b5  are known, we choose the transfer digit value by comparing the position sum  pi  against  \u03bb +  \u00b5 + 2 constants  Cj, \u2212 \u03bb \u2264  j \u2264  \u00b5 + 1, with the transfer digit taken to be  j  if and only if  Cj \u2264  pi &lt; Cj+1. Formulas giving possible values for these constants can be found in [Parh90]. Here, we describe a simple intuitive method for deriving these constants. </p> <p>\u4ece\u524d\u9762\u7684\u4e0d\u7b49\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u63a8\u5bfc\u51fa\u6761\u4ef6 \\(\u03bb \u2265 \u03b1/(r \u2212 1 )\\) \u548c \\(\u00b5 \u2265 \u03b2/(r \u2212 1 )\\)\u3002\u4e00\u65e6\u5df2\u77e5 \u03bb \u548c \u00b5\uff0c\u6211\u4eec\u901a\u8fc7\u5c06\u4f4d\u7f6e\u603b\u548c \\(p_i\\) \u4e0e \\(\u03bb + \u00b5 + 2\\) \u5e38\u6570 \\(C_j\\) \u8fdb\u884c\u6bd4\u8f83\u6765\u9009\u62e9\u4f20\u8f93\u6570\u5b57\u503c\uff0c\\(\u2212 \u03bb \u2264 j \u2264 \u00b5 + 1\\)\uff0c\u5f53\u4e14\u4ec5\u5f53 \\(C_j \u2264 p_i &lt; C_{j+1}\\) \u65f6\uff0c\u4f20\u8f93\u6570\u5b57\u53d6\u4e3a j\u3002\u7ed9\u51fa\u8fd9\u4e9b\u5e38\u91cf\u53ef\u80fd\u503c\u7684\u516c\u5f0f\u53ef\u4ee5\u5728 [Parh90] \u4e2d\u627e\u5230\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u63cf\u8ff0\u4e86\u4e00\u79cd\u7b80\u5355\u76f4\u89c2\u7684\u65b9\u6cd5\u6765\u5bfc\u51fa\u8fd9\u4e9b\u5e38\u6570\u3002</p> <p>EXAMPLE 3.5 For  r = 10 and digit set [\u22125, 9], we need  \u03bb \u2265 5 / 9 and  \u00b5 \u2265 1. Given minimal values for  \u03bb  and  \u00b5  that minimize the hardware complexity, we find by choosing the minimal values for  \u03bb  and  \u00b5</p> <p>\u4f8b 3.5 \u5bf9\u4e8e r = 10 \u548c\u6570\u5b57\u96c6 [\u22125, 9]\uff0c\u6211\u4eec\u9700\u8981 \\(\u03bb \u2265 5 / 9\\) \u4e14 \\(\u00b5 \u2265 1\\)\u3002\u7ed9\u5b9a \u03bb \u548c \u00b5 \u7684\u6700\u5c0f\u503c\u4ee5\u6700\u5c0f\u5316\u786c\u4ef6\u590d\u6742\u6027\uff0c\u6211\u4eec\u901a\u8fc7\u9009\u62e9 \u03bb \u548c \u00b5 \u7684\u6700\u5c0f\u503c\u6765\u627e\u5230</p> \\[ \\begin{array}{c} \\lambda_{min}=\\mu_{min}=1 \\text{ \u5c31\u662f\u8bf4\u4f20\u8f93\u7684\u6570\u5b57\u662f\u5728[-1, 1]\u4e2d} \\\\ -\\infty=C_{-1} \\text{, } -4\\le C_0 \\le -1\\text{, }  6 \\le C_1 \\le 9\\text{, }  C_2=+\\infty \\end{array} \\] <p>We next show how the allowable values for the comparison constant C 1, shown above, are derived. The position sum pi is in [\u221210, 18]. We can set ti+1 to 1 for pi values as low as 6; for pi = 6, the resulting interim sum of \u22124 can absorb any incoming transfer in [\u22121, 1] without falling outside [\u22125, 9]. On the other hand, we must transfer 1 for pi values of 9 or more. Thus, for pi \u2265 C 1, where 6 \u2264 C 1 \u2264 9, we choose an outgoing transfer of 1. Similarly, for pi &lt; C 0, we choose an outgoing transfer of \u22121, where \u22124 \u2264 C 0 \u2264 \u22121. In all other cases, the outgoing transfer is 0.</p> <p>\u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u5c55\u793a\u5982\u4f55\u5bfc\u51fa\u4e0a\u9762\u6240\u793a\u7684\u6bd4\u8f83\u5e38\u6570 \\(C_1\\) \u7684\u5141\u8bb8\u503c\u3002\u4f4d\u7f6e\u548c \\(p_i\\) \u5728 [\u221210, 18] \u4e2d\u3002\u5bf9\u4e8e\u4f4e\u81f3 6 \u7684 \\(p_i\\) \u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 \\(t_{i+1}\\) \u8bbe\u7f6e\u4e3a 1\uff1b\u5bf9\u4e8e \\(p_i = 6\\)\uff0c\u6240\u5f97\u7684\u4e34\u65f6\u548c \\(-4\\) \u53ef\u4ee5\u5438\u6536 [\u22121, 1] \u4e2d\u7684\u4efb\u4f55\u4f20\u5165\u4f20\u8f93\uff0c\u800c\u4e0d\u4f1a\u843d\u5728 [\u22125, 9] \u4e4b\u5916\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5f53 \\(p_i\\) \u503c\u4e3a 9 \u6216\u66f4\u5927\u65f6\uff0c\u6211\u4eec\u5fc5\u987b\u4f20\u8f93 1\u3002\u56e0\u6b64\uff0c\u5bf9\u4e8e \\(p_i \u2265 C_1\\)\uff0c\u5176\u4e2d \\(6 \u2264 C_1 \u2264 9\\)\uff0c\u6211\u4eec\u9009\u62e9\u4f20\u51fa\u4f20\u8f93\u4e3a 1\u3002\u7c7b\u4f3c\u5730\uff0c\u5bf9\u4e8e \\(p_i &lt; C_0\\)\uff0c\u6211\u4eec\u9009\u62e9 \\(-1\\) \u7684\u4f20\u51fa\u4f20\u8f93\uff0c\u5176\u4e2d \\(-4 \u2264 C_0 \u2264 -1\\)\u3002\u5728\u6240\u6709\u5176\u4ed6\u60c5\u51b5\u4e0b\uff0c\u4f20\u51fa\u4f20\u8f93\u5747\u4e3a 0\u3002</p> <p>Assuming that the position sum pi is represented as a 6-bit, 2\u2019s-complement number abcdef , good choices for the comparison constants in the above ranges are C 0 = \u22124 and C 1 = 8. The logic expressions for the signals g 1 and g\u22121 then become g\u22121 = a(\u00af c \u2228 \u00af d)</p> <p>\u5047\u8bbe\u4f4d\u7f6e\u548c \\(p_i\\) \u8868\u793a\u4e3a 6 \u4f4d\u30012 \u7684\u8865\u6570 \\(abcdef\\) \uff0c\u5219\u4e0a\u8ff0\u8303\u56f4\u5185\u7684\u6bd4\u8f83\u5e38\u6570\u7684\u8f83\u597d\u9009\u62e9\u662f \\(C_0 = \u22124\\) \u548c \\(C_1 = 8\\)\u3002\u4fe1\u53f7 \\(g_1\\) \u548c \\(g_{\u22121}\\) \u7684\u903b\u8f91\u8868\u8fbe\u5f0f\u53d8\u4e3a </p> <p>\\(g_{\u22121} = a(\\overline c \\vee \\overline d)\\)   \u751f\u6210\u22121 \u7684\u4f20\u8f93</p> <p>\\(g_1 = \\overline a (b \\vee c)\\)  \u751f\u62101\u7684\u8f6c\u8d26</p> <p>An example addition is shown in Fig. 3.11.</p> <p>\u56fe 3.11 \u663e\u793a\u4e86\u53e6\u5916\u4e00\u4e2a\u793a\u4f8b\u3002</p> <p></p> <p>It is proven in [Parh90] that the preceding carry-free addition algorithm is applicable to a redundant representation if and only if one of the following sets of conditions is satisfied:</p> <p>[Parh90]\u4e2d\u8bc1\u660e\uff0c\u5f53\u4e14\u4ec5\u5f53\u6ee1\u8db3\u4ee5\u4e0b\u4e00\u7ec4\u6761\u4ef6\u4e4b\u4e00\u65f6\uff0c\u524d\u8ff0\u65e0\u8fdb\u4f4d\u52a0\u6cd5\u7b97\u6cd5\u624d\u9002\u7528\u4e8e\u5197\u4f59\u8868\u793a\uff1a</p> <p>a. \\(r \\gt 2\uff0c\u03c1 \\ge 3\\)</p> <p>b. \\(r \\gt 2\uff0c\u03c1 = 2\uff0c\u03b1 \\ne 1\uff0c\u03b2 \\ne 1\\)</p> <p>In other words, the carry-free algorithm is not applicable for  r = 2,  \u03c1 = 1, or  \u03c1 = 2 with  \u03b1 = 1 or  \u03b2 = 1. In such cases, a limited-carry addition algorithm is available: </p> <p>\u6362\u53e5\u8bdd\u8bf4\uff0c\u65e0\u8fdb\u4f4d\u7b97\u6cd5\u4e0d\u9002\u7528\u4e8e \\(r = 2\u3001\u03c1 = 1\\) \u6216 \\(\u03c1 = 2\\)\u5176\u4e2d \u03b1 = 1 \u6216 \u03b2 = 1\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u4f7f\u7528\u6709\u9650\u8fdb\u4f4d\u52a0\u6cd5\u7b97\u6cd5\uff1a</p> <p>Limited-carry addition algorithm for GSD numbers </p> <p>Compute the position sums  pi =  xi +  yi. </p> <p>Compare each  pi  to a constant to determine whether  ei+1 = \u201clow\u201d or \u201chigh\u201d ( ei+1 is a binary range estimate for  ti+1). </p> <p>Given  ei, divide each  pi  into a transfer  ti+1 and an interim sum  wi =  pi \u2212  rti+1. </p> <p>Add the incoming transfers to obtain the sum digits  si =  wi +  ti. </p> <p>GSD \u6570\u5b57\u7684\u6709\u9650\u8fdb\u4f4d\u52a0\u6cd5\u7b97\u6cd5</p> <ul> <li> <p>\u8ba1\u7b97\u4f4d\u7f6e\u603b\u548c \\(p_i = x_i + y_i\\)\u3002</p> </li> <li> <p>\u5c06\u6bcf\u4e2a \\(p_i\\) \u4e0e\u5e38\u6570\u8fdb\u884c\u6bd4\u8f83\uff0c\u4ee5\u786e\u5b9a \\(e_{i+1}\\) =\u201c\u4f4e\u201d\u8fd8\u662f\u201c\u9ad8\u201d\uff08\\(e_{i+1}\\) \u662f \\(t_{i+1}\\) \u7684\u4e8c\u8fdb\u5236\u8303\u56f4\u4f30\u8ba1\u503c\uff09\u3002</p> </li> <li> <p>\u7ed9\u5b9a \\(e_i\\)\uff0c\u5c06\u6bcf\u4e2a \\(p_i\\) \u5206\u4e3a\u4f20\u8f93 \\(t_{i+1}\\) \u548c\u4e34\u65f6\u548c \\(w_i = p_i \u2212 rt_{i+1}\\)\u3002</p> </li> <li> <p>\u5c06\u4f20\u5165\u4f20\u8f93\u76f8\u52a0\u4ee5\u83b7\u5f97\u6570\u5b57\u603b\u548c \\(s_i = w_i + t_i\\)\u3002</p> </li> </ul> <p>This \u201climited-carry\u201d GSD addition algorithm is depicted in Fig. 3.12a; in an alternative implementation (Fig. 3.12b), the \u201ctransfer estimate\u201d stage is replaced by another transfer generation/addition phase. </p> <p>\u8fd9\u79cd\u201c\u6709\u9650\u8fdb\u4f4d\u201dGSD \u6dfb\u52a0\u7b97\u6cd5\u5982\u56fe 3.12a \u6240\u793a\uff1b\u5728\u66ff\u4ee3\u5b9e\u73b0\u4e2d\uff08\u56fe3.12b\uff09\uff0c\u201c\u4f20\u8f93\u4f30\u8ba1\u201d\u9636\u6bb5\u88ab\u53e6\u4e00\u4e2a\u4f20\u8f93\u751f\u6210/\u6dfb\u52a0\u9636\u6bb5\u53d6\u4ee3\u3002</p> <p></p> <p>Even though Figs. 3.12a and 3.12b appear similar, they are quite different in terms of the internal designs of the square boxes in the top and middle rows. In both cases, however, the sum digit  si  depends on  xi,  yi,  xi\u22121,  yi\u22121,  xi\u22122, and  yi\u22122. Rather than wait for the limited transfer propagation from stage  i \u2212 2 to  i, one can try to provide the necessary information directly from stage i \u2212 2 to stage i. This leads to an implementation with parallel carries\\(t_{i+1}^{(1)}\\) and \\(t_{i+1}^{(2)}\\) from stage i, which is sometimes applicable (Fig. 3.12c).</p> <p>\u5c3d\u7ba1 3.12a\u548c3.12b\u770b\u8d77\u6765\u5f88\u76f8\u4f3c\uff0c\u4f46\u5728\u9876\u6392\u548c\u4e2d\u95f4\u6392\u7684\u65b9\u6846\u7684\u5185\u90e8\u8bbe\u8ba1\u65b9\u9762\u5b83\u4eec\u6709\u5f88\u5927\u4e0d\u540c\u3002\u7136\u800c\uff0c\u5728\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e0b\uff0c\u603b\u548c\u6570\u5b57 \\(s_i\\) \u53d6\u51b3\u4e8e \\(x_i\u3001y_i\u3001x_{i\u22121}\u3001y_{i\u22121}\u3001x_{i\u22122}\\) \u548c \\(y_{i\u22122}\\)\u3002\u4e0e\u5176\u7b49\u5f85\u4ece\u7b2c i \u2212 2 \u9636\u6bb5\u5230\u7b2c i \u9636\u6bb5\u7684\u6709\u9650\u4f20\u8f93\u4f20\u64ad\uff0c\u4e0d\u5982\u5c1d\u8bd5\u63d0\u4f9b\u5fc5\u8981\u7684\u4fe1\u606f\u76f4\u63a5\u4ece\u9636\u6bb5 \\(i \u2212 2\\) \u4f20\u9012\u5230\u9636\u6bb5 \\(i\\)\u3002\u8fd9\u5bfc\u51fa\u4e00\u4e2a\u5b9e\u73b0\u662f\u5e76\u884c\u627f\u8f7d\u6765\u81ea\u9636\u6bb5 \\(i\\) \u7684\u4e24\u4e2a\u8fdb\u4f4d\\(t_{i+1}^{(1)}\\)\u548c \\(t_{i+2}^{(2)}\\)\uff0c\u8fd9\u6709\u65f6\u662f\u9002\u7528\u7684\uff08\u56fe 3.12c\uff09\u3002</p> <p>EXAMPLE 3.6 Figure 3.13 depicts the use of carry estimates in limited-carry addition of radix-2 numbers with the digit set [\u22121, 1]. Here we have  \u03c1 = 1,  \u03bb min = 1, and  \u00b5 min = 1. The \u201clow\u201d and \u201chigh\u201d subranges for transfer digits are [\u22121, 0] and [0, 1], respectively, with a transfer  ti+1 in \u201chigh\u201d indicated if  pi \u2265 0. </p> <p>\u793a\u4f8b3.6 \u56fe3.13 \u63cf\u8ff0\u4e86\u6570\u5b57\u96c6[\u22121, 1] \u7684\u57fa2 \u6570\u7684\u6709\u9650\u8fdb\u4f4d\u52a0\u6cd5\u4e2d\u8fdb\u4f4d\u4f30\u8ba1\u7684\u4f7f\u7528\u3002\u8fd9\u91cc\u6211\u4eec\u6709 \\(\u03c1 = 1\uff0c\u03bb_{min} = 1\uff0c\u03bc_{min} = 1\\)\u3002\u4f20\u8f93\u6570\u5b57\u7684\u201c\u4f4e\u201d\u548c\u201c\u9ad8\u201d\u5b50\u8303\u56f4\u5206\u522b\u4e3a [\u22121, 0] \u548c [0, 1]\uff0c\u5982\u679c \\(p_i \u2265 0\\)\uff0c\u5219\u8868\u793a\u201c\u9ad8\u201d\u4e2d\u7684\u4f20\u8f93 \\(t_{i+1}\\)\u3002</p> <p></p> <p>\u56fe 3.13 \u901a\u8fc7\u8fdb\u4f4d\u4f30\u8ba1\u5bf9\u6570\u5b57\u96c6 [\u22121, 1] \u7684\u57fa 2 \u6570\u8fdb\u884c\u6709\u9650\u8fdb\u4f4d\u52a0\u6cd5\u3002\u5f53\u4f20\u5165\u4f20\u8f93\u4f4d\u4e8e [0, 1] \u65f6\uff0c\u4f4d\u7f6e\u548c -1 \u4fdd\u6301\u4e0d\u53d8\uff0c\u800c\u5982\u679c\u4f20\u5165\u4f20\u8f93\u4f4d\u4e8e [\u22121, 0]\uff0c\u5219\u5c06\u5176\u91cd\u5199\u4e3a 1\uff0c\u8fdb\u4f4d\u4e3a -1\u3002\u8be5\u65b9\u6848\u4fdd\u8bc1 \\(t_i = w_i\\)\uff0c\u56e0\u6b64 \\(-1 \u2264 s_i \u2264 1\\)\u3002</p> <p>EXAMPLE 3.7 Figure 3.14 shows another example of limited-carry addition with  r = 2, digit set [0, 3],  \u03c1 = 2,  \u03bb min = 0, and  \u00b5 min = 3, using carry estimates. The \u201clow\u201d and \u201chigh\u201d subranges for transfer digits are [0, 2] and [1, 3], respectively, with a transfer  ti+1 in \u201chigh\u201d indicated if  pi \u2265 4. </p> <p>\u793a\u4f8b3.7 \u56fe3.14 \u663e\u793a\u4e86\u4f7f\u7528\u8fdb\u4f4d\u4f30\u8ba1\u7684\u9650\u5236\u8fdb\u4f4d\u52a0\u6cd5\u7684\u53e6\u4e00\u4e2a\u793a\u4f8b\uff0c\u5176\u4e2d\\(r = 2\\)\u3001\u6570\u5b57\u96c6[0, 3]\u3001\\(\u03c1 = 2\u3001\u03bb_{min} = 0 \u548c\u03bc_{min} = 3\\)\u3002 \u4f20\u8f93\u6570\u5b57\u7684\u201c\u9ad8\u201d\u548c\u201c\u4f4e\u201d\u5b50\u8303\u56f4\u5206\u522b\u4e3a [0, 2] \u548c [1, 3]\uff0c\u5176\u4e2d\u4f20\u8f93 \\(t_{i+1}\\) \u5982\u679c \\(p_i \u2265 4\\)\uff0c\u5219\u8868\u793a\u201c\u9ad8\u201d\u3002</p> <p></p> <p>\u56fe 3.14 \u901a\u8fc7\u8fdb\u4f4d\u4f30\u8ba1\u5bf9\u6570\u5b57\u96c6 [0, 3] \u7684\u57fa 2 \u6570\u8fdb\u884c\u6709\u9650\u8fdb\u4f4d\u52a0\u6cd5\u3002\u5f53\u4f20\u5165\u4f20\u8f93\u4f4d\u4e8e [0, 2] \u65f6\uff0c\u4f4d\u7f6e\u548c 1 \u4fdd\u6301\u4e0d\u53d8\uff0c\u800c\u5982\u679c\u4f20\u5165\u4f20\u8f93\u4f4d\u4e8e [1, 3]\uff0c\u5219\u5c06\u5176\u91cd\u5199\u4e3a -1\uff0c\u8fdb\u4f4d\u4e3a 1\u3002</p> <p>EXAMPLE 3.8 Figure 3.15 shows the same addition as in Example 3.7 ( r = 2, digit set [0, 3],  \u03c1 = 2,  \u03bb min = 0,  \u00b5 min = 3) using the repeated-carry scheme of Fig. 3.12b. </p> <p>\u4f8b 3.8 \u56fe 3.15 \u663e\u793a\u4e86\u4e0e\u4f8b 3.7 \u76f8\u540c\u7684\u52a0\u6cd5\uff08 \\(r = 2\\)\uff0c\u6570\u5b57\u96c6 [0, 3], \\(\u03c1 = 2, \u03bb_{min} = 0, \u00b5_{min} = 3\\)) \u4f7f\u7528\u56fe 3.12b \u7684\u91cd\u590d\u8fdb\u4f4d\u65b9\u6848\u3002</p> <p></p> <p>EXAMPLE 3.9 Figure 3.16 shows the same addition as in Example 3.7 ( r = 2, digit set [0, 3],  \u03c1 = 2,  \u03bb min = 0,  \u00b5 min = 3) using the parallel-carries scheme of Fig. 3.12c. </p> <p>\u4f8b 3.9 \u56fe 3.16 \u663e\u793a\u4e86\u4e0e\u4f8b 3.7 \u76f8\u540c\u7684\u52a0\u6cd5\uff08 \\(r = 2\\)\uff0c\u6570\u5b57\u96c6 [0, 3], \\(\u03c1 = 2, \u03bb_{min} = 0, \u00b5_{min} = 3\\)) \u4f7f\u7528\u56fe 3.12c \u7684\u5e76\u884c\u8fdb\u4f4d\u65b9\u6848\u3002</p> <p></p> <p>Subtraction of GSD numbers is very similar to addition. With a symmetric digit set, one can simply invert the signs of all digits in the subtractor  y  to obtain a representation of \u2212 y and then perform the addition x+ (\u2212 y) using a carry-free or limited-carry algorithm as already discussed. Negation of a GSD number with an asymmetric digit set is somewhat more complicated, but can still be performed by means of a carry-free algorithm [Parh93].</p> <p>GSD \u6570\u5b57\u7684\u51cf\u6cd5\u4e0e\u52a0\u6cd5\u975e\u5e38\u76f8\u4f3c\u3002\u5bf9\u4e8e\u5bf9\u79f0\u6570\u5b57\u96c6\uff0c\u53ef\u4ee5\u7b80\u5355\u5730\u53cd\u8f6c\u51cf\u6cd5\u5668 \\(y\\) \u4e2d\u6240\u6709\u6570\u5b57\u7684\u7b26\u53f7\u4ee5\u83b7\u5f97\\(\u2212y\\)\u7684\u8868\u793a\uff0c\u7136\u540e\u4f7f\u7528\u5df2\u7ecf\u8ba8\u8bba\u8fc7\u7684\u65e0\u8fdb\u4f4d\u6216\u6709\u9650\u8fdb\u4f4d\u7b97\u6cd5\u6267\u884c\u52a0\u6cd5 \\(x+ (\u2212 y)\\)\u3002\u5177\u6709\u975e\u5bf9\u79f0\u6570\u5b57\u96c6\u7684 GSD \u6570\u7684\u6c42\u53cd\u7a0d\u5fae\u590d\u6742\u4e00\u4e9b\uff0c\u4f46\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7\u65e0\u8fdb\u4f4d\u7b97\u6cd5 [Parh93] \u6765\u6267\u884c\u3002</p> <p>This algorithm basically converts a radix- r number from the digit set [\u2212 \u03b2, \u03b1], which results from changing the signs of the individual digits of y, to the original digit set [\u2212 \u03b1, \u03b2]. Alternatively, a direct subtraction algorithm can be applied by first computing position differences in [\u2212 \u03b1 \u2212 \u03b2, \u03b1 + \u03b2], then forming interim differences and transfer digits. Details are omitted here.</p> <p>\u57fa\u672c\u4e0a\u8be5\u7b97\u6cd5\u662f\u5c06\u57fa\u6570 r \u7684\u6570\u4ece\u6570\u5b57\u96c6 \\([\u2212 \u03b2, \u03b1]\\) \u8f6c\u6362\u4e3a\u539f\u59cb\u6570\u5b57\u96c6\\([\u2212 \u03b1, \u03b2]\\)\uff0c\u8be5\u6570\u5b57\u96c6\u662f\u901a\u8fc7\u66f4\u6539 y \u7684\u5404\u4e2a\u6570\u5b57\u7684\u7b26\u53f7\u800c\u4ea7\u751f\u7684\u3002\u6216\u8005\u4e5f\u53ef\u4ee5\u901a\u8fc7\u9996\u5148\u8ba1\u7b97 [\u2212 \u03b1 \u2212 \u03b2, \u03b1 + \u03b2] \u4e2d\u7684\u4f4d\u7f6e\u5dee\uff0c\u7136\u540e\u5f62\u6210\u4e34\u65f6\u5dee\u5e76\u4f20\u8f93\u6570\u5b57\u6765\u5e94\u7528\u76f4\u63a5\u51cf\u6cd5\u7b97\u6cd5\u3002\u6b64\u5904\u7701\u7565\u8be6\u7ec6\u5185\u5bb9\u3002</p>"},{"location":"Part_01/03/#36","title":"3.6 \u8f6c\u6362\u548c\u652f\u6301\u529f\u80fd","text":"<p>Since input numbers provided from the outside (machine or human interface) are in standard binary or decimal and outputs must be presented in the same way, conversions between binary or decimal and GSD representations are required.</p> <p>\u7531\u4e8e\u4ece\u5916\u90e8\uff08\u673a\u5668\u6216\u4eba\u673a\u754c\u9762\uff09\u63d0\u4f9b\u7684\u8f93\u5165\u6570\u5b57\u662f\u6807\u51c6\u4e8c\u8fdb\u5236\u6216\u5341\u8fdb\u5236\uff0c\u5e76\u4e14\u8f93\u51fa\u5fc5\u987b\u4ee5\u76f8\u540c\u7684\u65b9\u5f0f\u5448\u73b0\uff0c\u56e0\u6b64\u9700\u8981\u4e8c\u8fdb\u5236\u6216\u5341\u8fdb\u5236\u4e0e GSD \u8868\u793a\u4e4b\u95f4\u7684\u8f6c\u6362\u3002</p> <p>EXAMPLE 3.10 Consider number conversions from or to standard binary to or from BSD representation. To convert from signed binary to BSD, we simply attach the common number sign to each digit, if the ( s, v) code of Fig. 3.7 is to be used for the BSD digits. Otherwise, we need a simple digitwise converter from the ( s, v) code to the desired code. To convert from BSD to signed binary, we separate the positive and negative digits into a positive and a negative binary number, respectively. A subtraction then yields the desired result. Here is an example:</p> <p>\u793a\u4f8b3.10 \u8003\u8651\u6807\u51c6\u4e8c\u8fdb\u5236\u4e0eBSD\u8868\u793a\u4e4b\u95f4\u7684\u6570\u5b57\u8f6c\u6362\u3002</p> <p>\u4e3a\u4e86\u4ece\u6709\u7b26\u53f7\u4e8c\u8fdb\u5236\u8f6c\u6362\u4e3a BSD\uff0c\u5982\u679c\u56fe 3.7 \u7684 (s, v) \u4ee3\u7801\u7528\u4e8e BSD \u6570\u5b57\uff0c\u6211\u4eec\u53ea\u9700\u5c06\u516c\u5171\u6570\u5b57\u7b26\u53f7\u9644\u52a0\u5230\u6bcf\u4e2a\u6570\u5b57\u4e0a\u3002\u5426\u5219\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u7b80\u5355\u7684\u6570\u5b57\u8f6c\u6362\u5668\uff0c\u5c06 ( s, v) \u4ee3\u7801\u8f6c\u6362\u4e3a\u6240\u9700\u7684\u7f16\u7801\u3002</p> <p>\u4e3a\u4e86\u4ece BSD \u8f6c\u6362\u4e3a\u6709\u7b26\u53f7\u4e8c\u8fdb\u5236\uff0c\u6211\u4eec\u5c06\u6b63\u6570\u548c\u8d1f\u6570\u5206\u522b\u5206\u6210\u6b63\u4e8c\u8fdb\u5236\u6570\u548c\u8d1f\u4e8c\u8fdb\u5236\u6570\u3002\u7136\u540e\u8fdb\u884c\u51cf\u6cd5\u5373\u53ef\u5f97\u5230\u6240\u9700\u7684\u7ed3\u679c\u3002\u8fd9\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a</p> <pre><code>1 \u22121  0 \u22121  0  +6 \u7684 BSD \u8868\u793a BSD representation of +6 \n1  0  0  0  0  \u6b63\u6570\u90e8\u5206\uff08+1\u5904\u7684\u4f4d\uff09Positive part (1 digits)\n0  1  0  1  0  \u8d1f\u6570\u90e8\u5206\uff08\u22121\u5904\u7684\u4f4d\uff09Negative part (\u22121 digits)\n0  0  1  1  0  \u5dee\u503c=\u8f6c\u6362\u7ed3\u679c Difference = conversion result\n</code></pre> <p>The positive and negative parts required above are particularly easy to obtain if the BSD number is represented using the ( n, p) code of Fig. 3.7. The reader should be able to modify the process above for dealing with numbers, or deriving results, in 2\u2019s-complement format.</p> <p>\u5982\u679c BSD \u6570\u5b57\u4f7f\u7528\u56fe 3.7 \u7684 (n, p) \u4ee3\u7801\u8868\u793a\u7684\u8bdd\uff0c\u4e0a\u8ff0\u6240\u9700\u7684\u6b63\u8d1f\u90e8\u5206\u7279\u522b\u5bb9\u6613\u83b7\u5f97\u3002\u8bfb\u8005\u5e94\u8be5\u80fd\u591f\u4fee\u6539\u4e0a\u8ff0\u8fc7\u7a0b\uff0c\u4ee5 2 \u7684\u8865\u7801\u683c\u5f0f\u5904\u7406\u6570\u5b57\u6216\u5bfc\u51fa\u7ed3\u679c\u3002</p> <p>The conversion from redundant to nonredundant representation essentially involves carry propagation and is thus rather slow. It is expected, however, that we will not need conversions very often. Conversion is done at the input and output. Thus, if long sequences of computation are performed between input and output, the conversion overhead can become negligible. </p> <p>\u4ece\u5197\u4f59\u8868\u793a\u5230\u975e\u5197\u4f59\u8868\u793a\u7684\u8f6c\u6362\u672c\u8d28\u4e0a\u6d89\u53ca\u8fdb\u4f4d\u4f20\u64ad\uff0c\u56e0\u6b64\u76f8\u5f53\u6162\u3002\u7136\u800c\uff0c\u9884\u8ba1\u6211\u4eec\u4e0d\u4f1a\u7ecf\u5e38\u9700\u8981\u8f6c\u6362\u3002\u8f6c\u6362\u5728\u8f93\u5165\u548c\u8f93\u51fa\u5904\u5b8c\u6210\u3002\u56e0\u6b64\uff0c\u5982\u679c\u5728\u8f93\u5165\u548c\u8f93\u51fa\u4e4b\u95f4\u6267\u884c\u957f\u5e8f\u5217\u7684\u8ba1\u7b97\uff0c\u5219\u8f6c\u6362\u5f00\u9500\u53ef\u4ee5\u5ffd\u7565\u4e0d\u8ba1\u3002</p> <p>Storage overhead (the larger number of bits that may be needed to represent a GSD digit compared to a standard digit in the same radix) used to be a major disadvantage of redundant representations. However, with advances in VLSI (very large-scale integration) technology, this is no longer a major drawback; though the increase in the number of pins for input and output may still be a factor.</p> <p>\u5b58\u50a8\u5f00\u9500\uff08GSD\u8868\u793a\u4e0e\u76f8\u540c\u57fa\u6570\u4e2d\u7684\u6807\u51c6\u6570\u5b57\u8868\u793a\u76f8\u6bd4\uff0c\u53ef\u80fd\u9700\u8981\u7684\u8f83\u5927\u4f4d\u6570\u7684\u6570\u5b57\uff09\u66fe\u7ecf\u662f\u5197\u4f59\u8868\u793a\u7684\u4e3b\u8981\u7f3a\u70b9\u3002\u7136\u800c\uff0c\u968f\u7740VLSI\uff08\u8d85\u5927\u89c4\u6a21\u96c6\u6210\uff09\u6280\u672f\u7684\u8fdb\u6b65\uff0c\u8fd9\u4e0d\u518d\u662f\u4e00\u4e2a\u4e3b\u8981\u7f3a\u70b9\uff1b\u5c3d\u7ba1\u8f93\u5165\u548c\u8f93\u51fa\u5f15\u811a\u6570\u91cf\u7684\u589e\u52a0\u53ef\u80fd\u4ecd\u7136\u662f\u4e00\u4e2a\u56e0\u7d20\u3002</p> <p>In the rest of this section, we review some properties of GSD representations that are important for the implementation of arithmetic support functions: zero detection, sign test, and overflow handling [Parh93]. </p> <p>\u5728\u672c\u8282\u7684\u5176\u4f59\u90e8\u5206\u4e2d\uff0c\u6211\u4eec\u5c06\u56de\u987e GSD \u8868\u793a\u7684\u4e00\u4e9b\u5bf9\u4e8e\u7b97\u672f\u652f\u6301\u51fd\u6570\u7684\u5b9e\u73b0\u5f88\u91cd\u8981\u7684\u5c5e\u6027\uff1a\u96f6\u68c0\u6d4b\u3001\u7b26\u53f7\u6d4b\u8bd5\u548c\u6ea2\u51fa\u5904\u7406 [Parh93]\u3002</p> <p>In a GSD number system, the integer 0 may have multiple representations. For example, the three-digit numbers 0 0 0 and \u22121 4 0 both represent 0 in radix 4. However, in the special case of  \u03b1 &lt; r  and  \u03b2 &lt; r, zero is uniquely represented by the all-0s vector. So despite redundancy and multiple representations, comparison of numbers for equality can be simple in this common special case, since it involves subtraction and detecting the all-0s pattern. </p> <p>\u5728GSD\u6570\u5b57\u7cfb\u7edf\u4e2d\uff0c\u6574\u65700\u53ef\u4ee5\u6709\u591a\u79cd\u8868\u793a\u5f62\u5f0f\u3002\u4f8b\u5982\uff0c\u4e09\u4f4d\u6570 0 0 0 \u548c \u22121 4 0 \u90fd\u8868\u793a\u57fa\u6570 4 \u4e2d\u7684 0\u3002\u4f46\u662f\uff0c\u5728 \u03b1 &lt; r \u548c \u03b2 &lt; r \u7684\u7279\u6b8a\u60c5\u51b5\u4e0b\uff0c\u96f6\u7531\u5168 0 \u5411\u91cf\u552f\u4e00\u8868\u793a\u3002\u56e0\u6b64\uff0c\u5c3d\u7ba1\u5b58\u5728\u5197\u4f59\u548c\u591a\u91cd\u8868\u793a\uff0c\u4f46\u5728\u8fd9\u79cd\u5e38\u89c1\u7684\u7279\u6b8a\u60c5\u51b5\u4e0b\uff0c\u6570\u5b57\u6bd4\u8f83\u662f\u5426\u76f8\u7b49\u53ef\u4ee5\u5f88\u7b80\u5355\uff0c\u56e0\u4e3a\u5b83\u6d89\u53ca\u51cf\u6cd5\u548c\u68c0\u6d4b\u5168 0 \u6a21\u5f0f\u3002</p> <p>Sign test, and thus any relational comparison ( &lt; , \u2264, etc.), is more difficult. The sign of a GSD number in general depends on all its digits. Thus sign test is slow if done through signal propagation (ripple design) or expensive if done by a fast lookahead circuit (contrast this with the trivial sign test for signed-magnitude and 2\u2019s-complement representations). In the special case of  \u03b1 &lt; r  and  \u03b2 &lt; r, the sign of a number is identical to the sign of its most significant nonzero digit. Even in this special case, determination of sign requires scanning of all digits, a process that can be as slow as worst-case carry propagation. </p> <p>\u7b26\u53f7\u6d4b\u8bd5\u4ee5\u53ca\u4efb\u4f55\u5173\u7cfb\u6bd4\u8f83\uff08&lt;\u3001\u2264\u7b49\uff09\u90fd\u66f4\u52a0\u56f0\u96be\u3002 GSD \u7f16\u53f7\u7684\u7b26\u53f7\u901a\u5e38\u53d6\u51b3\u4e8e\u5176\u6240\u6709\u6570\u5b57\u3002\u56e0\u6b64\uff0c\u5982\u679c\u901a\u8fc7\u4fe1\u53f7\u4f20\u64ad\uff08ripple\u7eb9\u6ce2\u8bbe\u8ba1\uff09\u8fdb\u884c\u7b26\u53f7\u6d4b\u8bd5\uff0c\u5219\u901f\u5ea6\u5f88\u6162\uff1b\u5982\u679c\u901a\u8fc7\u5feb\u901f\u5148\u884c\u7535\u8def\u8fdb\u884c\uff0c\u5219\u7b26\u53f7\u6d4b\u8bd5\u6210\u672c\u8f83\u9ad8\uff08\u4e0e\u7b26\u53f7\u5e45\u5ea6\u548c 2 \u8865\u7801\u8868\u793a\u7684\u7b80\u5355\u7b26\u53f7\u6d4b\u8bd5\u76f8\u6bd4\uff09\u3002\u5728 \u03b1 &lt; r \u548c \u03b2 &lt; r \u7684\u7279\u6b8a\u60c5\u51b5\u4e0b\uff0c\u6570\u5b57\u7684\u7b26\u53f7\u4e0e\u5176\u6700\u9ad8\u6709\u6548\u975e\u96f6\u6570\u5b57\u7684\u7b26\u53f7\u76f8\u540c\u3002\u5373\u4f7f\u5728\u8fd9\u79cd\u7279\u6b8a\u60c5\u51b5\u4e0b\uff0c\u786e\u5b9a\u7b26\u53f7\u4e5f\u9700\u8981\u626b\u63cf\u6240\u6709\u6570\u5b57\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u80fd\u4e0e\u6700\u574f\u60c5\u51b5\u7684\u8fdb\u4f4d\u4f20\u64ad\u4e00\u6837\u6162\u3002</p> <p>Overflow handling is also more difficult in GSD arithmetic. Consider the addition of two  k-digit numbers. Such an addition produces a transfer-out digit  tk . Since  tk  is produced using the worst-case assumption about the as yet unknown  tk\u22121, we can get an overflow indication ( tk = 0) even when the result can be represented with  k  digits.  It is possible to perform a test to see whether the overflow is real and, if it is not, to obtain a  k-digit representation for the true result. However, this test and conversion are fairly slow. </p> <p>GSD \u7b97\u6cd5\u4e2d\u7684\u6ea2\u51fa\u5904\u7406\u4e5f\u66f4\u52a0\u56f0\u96be\u3002\u8003\u8651\u4e24\u4e2a k \u4f4d\u6570\u5b57\u7684\u52a0\u6cd5\u3002\u8fd9\u6837\u7684\u52a0\u6cd5\u4ea7\u751f\u8f6c\u51fa\u6570\u5b57tk \u3002\u7531\u4e8e tk \u662f\u4f7f\u7528\u5173\u4e8e\u672a\u77e5 tk\u22121 \u7684\u6700\u574f\u60c5\u51b5\u5047\u8bbe\u751f\u6210\u7684\uff0c\u56e0\u6b64\u5373\u4f7f\u7ed3\u679c\u53ef\u4ee5\u7528 k \u4f4d\u6570\u5b57\u8868\u793a\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u83b7\u5f97\u6ea2\u51fa\u6307\u793a\uff08 tk = 0\uff09\u3002\u53ef\u4ee5\u6267\u884c\u6d4b\u8bd5\u6765\u67e5\u770b\u6ea2\u51fa\u662f\u5426\u771f\u5b9e\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u5219\u83b7\u5f97\u771f\u5b9e\u7ed3\u679c\u7684 k \u4f4d\u8868\u793a\u3002\u7136\u800c\uff0c\u8fd9\u4e2a\u6d4b\u8bd5\u548c\u8f6c\u6362\u76f8\u5f53\u7f13\u6162\u3002</p> <p>The difficulties with sign test and overflow detection can nullify some or all of the speed advantages of GSD number representations. This is why applications of GSD are presently limited to special-purpose systems or to internal number representations, which are subsequently converted to standard representation. </p> <p>\u7b26\u53f7\u6d4b\u8bd5\u548c\u6ea2\u51fa\u68c0\u6d4b\u7684\u56f0\u96be\u53ef\u80fd\u4f1a\u62b5\u6d88 GSD \u6570\u5b57\u8868\u793a\u7684\u90e8\u5206\u6216\u5168\u90e8\u901f\u5ea6\u4f18\u52bf\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48GSD\u76ee\u524d\u4ec5\u9650\u4e8e\u5e94\u7528\u5728\u4e13\u7528\u7cfb\u7edf\u6216\u5185\u90e8\u6570\u5b57\u8868\u793a\uff0c\u968f\u540e\u5c31\u4f1a\u8f6c\u6362\u4e3a\u6807\u51c6\u8868\u793a\u3002</p>"},{"location":"Part_01/03/#_1","title":"\u95ee\u9898\uff08\u7565\uff09","text":""},{"location":"Part_01/03/#_2","title":"\u53c2\u8003\u6587\u732e\u548c\u8fdb\u4e00\u6b65\u9605\u8bfb","text":"<pre><code>[Aviz61] Avizienis, A., \u201cSigned-Digit Number Representation for Fast Parallel Arithmetic,\u201d\n         IRE Trans. Electronic Computers, Vol. 10, pp. 389\u2013400, 1961.\n[Glas81] Glaser, A., History of Binary and Other Nondecimal Numeration, rev. ed., Tomash\n         Publishers, 1981.\n[Jabe05] Jaberipur, G., B. Parhami, and M. Ghodsi, \u201cWeighted Two-Valued Digit-Set\n         Encodings: Unifying Efficient Hardware Representation Schemes for Redundant\n         Number Systems,\u201d IEEE Trans. Circuits and Systems I, Vol. 52, No. 7,\n         pp. 1348\u20131357, 2005.\n[Jabe06] Jaberipur, G., B. Parhami, and M. Ghodsi, \u201cAn Efficient Universal Addition Scheme\n         for All Hybrid-Redundant Representations with Weighted Bit-Set Encoding,\u201d J. VLSI\n         Signal Processing, Vol. 42, pp. 149\u2013158, 2006.\n[Korn94] Kornerup, P., \u201cDigit-Set Conversions: Generalizations and Applications,\u201d IEEE\n         Trans. Computers, Vol. 43, No. 8, pp. 622\u2013629, 1994.\n[Metz59] Metze, G., and J. E. Robertson, \u201cElimination of Carry Propagation in Digital\n         Computers,\u201d Information Processing \u201959 (Proceedings of a UNESCO Conference),\n         1960, pp. 389\u2013396.\n[Parh88] Parhami, B., \u201cCarry-Free Addition of Recoded Binary Signed-Digit Numbers,\u201d IEEE\n         Trans. Computers, Vol. 37, No. 11, pp. 1470\u20131476, 1988.\n[Parh90] Parhami, B., \u201cGeneralized Signed-Digit Number Systems: A Unifying Framework for\n         Redundant Number Representations,\u201d IEEE Trans. Computers, Vol. 39, No. 1, pp.\n         89\u201398, 1990.\n[Parh93] Parhami, B., \u201cOn the Implementation of Arithmetic Support Functions for\n         Generalized Signed-Digit Number Systems,\u201d IEEE Trans. Computers, Vol. 42, No. 3,\n         pp. 379\u2013384, 1993.\n[Parh96] Parhami, B., \u201cComments on \u2018High-Speed Area-Efficient Multiplier Design Using\n         Multiple-Valued Current Mode Circuits,\u2019\u201d IEEE Trans. Computers, Vol. 45, No. 5,\n         pp. 637\u2013638, 1996.\n[Parh08] Parhami, B., \u201cDouble-Least-Significant-Bits 2\u2019s-Complement Number\n         Representation Scheme with Bitwise Complementation and Symmetric Range,\u201d IET\n         Circuits, Devices &amp; Systems, Vol. 2, No. 2, pp. 179\u2013186, 2008.\n[Phat94] Phatak, D. S., and I. Koren, \u201cHybrid Signed-Digit Number Systems: A Unified\n         Framework for Redundant Number Representations with Bounded Carry Propagation\n         Chains,\u201d IEEE Trans. Computers, Vol. 43, No. 8, pp. 880\u2013891, 1994.\n[Phat01] Phatak, D. S., T. Goff, and I. Koren, \u201cConstant-Time Addition and Simultaneous\n         Format Conversion Based on Redundant Binary Representations,\u201d IEEE Trans.\n         Computers, Vol. 50, No. 11, pp. 1267\u20131278, 2001.\n[Tenc06] Tenca, A. F., S. Park, and L. A. Tawalbeh, \u201cCarry-Save Representation Is\n         Shift-Unsafe: The Problem and Its Solution,\u201d IEEE Trans. Computers, Vol. 55, No. 5,\n         pp. 630\u2013635, 2006\n</code></pre>"},{"location":"Part_01/04/","title":"4 \u5269\u4f59\u6570\u7cfb\u7edf","text":"<p>Residue Number Systems</p> <p>\u201cGod created the integers, all else is the work of man\u201d </p> <p>\u200b                           \u2014\u2014 LEOPOLD KRONECKER , 1886</p> <p>\u201c\u4e0a\u5e1d\u521b\u9020\u4e86\u6574\u6570\uff0c\u5176\u4ed6\u4e00\u5207\u90fd\u662f\u4eba\u7c7b\u7684\u5de5\u4f5c\u201d</p> <p>\u200b                           \u2014\u2014 \u5229\u5965\u6ce2\u5fb7\u00b7\u514b\u7f57\u5185\u514b , 1886</p> <p>By converting arithmetic on large numbers to arithmetic on a collection of smaller numbers, residue number system (RNS) representations produce significant speedup for some classes of arithmetic-intensive algorithms in signal processing applications. Additionally, RNS arithmetic is a valuable tool for theoretical studies of the limits of fast arithmetic. In this chapter, we study RNS representations and arithmetic, along with their advantages and drawbacks. Chapter topics include:</p> <p>\u901a\u8fc7\u5c06\u5bf9\u4e8e\u5927\u6570\u7684\u7b97\u672f\u8f6c\u6362\u4e3a\u5bf9\u4e8e\u8f83\u5c0f\u6570\u96c6\u5408\u7684\u7b97\u672f\uff0c\u5269\u4f59\u6570\u6570\u7cfb\u7edf\uff08RNS\uff09\u8868\u793a\u5bf9\u4e8e\u4fe1\u53f7\u5904\u7406\u5e94\u7528\u4e2d\u67d0\u4e9b\u7c7b\u578b\u7684\u7b97\u672f\u5bc6\u96c6\u578b\u7b97\u6cd5\u4ea7\u751f\u663e\u8457\u7684\u52a0\u901f\u3002\u6b64\u5916\uff0cRNS \u7b97\u672f\u5bf9\u4e8e\u5feb\u901f\u7b97\u672f\u6781\u9650\u7684\u7406\u8bba\u7814\u7a76\u6765\u8bf4\u662f\u4e00\u4e2a\u5f88\u6709\u4ef7\u503c\u7684\u5de5\u5177\u3002\u5728\u672c\u7ae0\u4e2d\uff0c\u6211\u4eec\u7814\u7a76 RNS \u8868\u793a\u548c\u7b97\u6cd5\uff0c\u4ee5\u53ca\u5b83\u4eec\u7684\u4f18\u70b9\u548c\u7f3a\u70b9\u3002\u7ae0\u8282\u4e3b\u9898\u5305\u62ec\uff1a</p> <p>4.1 RNS\u8868\u793a\u548c\u7b97\u672f RNS Representation and Arithmetic</p> <p>4.2 \u9009\u62e9 RNS \u6a21\u6570 Choosing the RNS Moduli</p> <p>4.3 \u6570\u5b57\u7684\u7f16\u7801\u548c\u89e3\u7801 Encoding and Decoding of Numbers</p> <p>4.4 \u56f0\u96be\u7684RNS\u7b97\u672f\u8fd0\u7b97 Difficult RNS Arithmetic Operations</p> <p>4.5 \u5197\u4f59RNS\u8868\u793a Redundant RNS Representations</p> <p>4.6 RNS \u4e2d\u5feb\u901f\u7b97\u672f\u7684\u5c40\u9650\u6027 Limits of Fast Arithmetic in RNS</p>"},{"location":"Part_01/04/#41-rns","title":"4.1 RNS \u8868\u793a\u548c\u7b97\u6cd5","text":"<p>What number has the remainders of 2, 3, and 2 when divided by the numbers 7, 5, and 3, respectively? This puzzle, written in the form of a verse by the Chinese scholar Sun Tsu more than 1500 years ago [Jenk93], is perhaps the first documented use of number representation using multiple residues. The puzzle essentially asks us to convert the coded representation  ( 2|3|2 )  of a residue number system, based on the moduli  ( 7|5|3 ), into standard decimal format. </p> <p>\u54ea\u4e2a\u6570\u5b57\u5206\u522b\u9664\u4ee5\u6570\u5b57 7\u30015 \u548c 3 \u65f6\uff0c\u4f59\u6570\u4e3a 2\u30013 \u548c 2\uff1f\u8fd9\u4e2a\u8c1c\u9898\u7531\u4e2d\u56fd\u5b66\u8005\u5b59\u5b50\u5728 1500 \u591a\u5e74\u524d\u4ee5\u8bd7\u53e5\u7684\u5f62\u5f0f\u5199\u6210 [Jenk93]\uff0c\u53ef\u80fd\u662f\u7b2c\u4e00\u4e2a\u6709\u8bb0\u5f55\u7684\u4f7f\u7528\u591a\u4e2a\u4f59\u6570\u7684\u6570\u5b57\u8868\u793a\u5f62\u5f0f\u3002\u8be5\u96be\u9898\u672c\u8d28\u4e0a\u8981\u6c42\u6211\u4eec\u5c06\u57fa\u4e8e\u6a21\uff087|5|3 \uff09\u7684\u4f59\u6570\u7cfb\u7edf\u7684\u7f16\u7801\u8868\u793a\uff08 2|3|2 \uff09\u8f6c\u6362\u4e3a\u6807\u51c6\u5341\u8fdb\u5236\u683c\u5f0f\u3002</p> <p>In a residue number system (RNS), a number  x  is represented by the list of its residues with respect to  k  pairwise relatively prime moduli  mk\u22121  &gt; \u00b7 \u00b7 \u00b7  &gt; m 1  &gt; m 0. The residue xi  of  x  with respect to the  i th modulus  mi  is akin to a digit and the entire  k-residue representation of  x  can be viewed as a  k-digit number, where the digit set for the  i th position is [0,  mi \u2212 1]. Notationally, we write</p> <p>\u5728\u4f59\u6570\u7cfb\u7edf (RNS) \u4e2d\uff0c\u6570\u5b57 x \u7531\u5176\u76f8\u5bf9\u4e8e k \u4e2a\u6210\u5bf9\u4e92\u7d20\u6a21 \\(m_{k\u22121} &gt; \u00b7 \u00b7 \u00b7 &gt; m_1 &gt; m_0\\) \u7684\u4f59\u6570\u5217\u8868\u8868\u793a\u3002x \u76f8\u5bf9\u4e8e\u7b2c i \u4e2a\u6a21\u6570 \\(m_i\\) \u7684\u4f59\u6570 \\(x_i\\) \u7c7b\u4f3c\u4e8e\u4e00\u4e2a\u6570\u5b57\uff0c\u5e76\u4e14 x \u7684\u6574\u4e2a k \u4f59\u6570\u8868\u793a\u53ef\u4ee5\u89c6\u4e3a\u4e00\u4e2a k \u4f4d\u6570\u5b57\uff0c\u5176\u4e2d\u7b2c i \u4e2a\u4f4d\u7f6e\u7684\u6570\u5b57\u96c6\u662f [\\(0, m_{i \u2212 1}\\)]\u3002\u6211\u4eec\u8bb0\u4e3a</p> \\[ x_i = x \\mod m_i = \\left \\langle x  \\right \\rangle _{mi} \\] <p>and specify the RNS representation of  x  by enclosing the list of residues, or digits, in parentheses. For example, </p> <p>\u5e76\u901a\u8fc7\u5c06\u4f59\u6570\u6216\u6570\u5b57\u5217\u8868\u62ec\u5728\u62ec\u53f7\u4e2d\u6765\u6307\u5b9a x \u7684 RNS \u8868\u793a\u5f62\u5f0f\u3002\u4f8b\u5982\uff0c</p> \\[ x = ( 2|3|2 )_{RNS ( 7|5|3 )} \\] <p>represents the puzzle given at the beginning of this section. The list of moduli can be deleted from the subscript when we have agreed on a default set. In many of the examples of this chapter, the following RNS is assumed:</p> <p>\u4ee3\u8868\u672c\u8282\u5f00\u5934\u7ed9\u51fa\u7684\u96be\u9898\u3002\u5f53\u6211\u4eec\u5c31\u9ed8\u8ba4\u96c6\u8fbe\u6210\u4e00\u81f4\u65f6\uff0c\u53ef\u4ee5\u4ece\u4e0b\u6807\u4e2d\u5220\u9664\u6a21\u6570\u5217\u8868\u3002\u5728\u672c\u7ae0\u7684\u8bb8\u591a\u793a\u4f8b\u4e2d\uff0c\u5047\u8bbe\u4e86\u4ee5\u4e0b RNS\uff1a</p> <p>RNS ( 8|7|5|3 )      \u7b2c 4 \u7ae0\u7684\u9ed8\u8ba4 RNS</p> <p>The product  M  of the  k  pairwise relatively prime moduli is the number of different representable values in the RNS and is known as its  dynamic range. </p> <p>k \u4e2a\u6210\u5bf9\u4e92\u8d28\u6a21\u7684\u4e58\u79ef M \u662f RNS \u4e2d\u4e0d\u540c\u53ef\u8868\u793a\u503c\u7684\u6570\u91cf\uff0c\u79f0\u4e3a\u5176\u52a8\u6001\u8303\u56f4\u3002</p> \\[ M = m_{k\u22121} \u00d7 \u00b7 \u00b7 \u00b7 \u00d7 m_1 \u00d7 m_0 \\] <p>For example,  M = 8 \u00d7 7 \u00d7 5 \u00d7 3 = 840 is the total number of distinct values that are representable in our chosen 4-modulus RNS. Because of the equality</p> <p>\u4f8b\u5982\uff0c\\(M = 8 \u00d7 7 \u00d7 5 \u00d7 3 = 840\\) \u662f\u6211\u4eec\u9009\u62e9\u7684 4 \u6a21 RNS \u4e2d\u53ef\u8868\u793a\u7684\u4e0d\u540c\u503c\u7684\u603b\u6570\u3002\u56e0\u4e3a\u7b49\u5f0f</p> \\[ \\left \\langle -x \\right \\rangle _{m_i} = \\left \\langle M-x \\right \\rangle _{m_i} \\] <p>the 840 available values can be used to represent numbers 0 through 839, \u2212420 through +419, or any other interval of 840 consecutive integers. In effect, negative numbers are represented using a complement system with the complementation constant  M . </p> <p>840 \u4e2a\u53ef\u7528\u503c\u53ef\u7528\u4e8e\u8868\u793a\u6570\u5b57 0 \u5230 839\u3001-420 \u5230 +419\uff0c\u6216 840 \u4e2a\u8fde\u7eed\u6574\u6570\u7684\u4efb\u4f55\u5176\u4ed6\u533a\u95f4\u3002\u5b9e\u9645\u4e0a\uff0c\u8d1f\u6570\u662f\u4f7f\u7528\u5177\u6709\u8865\u7801\u5e38\u6570 M \u7684\u8865\u7801\u7cfb\u7edf\u6765\u8868\u793a\u7684\u3002</p> <p>Here are some example numbers in RNS ( 8|7|5|3 ):</p> <p>\u4ee5\u4e0b\u662f RNS \u4e2d\u7684\u4e00\u4e9b\u793a\u4f8b\u6570\u5b57 ( 8|7|5|3 )\uff1a</p> <pre><code>( 0 | 0 | 0 | 0 ) RNS \u4ee3\u88680\u6216840\u6216\u00b7\u00b7\u00b7\u00b7\n( 1 | 1 | 1 | 1 ) RNS \u4ee3\u88681\u6216841\u6216\u00b7\u00b7\u00b7\u00b7\n( 2 | 2 | 2 | 2 ) RNS \u4ee3\u88682\u6216842\u6216\u00b7\u00b7\u00b7\u00b7\n( 0 | 1 | 3 | 2 ) RNS \u4ee3\u88688\u6216848\u6216\u00b7\u00b7\u00b7\u00b7\n( 5 | 0 | 1 | 0 ) RNS \u4ee3\u886821\u6216861\u6216\u00b7\u00b7\u00b7\u00b7\n( 0 | 1 | 4 | 1 ) RNS \u4ee3\u886864\u6216904\u6216\u00b7\u00b7\u00b7\u00b7\n( 2 | 0 | 0 | 2 ) RNS \u4ee3\u8868\u221270\u6216770\u6216\u00b7\u00b7\u00b7\u00b7\n( 7 | 6 | 4 | 2 ) RNS \u4ee3\u8868\u22121\u6216839\u6216\u00b7\u00b7\u00b7\u00b7\n</code></pre> <p>Given the RNS representation of  x, the representation of \u2212 x  can be found by complementing each of the digits  xi  with respect to its modules  mi (0 digits are left unchanged). </p> <p>\u7ed9\u5b9a x \u7684 RNS \u8868\u793a\uff0c\u2212 x \u7684\u8868\u793a\u53ef\u4ee5\u901a\u8fc7\u5bf9\u6bcf\u4e2a\u6570\u5b57 xi \u76f8\u5bf9\u4e8e\u5176\u6a21\u5757 mi \u6c42\u8865\u6765\u627e\u5230\uff080 \u4f4d\u4fdd\u6301\u4e0d\u53d8\uff09\u3002</p> <p>Thus, given that 21 =  ( 5 | 0 | 1 | 0 ) RNS, we find</p> <p>\u56e0\u6b64\uff0c\u5047\u8bbe 21 = ( 5 | 0 | 1 | 0 ) RNS\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230</p> \\[ \u221221 = ( 8 \u2212 5 | 0 | 5 \u2212 1 | 0 )_{RNS} = ( 3 | 0 | 4 | 0 )_{RNS} \\] <p>Any RNS can be viewed as a weighted representation. We will present a general method for determining the position weights (the Chinese remainder theorem) in Section 4.3. For RNS ( 8|7|5|3 ), the weights associated with the four positions are</p> <p>\u4efb\u4f55 RNS \u90fd\u53ef\u4ee5\u88ab\u89c6\u4e3a\u52a0\u6743\u8868\u793a\u3002\u6211\u4eec\u5c06\u5728 4.3 \u8282\u4e2d\u63d0\u51fa\u786e\u5b9a\u4f4d\u7f6e\u6743\u91cd\u7684\u901a\u7528\u65b9\u6cd5\uff08\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\uff09\u3002\u5bf9\u4e8e RNS ( 8|7|5|3 )\uff0c\u4e0e\u56db\u4e2a\u4f4d\u7f6e\u76f8\u5173\u7684\u6743\u91cd\u4e3a </p> <p>\u200b          105     120    336    280</p> <p>As an example,  ( 1 | 2 | 4 | 0 ) RNS represents the number</p> <p>\u4f8b\u5982\uff0c( 1 | 2 | 4 | 0 ) RNS \u4ee3\u8868\u6570\u5b57</p> \\[ \\left \\langle (105\u00d71)+(120\u00d72)+(336\u00d74)+(280\u00d70) \\right \\rangle _{840}=\\left \\langle 1689 \\right \\rangle _{840}=9 \\] <p>In practice, each residue must be represented or encoded in binary. For our example RNS, such a representation would require 11 bits (Fig. 4.1). To determine the number representation efficiency of our 4-modulus RNS, we note that 840 different values are being represented using 11 bits, compared with 2048 values possible with binary representation. Thus, the representational efficiency is</p> <p>\u5b9e\u9645\u4e0a\uff0c\u6bcf\u4e2a\u4f59\u6570\u5fc5\u987b\u4ee5\u4e8c\u8fdb\u5236\u8868\u793a\u6216\u7f16\u7801\u3002\u5bf9\u4e8e\u6211\u4eec\u7684\u793a\u4f8b RNS\uff0c\u8fd9\u6837\u7684\u8868\u793a\u9700\u8981 11 \u4f4d\uff08\u56fe 4.1\uff09\u3002\u4e3a\u4e86\u786e\u5b9a 4 \u6a21 RNS \u7684\u6570\u5b57\u8868\u793a\u6548\u7387\uff0c\u6211\u4eec\u6ce8\u610f\u5230\u4f7f\u7528 11 \u4f4d\u8868\u793a\u4e86 840 \u4e2a\u4e0d\u540c\u7684\u503c\uff0c\u800c\u4e8c\u8fdb\u5236\u8868\u793a\u53ef\u80fd\u8868\u793a 2048 \u4e2a\u503c\u3002\u56e0\u6b64\uff0c\u8868\u5f81\u6548\u7387\u4e3a \\(840 / 2048 = 41\\%\\)</p> <p>Since log2 840 = 9.714, another way to quantify the representational efficiency is to note that in our example RNS, about 1.3 bits of the 11 bits go to waste. </p> <p>\u7531\u4e8e \\(\\log_2 840 = 9.714\\)\uff0c\u91cf\u5316\u8868\u793a\u6548\u7387\u7684\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f, \u672c\u4f8b\u4e2d\uff0c11 \u4f4d\u4e2d\u5927\u7ea6\u6709 1.3 \u4f4d\u88ab\u6d6a\u8d39\u4e86\u3002</p> <p></p> <p>\u56fe 4.1 RNS ( 8 | 7 | 5 | 3 ) \u7684\u4e8c\u8fdb\u5236\u7f16\u7801\u6570\u5b57\u683c\u5f0f </p> <p>As noted earlier, the sign of an RNS number can be changed by independently complementing each of its digits with respect to its modulus. Similarly, addition, subtraction, and multiplication can be performed by independently operating on each digit. The following examples for RNS ( 8 | 7 | 5 | 3 )  illustrate the process:</p> <p>\u5982\u524d\u6240\u8ff0\uff0cRNS \u7f16\u53f7\u7684\u7b26\u53f7\u53ef\u4ee5\u901a\u8fc7\u72ec\u7acb\u66f4\u6539\u5bf9\u6bcf\u4e2a\u6570\u5b57\u7684\u6a21\u6570\u6c42\u8865\u3002\u7c7b\u4f3c\u5730\uff0c\u52a0\u6cd5\u3001\u51cf\u6cd5\u548c\u4e58\u6cd5\u53ef\u4ee5\u901a\u8fc7\u5bf9\u6bcf\u4e2a\u6570\u5b57\u8fdb\u884c\u72ec\u7acb\u8fd0\u7b97\u6765\u8fdb\u884c\u3002\u4ee5\u4e0b RNS ( 8 | 7 | 5 | 3 ) \u793a\u4f8b\u8bf4\u660e\u4e86\u8be5\u8fc7\u7a0b\uff1a </p> <pre><code>( 5 | 5 | 0 | 2 ) RNS    \u4ee3\u8868x=+5\n( 7 | 6 | 4 | 2 ) RNS    \u8868\u793a y = \u22121\n( 4 | 4 | 4 | 1 ) RNS    x + y\uff1a(5 + 7) mod 8 = 4\u3001(5 + 6) mod 7 = 4 \u7b49\u3002\n( 6 | 6 | 1 | 0 ) RNS    x \u2212 y\uff1a(5 \u2212 7) mod 8 = 6\u3001(5 \u2212 6) mod 7 = 6 \u7b49\u3002\n                        \uff08\u6216\u8005\uff0c\u627e\u5230 -y \u5e76\u52a0\u4e0a x\uff09\n( 3 | 2 | 0 | 1 ) RNS    x \u00d7 y\uff1a5 \u00d7 78 = 3\u30015 \u00d7 67 = 2 \u7b49\u3002\n</code></pre> <p>Figure 4.2 depicts the structure of an adder, subtractor, or multiplier for RNS arithmetic. Since each digit is a relatively small number, these operations can be quite fast and simple in RNS. This speed and simplicity are the primary advantages of RNS arithmetic. In the case of addition, for example, carry propagation is limited to within a single residue (a few bits). Thus, RNS representation pretty much solves the carry-propagation problem. As for multiplication, a 4 \u00d7 4 multiplier for example is considerably more than four times simpler than a 16 \u00d7 16 multiplier, besides being much faster. In fact, since the residues are small (say, 6 bits wide), it is quite feasible to implement addition, subtraction, and multiplication by direct table lookup. With 6-bit residues, say, each operation requires a 4K \u00d7 6 table. Thus, excluding division, a complete arithmetic unit module for one 6-bit residue can be implemented with 9 KB of memory. </p> <p>\u56fe 4.2 \u63cf\u8ff0\u4e86 RNS \u7b97\u672f\u7684\u52a0\u6cd5\u5668\u3001\u51cf\u6cd5\u5668\u6216\u4e58\u6cd5\u5668\u7684\u7ed3\u6784\u3002\u7531\u4e8e\u6bcf\u4e2a\u6570\u5b57\u90fd\u662f\u4e00\u4e2a\u76f8\u5bf9\u8f83\u5c0f\u7684\u6570\u5b57\uff0c\u56e0\u6b64\u8fd9\u4e9b\u64cd\u4f5c\u5728 RNS \u4e2d\u53ef\u4ee5\u975e\u5e38\u5feb\u901f\u4e14\u7b80\u5355\u3002\u8fd9\u79cd\u901f\u5ea6\u548c\u7b80\u5355\u6027\u662f RNS \u7b97\u6cd5\u7684\u4e3b\u8981\u4f18\u70b9\u3002\u4f8b\u5982\uff0c\u5728\u52a0\u6cd5\u7684\u60c5\u51b5\u4e0b\uff0c\u8fdb\u4f4d\u4f20\u64ad\u4ec5\u9650\u4e8e\u5355\u4e2a\u4f59\u6570\uff08\u4e00\u4e9b\u6bd4\u7279\u4f4d\uff09\u3002\u56e0\u6b64\uff0cRNS \u8868\u793a\u51e0\u4e4e\u89e3\u51b3\u4e86\u8fdb\u4f4d\u4f20\u64ad\u95ee\u9898\u3002\u81f3\u4e8e\u4e58\u6cd5\uff0c\u4f8b\u5982 4 \u00d7 4 \u4e58\u6cd5\u5668\u6bd4 16 \u00d7 16 \u4e58\u6cd5\u5668\u7b80\u5355\u56db\u500d\u591a\uff0c\u800c\u4e14\u901f\u5ea6\u66f4\u5feb\u3002\u4e8b\u5b9e\u4e0a\uff0c\u7531\u4e8e\u4f59\u6570\u5f88\u5c0f\uff08\u6bd4\u59826\u4f4d\u5bbd\uff09\uff0c\u901a\u8fc7\u76f4\u63a5\u67e5\u8868\u6765\u5b9e\u73b0\u52a0\u6cd5\u3001\u51cf\u6cd5\u548c\u4e58\u6cd5\u662f\u76f8\u5f53\u53ef\u884c\u7684\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e 6 \u4f4d\u4f59\u6570\uff0c\u6bcf\u4e2a\u64cd\u4f5c\u90fd\u9700\u8981\u4e00\u4e2a 4K \u00d7 6 \u8868\u3002\u56e0\u6b64\uff0c\u9664\u4e86\u9664\u6cd5\u4e4b\u5916\uff0c\u4e00\u4e2a 6 \u4f4d\u4f59\u6570\u7684\u5b8c\u6574\u7b97\u672f\u5355\u5143\u6a21\u5757\u53ef\u4ee5\u7528 9 KB \u7684\u5185\u5b58\u6765\u5b9e\u73b0\u3002</p> <p></p> <p>Unfortunately, however, what we gain in terms of the speed and simplicity of addition, subtraction, and multiplication can be more than nullified by the complexity of division and the difficulty of certain auxiliary operations such as sign test, magnitude comparison, and overflow detection. Given the numbers</p> <p>\u7136\u800c\u4e0d\u5e78\u7684\u662f\uff0c\u6211\u4eec\u5728\u52a0\u6cd5\u3001\u51cf\u6cd5\u548c\u4e58\u6cd5\u7684\u901f\u5ea6\u548c\u7b80\u5355\u6027\u65b9\u9762\u6240\u83b7\u5f97\u7684\u6210\u679c\u53ef\u80fd\u4f1a\u88ab\u9664\u6cd5\u7684\u590d\u6742\u6027\u548c\u67d0\u4e9b\u8f85\u52a9\u64cd\u4f5c\uff08\u4f8b\u5982\u7b26\u53f7\u6d4b\u8bd5\u3001\u5e45\u5ea6\u6bd4\u8f83\u548c\u6ea2\u51fa\u68c0\u6d4b\uff09\u7684\u96be\u5ea6\u6240\u62b5\u6d88\u3002\u5bf9\u4e8e\u4e0b\u9762\u4e24\u4e2a\u6570\u5b57</p> <p>\u200b      ( 7 | 2 | 2 | 1 ) RNS   \u548c   ( 2 | 5 | 0 | 1 ) RNS</p> <p>we cannot easily tell their signs, determine which of the two is larger, or find out whether ( 1 | 0 | 2 | 2 ) RNS represents their true sum as opposed to the residue of their sum modulo 840. </p> <p>\u6211\u4eec\u65e0\u6cd5\u8f7b\u6613\u8fa8\u522b\u5b83\u4eec\u7684\u7b26\u53f7\uff0c\u786e\u5b9a\u4e24\u8005\u4e2d\u54ea\u4e00\u4e2a\u66f4\u5927\uff0c\u6216\u8005\u627e\u51fa ( 1 | 0 | 2 | 2 ) RNS \u662f\u5426\u4ee3\u8868\u5b83\u4eec\u7684\u771f\u5b9e\u548c\uff0c\u800c\u4e0d\u662f\u5b83\u4eec\u6a21 840 \u7684\u548c\u7684\u4f59\u6570\u3002</p> <p>These difficulties have thus far limited the application of RNS representations to certain signal processing problems in which additions and multiplications are used either exclusively or predominantly and the results are within known ranges (e.g., digital filters, Fourier transforms). We discuss division and other \u201cdifficult\u201d RNS operations in Section 4.4. </p> <p>\u8fc4\u4eca\u4e3a\u6b62\uff0c\u8fd9\u4e9b\u56f0\u96be\u9650\u5236\u4e86 RNS \u8868\u793a\u5728\u67d0\u4e9b\u4fe1\u53f7\u5904\u7406\u95ee\u9898\u4e2d\u7684\u5e94\u7528\uff0c\u5728\u8fd9\u4e9b\u95ee\u9898\u4e2d\uff0c\u4ec5\u4f7f\u7528\u52a0\u6cd5\u548c\u4e58\u6cd5\uff0c\u6216\u8005\u4e3b\u8981\u4f7f\u7528\u52a0\u6cd5\u548c\u4e58\u6cd5\uff0c\u5e76\u4e14\u7ed3\u679c\u5728\u5df2\u77e5\u8303\u56f4\u5185\uff08\u4f8b\u5982\uff0c\u6570\u5b57\u6ee4\u6ce2\u5668\u3001\u5085\u7acb\u53f6\u53d8\u6362\uff09\u3002\u6211\u4eec\u5728 4.4 \u8282\u4e2d\u8ba8\u8bba\u9664\u6cd5\u548c\u5176\u4ed6\u201c\u56f0\u96be\u201d\u7684 RNS \u64cd\u4f5c\u3002</p>"},{"location":"Part_01/04/#42-rns","title":"4.2 \u9009\u62e9 RNS \u6a21\u6570","text":"<p>The set of the moduli chosen for RNS affects both the representational efficiency and the complexity of arithmetic algorithms. In general, we try to make the moduli as small as possible, since it is the magnitude of the largest modulus  mk\u22121 that dictates the speed of arithmetic operations. We also often try to make all the moduli comparable in magnitude to the largest one, since with the computation speed already dictated by  mk\u22121, there is usually no advantage in fragmenting the design of Fig. 4.2 through the use of very small moduli at the right end. </p> <p>\u4e3a RNS \u9009\u62e9\u7684\u6a21\u96c6\u4f1a\u5f71\u54cd\u7b97\u672f\u7b97\u6cd5\u7684\u8868\u793a\u6548\u7387\u548c\u590d\u6742\u6027\u3002\u4e00\u822c\u6765\u8bf4\u6211\u4eec\u5c1d\u8bd5\u4f7f\u6a21\u91cf\u5c3d\u53ef\u80fd\u5c0f\uff0c\u8fd9\u662f\u53ef\u80fd\u7684\uff0c\u56e0\u4e3a\u6700\u5927\u6a21 \\(m_{k\u22121}\\) \u7684\u5927\u5c0f\u51b3\u5b9a\u4e86\u7b97\u672f\u8fd0\u7b97\u7684\u901f\u5ea6\u3002\u6211\u4eec\u8fd8\u7ecf\u5e38\u5c1d\u8bd5\u4f7f\u6240\u6709\u6a21\u6570\u5728\u5927\u5c0f\u4e0a\u4e0e\u6700\u5927\u6a21\u6570\u76f8\u5f53\uff0c\u56e0\u4e3a\u8ba1\u7b97\u901f\u5ea6\u5df2\u7ecf\u7531 \\(m_{k\u22121}\\)\u51b3\u5b9a\uff0c\u901a\u8fc7\u5728\u53f3\u7aef\u4f7f\u7528\u975e\u5e38\u5c0f\u7684\u6a21\u6570\u6765\u5206\u5272\u56fe 4.2 \u7684\u8bbe\u8ba1\u901a\u5e38\u6ca1\u6709\u4f18\u52bf\u3002</p> <p>We illustrate the process of selecting the RNS moduli through an example. Let us assume that we want to represent unsigned integers in the range 0 to (100 000)ten, requiring 17 bits with unsigned binary representation. </p> <p>\u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u6765\u8bf4\u660e\u9009\u62e9 RNS \u6a21\u6570\u7684\u8fc7\u7a0b\u3002\u8ba9\u6211\u4eec\u5047\u8bbe\u6211\u4eec\u60f3\u8981\u8868\u793a 0 \u5230 \\((100 000)_{10}\\) \u8303\u56f4\u5185\u7684\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u9700\u8981 17 \u4f4d\u65e0\u7b26\u53f7\u4e8c\u8fdb\u5236\u8868\u793a\u3002</p> <p>A simple strategy is to pick prime numbers in sequence until the dynamic range  M becomes adequate. Thus, we pick  m 0 = 2,  m 1 = 3,  m 2 = 5, etc. After we add  m 5 = 13 to our list, the dynamic range becomes</p> <p>\u4e00\u4e2a\u7b80\u5355\u7684\u7b56\u7565\u662f\u4f9d\u6b21\u9009\u62e9\u7d20\u6570\uff0c\u76f4\u5230\u52a8\u6001\u8303\u56f4M\u53d8\u5f97\u8db3\u591f\u4e86\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9009\u62e9 \\(m_0 = 2\\)\u3001\\(m_1 = 3\\)\u3001\\(m_2 = 5\\) \u7b49\u7b49\u3002\u5f53\u6dfb\u52a0\u5230 \\(m_5 = 13\\) \u540e\u5bf9\u4e8e\u6211\u4eec\u7684\u5217\u8868\uff0c\u52a8\u6001\u8303\u56f4\u53d8\u4e3a</p> <p>\u200b        RNS ( 13 | 11 | 7 | 5 | 3 | 2 )           M  = 30 030</p> <p>This range is not yet adequate, so we add  m 6 = 17 to the list:</p> <p>\u8fd9\u4e2a\u8303\u56f4\u8fd8\u4e0d\u591f\uff0c\u6240\u4ee5\u6211\u4eec\u5c06 m 6 = 17 \u6dfb\u52a0\u5230\u5217\u8868\u4e2d\uff1a</p> <p>\u200b        RNS ( 17 | 13 | 11 | 7 | 5 | 3 | 2 )    M = 510 510</p> <p>The dynamic range is now 5.1 times as large as needed, so we can remove the modulus 5 and still have adequate range:</p> <p>\u52a8\u6001\u8303\u56f4\u73b0\u5728\u662f\u6240\u9700\u7684 5.1 \u500d\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5220\u9664\u6a21\u6570 5 \u5e76\u4e14\u4ecd\u7136\u6709\u8db3\u591f\u7684\u8303\u56f4\uff1a</p> <p>\u200b        RNS(17 | 13 | 11 | 7 | 3 | 2)             M = 102 102</p> <p>With binary encoding of the six residues, the number of bits needed for encoding each number is</p> <p>\u901a\u8fc7\u5bf9\u516d\u4e2a\u4f59\u6570\u8fdb\u884c\u4e8c\u8fdb\u5236\u7f16\u7801\uff0c\u5bf9\u6bcf\u4e2a\u6570\u5b57\u8fdb\u884c\u7f16\u7801\u6240\u9700\u7684\u4f4d\u6570\u4e3a</p> <p>\u200b        5 + 4 + 4 + 3 + 2 + 1 = 19 \u4f4d</p> <p>Now, since the speed of arithmetic operations is dictated by the 5-bit residues modulo m 5, we can combine the pairs of moduli 2 and 13, and 3 and 7, with no speed penalty. This leads to:</p> <p>\u73b0\u5728\uff0c\u7531\u4e8e\u7b97\u672f\u8fd0\u7b97\u7684\u901f\u5ea6\u7531\u6a21 \\(m_5\\) \u7684 5 \u4f4d\u4f59\u6570\u51b3\u5b9a\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u7ec4\u5408\u6a21 2 \u548c 13\u3001\u6a21 3 \u548c 7 \u7684\u5bf9\uff0c\u800c\u4e0d\u4f1a\u5f71\u54cd\u901f\u5ea6\u3002\u8fd9\u5bfc\u81f4\uff1a</p> <p>\u200b         RNS ( 26 | 21 | 17 | 11 )                 M = 102 102</p> <p>This alternative RNS still needs 5 + 5 + 5 + 4 = 19 bits per operand, but has two fewer modules in the arithmetic unit. </p> <p>\u6b64\u66ff\u4ee3 RNS \u6bcf\u4e2a\u64cd\u4f5c\u6570\u4ecd\u9700\u8981 5 + 5 + 5 + 4 = 19 \u4f4d\uff0c\u4f46\u7b97\u672f\u5355\u5143\u4e2d\u7684\u6a21\u5757\u5c11\u4e86\u4e24\u4e2a\u3002</p> <p>Better results can be obtained if we proceed as above, but include powers of smaller primes before moving to larger primes. The chosen moduli will still be pairwise relatively prime, since powers of any two prime numbers are relatively prime. For example, after including  m 0 = 2 and  m 1 = 3 in our list of moduli, we note that 22 is smaller than the next prime 5. So we modify  m 0 and  m 1 to get</p> <p>\u5982\u679c\u6211\u4eec\u6309\u7167\u4e0a\u8ff0\u6b65\u9aa4\u8fdb\u884c\uff0c\u4f46\u5728\u8f6c\u5411\u8f83\u5927\u7d20\u6570\u4e4b\u524d\u5148\u5305\u62ec\u8f83\u5c0f\u7d20\u6570\u7684\u5e42\uff0c\u53ef\u4ee5\u83b7\u5f97\u66f4\u597d\u7684\u7ed3\u679c\u3002\u6240\u9009\u62e9\u7684\u6a21\u6570\u4ecd\u5c06\u662f\u6210\u5bf9\u4e92\u8d28\u7684\uff0c\u56e0\u4e3a\u4efb\u4f55\u4e24\u4e2a\u7d20\u6570\u7684\u5e42\u90fd\u662f\u4e92\u8d28\u7684\u3002\u4f8b\u5982\uff0c\u5728\u6a21\u6570\u5217\u8868\u4e2d\u5305\u542b \\(m_0 = 2\\) \u548c \\(m_1 = 3\\) \u540e\uff0c\u6211\u4eec\u6ce8\u610f\u5230 \\(2^2\\) \u5c0f\u4e8e\u4e0b\u4e00\u4e2a\u7d20\u6570 5\u3002\u56e0\u6b64\u6211\u4eec\u4fee\u6539 \\(m_0\\) \u548c \\(m_1\\) \u4ee5\u83b7\u5f97</p> <p>\u200b         RNS ( 22 | 3 )                                   M = 12</p> <p>This strategy is consistent with our desire to minimize the magnitude of the largest modulus. Similarly, after we have included  m 2 = 5 and  m 3 = 7, we note that both 23 and 32 are smaller than the next prime 11. So the next three steps lead to</p> <p>\u8be5\u7b56\u7565\u4e0e\u6211\u4eec\u6700\u5c0f\u5316\u6700\u5927\u6a21\u91cf\u7684\u613f\u671b\u662f\u4e00\u81f4\u7684\u3002\u7c7b\u4f3c\u5730\uff0c\u5728\u6211\u4eec\u5305\u542b \\(m_2 = 5\\) \u548c \\(m_3 = 7\\) \u540e\uff0c\u6211\u4eec\u6ce8\u610f\u5230 \\(2^3\\)</p> <p>\u548c \\(3^2\\) \u6bd4\u4e0b\u4e00\u4e2a\u7d20\u6570 11 \u5c0f\u3002\u6240\u4ee5\u63a5\u4e0b\u6765\u7684\u4e09\u4e2a\u6b65\u9aa4\u5bfc\u81f4</p> <p>\u200b       RNS ( 32 | 23 | 7 | 5 )                      M = 2520</p> <p>\u200b       RNS ( 11 | 32 | 23 | 7 | 5 )             M = 27 720</p> <p>\u200b       RNS ( 13 | 11 | 32 | 23 | 7 | 5 )    M = 360 360</p> <p>The dynamic range is now 3.6 times as large as needed, so we can replace the modulus 9 with 3 and then combine the pair 5 and 3 to obtain</p> <p>\u73b0\u5728\u52a8\u6001\u8303\u56f4\u662f\u6240\u9700\u7684 3.6 \u500d\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5c06\u6a21\u6570 9 \u66ff\u6362\u4e3a 3\uff0c\u7136\u540e\u5c06 5 \u548c 3 \u7ec4\u5408\u8d77\u6765\u5f97\u5230</p> <p>\u200b       RNS ( 15 | 13 | 11 | 23 | 7 )          M = 120 120</p> <p>The number of bits needed by this last RNS is</p> <p>\u6700\u540e\u4e00\u4e2a RNS \u6240\u9700\u7684\u4f4d\u6570\u4e3a</p> <p>\u200b       4 + 4 + 4 + 3 + 3 = 18 \u4f4d</p> <p>which is better than our earlier result of 19 bits. The speed has also improved because the largest residue is now 4 bits wide instead of 5. Other variations are possible. For example, given the simplicity of operations with power-of-2 moduli, we might want to backtrack and maximize the size of our even modulus within the 4-bit residue limit</p> <p>\u8fd9\u6bd4\u6211\u4eec\u4e4b\u524d\u7684 19 \u4f4d\u7ed3\u679c\u8981\u597d\u3002\u901f\u5ea6\u4e5f\u5f97\u5230\u4e86\u63d0\u9ad8\uff0c\u56e0\u4e3a\u6700\u5927\u4f59\u6570\u73b0\u5728\u662f 4 \u4f4d\u5bbd\uff0c\u800c\u4e0d\u662f 5 \u4f4d\u3002\u5176\u4ed6\u53d8\u5316\u4e5f\u662f\u53ef\u80fd\u7684\u3002\u4f8b\u5982\uff0c\u8003\u8651\u5230 2 \u6b21\u5e42\u6a21\u8fd0\u7b97\u7684\u7b80\u5355\u6027\uff0c\u6211\u4eec\u53ef\u80fd\u5e0c\u671b\u5728 4 \u4f4d\u4f59\u6570\u9650\u5236\u5185\u56de\u6eaf\u5e76\u6700\u5927\u5316\u5076\u6570\u6a21\u7684\u5927\u5c0f</p> <p>\u200b        RNS ( 24 | 13 | 11 | 32 | 7 | 5 )    M = 720 720</p> <p>We can now remove 5 or 7 from the list of moduli, but the resulting RNS is in fact inferior to RNS(15|13|11|23|7). This might not be the case with other examples; thus, once we have converged on a feasible set of moduli, we should experiment with other sets that can be derived from it by increasing the power of the even modulus at hand. </p> <p>\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u4ece\u6a21\u6570\u5217\u8868\u4e2d\u5220\u9664 5 \u6216 7\uff0c\u4f46\u751f\u6210\u7684 RNS \u5b9e\u9645\u4e0a\u4e0d\u5982 RNS(15|13|11|23|7)\u3002\u5176\u4ed6\u793a\u4f8b\u53ef\u80fd\u5e76\u975e\u5982\u6b64\uff1b\u56e0\u6b64\uff0c\u4e00\u65e6\u6211\u4eec\u6536\u655b\u5230\u4e00\u7ec4\u53ef\u884c\u7684\u6a21\u6570\uff0c\u6211\u4eec\u5e94\u8be5\u5c1d\u8bd5 \u901a\u8fc7\u589e\u52a0\u73b0\u6709\u5076\u6a21\u6570\u7684\u5e42\uff0c\u5e76\u4f7f\u7528\u53ef\u4ee5\u4ece\u4e2d\u5bfc\u51fa\u7684\u5176\u4ed6\u96c6\u5408\u3002</p> <p>The preceding strategy for selecting the RNS moduli is guaranteed to lead to the smallest possible number of bits for the largest modulus, thus maximizing the speed of RNS arithmetic. However, speed and cost do not just depend on the widths of the residues but also on the moduli chosen. For example, we have already noted that power-of-2 moduli simplify the required arithmetic operations, so that the modulus 16 might be better than the smaller modulus 13 (except, perhaps, with table-lookup implementation). Moduli of the form 2 a \u2212 1 are also desirable and are referred to as low-cost moduli [Merr64], [Parh76]. From our discussion of addition of 1\u2019s-complement numbers in Section 2.4, we know that addition modulo 2 a \u2212 1 can be performed using a standard a-bit binary adder with end-around carry. </p> <p>\u4e0a\u8ff0\u9009\u62e9RNS\u6a21\u6570\u7684\u7b56\u7565\u4fdd\u8bc1\u4e86\u6700\u5927\u6a21\u6570\u7684\u5c3d\u53ef\u80fd\u5c11\u7684\u4f4d\u6570\uff0c\u4ece\u800c\u6700\u5927\u5316RNS\u7b97\u6cd5\u7684\u901f\u5ea6\u3002\u7136\u800c\uff0c\u901f\u5ea6\u548c\u6210\u672c\u4e0d\u4ec5\u53d6\u51b3\u4e8e\u4f59\u6570\u7684\u5bbd\u5ea6\uff0c\u8fd8\u53d6\u51b3\u4e8e\u6240\u9009\u62e9\u7684\u6a21\u91cf\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u5df2\u7ecf\u6ce8\u610f\u5230\uff0c2 \u7684\u5e42\u6a21\u7b80\u5316\u4e86\u6240\u9700\u7684\u7b97\u672f\u8fd0\u7b97\uff0c\u56e0\u6b64\u6a21 16 \u53ef\u80fd\u6bd4\u8f83\u5c0f\u7684\u6a21 13 \u66f4\u597d\uff08\u4e5f\u8bb8\u9664\u4e86\u67e5\u8868\u5b9e\u73b0\u4e4b\u5916\uff09\u3002\\(2^a \u2212 1\\) \u5f62\u5f0f\u7684\u6a21\u6570\u4e5f\u662f\u7406\u60f3\u7684\uff0c\u88ab\u79f0\u4e3a\u4f4e\u6210\u672c\u6a21\u6570[Merr64]\uff0c[Parh76]\u3002\u4ece\u6211\u4eec\u5728\u7b2c 2.4 \u8282\u4e2d\u5bf9 1 \u8865\u7801\u7684\u52a0\u6cd5\u7684\u8ba8\u8bba\u4e2d\uff0c\u6211\u4eec\u77e5\u9053\u6a21 \\(2^a \u2212 1\\) \u7684\u52a0\u6cd5\u53ef\u4ee5\u4f7f\u7528\u5e26\u5c3e\u90e8\u8fdb\u4f4d\u7684\u6807\u51c6 a \u4f4d\u4e8c\u8fdb\u5236\u52a0\u6cd5\u5668\u6765\u6267\u884c\u3002</p> <p>Hence, we are motivated to restrict the moduli to a power of 2 and odd numbers of the form 2 a \u2212 1. One can prove (left as exercise) that the numbers 2 a \u2212 1 and 2 b \u2212 1 are relatively prime if and only if  a  and  b  are relatively prime. Thus, any list of relatively prime numbers  ak\u22122  &gt; \u00b7 \u00b7 \u00b7  &gt; a 1  &gt; a 0 can be the basis of the following  k-modulus RNS</p> <p>\u56e0\u6b64\uff0c\u6211\u4eec\u6709\u52a8\u673a\u5c06\u6a21\u9650\u5236\u4e3a 2 \u7684\u5e42\u548c \\(2^a \u2212 1\\) \u5f62\u5f0f\u7684\u5947\u6570\u3002\u53ef\u4ee5\u8bc1\u660e\uff08\u7559\u4f5c\u7ec3\u4e60\uff09\u6570\u5b57 \\(2^a \u2212 1\\) \u548c \\(2^b \u2212 1\\) \u4e92\u8d28\u5f53\u4e14\u4ec5\u5f53 a \u548c b \u4e92\u8d28\u3002\u56e0\u6b64\uff0c\u4efb\u4f55\u76f8\u5bf9\u8d28\u6570\u7684\u5217\u8868 \\(a_{k\u22122} &gt; \u00b7 \u00b7 \u00b7 &gt; a_1 &gt; a_0\\) \u90fd\u53ef\u4ee5\u4f5c\u4e3a\u4ee5\u4e0b k \u6a21 RNS \u7684\u57fa\u7840</p> <p>\u200b        \\(RNS ( 2^{a_{k\u22122}} | 2^{a_{k\u22122}} \u2212 1 | \u00b7 \u00b7 \u00b7 | 2^{a_1} \u2212 1 | 2^{a_0} \u2212 1 )\\)</p> <p>for which the widest residues are  ak\u22122-bit numbers. Note that to maximize the dynamic range with a given residue width, the even modulus is chosen to be as large as possible. </p> <p>\u5176\u4e2d\u6700\u5bbd\u7684\u4f59\u6570\u662f \\(a_{k\u22122}\\) \u4f4d\u6570\u5b57\u3002\u8bf7\u6ce8\u610f\uff0c\u4e3a\u4e86\u6700\u5927\u5316\u7ed9\u5b9a\u4f59\u6570\u5bbd\u5ea6\u7684\u52a8\u6001\u8303\u56f4\uff0c\u5076\u6570\u6a21\u91cf\u88ab\u9009\u62e9\u4e3a\u5c3d\u53ef\u80fd\u5927\u3002</p> <p>Applying this strategy to our desired RNS with the target range [0, 100 000], leads to the following steps:</p> <p>\u5c06\u6b64\u7b56\u7565\u5e94\u7528\u4e8e\u6211\u4eec\u6240\u9700\u7684\u76ee\u6807\u8303\u56f4\u4e3a [0, 100 000] \u7684 RNS\uff0c\u5c06\u5bfc\u81f4\u4ee5\u4e0b\u6b65\u9aa4\uff1a</p> <ul> <li>\\(RNS (2^3 | 2^3 \u2212 1 | 2^2 \u2212 1)\\) Basis: 3, 2                      M =        168</li> <li>\\(RNS (2^4 | 2^4 \u2212 1 | 2^3 \u2212 1)\\) Basis: 4, 3                      M =      1680</li> <li>\\(RNS (2^5 | 2^5 \u2212 1 | 2^3 \u2212 1 | 2^2 \u2212 1)\\) Basis: 5, 3, 2     M =   20 832</li> <li>\\(RNS (2^5 | 2^5 \u2212 1 | 2^4 \u2212 1 | 2^3 \u2212 1)\\) Basis: 5, 4, 3     M = 104 160</li> </ul> <p>This last system, RNS ( 32 | 31 | 15 | 7 ), possesses adequate range. Note that once the number 4 is included in the base list, 2 must be excluded because 4 and 2, and thus 24 \u2212 1 and 22 \u2212 1, are not relatively prime. </p> <p>\u6700\u540e\u4e00\u4e2a\u7cfb\u7edf RNS ( 32 | 31 | 15 | 7 ) \u62e5\u6709\u8db3\u591f\u7684\u8303\u56f4\u3002\u8bf7\u6ce8\u610f\uff0c\u4e00\u65e6\u6570\u5b57 4 \u5305\u542b\u5728\u57fa\u672c\u5217\u8868\u4e2d\uff0c\u5219\u5fc5\u987b\u6392\u9664 2\uff0c\u56e0\u4e3a 4 \u548c 2\uff0c\u4e14 \\(2^4 \u2212 1\\) \u548c \\(2^2 \u2212 1\\) \u4e0d\u662f\u4e92\u8d28\u7684\u3002</p> <p>The derived RNS requires 5 + 5 + 4 + 3 = 17 bits for representing each number, </p> <p>with the largest residues being 5 bits wide. In this case, the representational efficiency is close to 100% and no bit is wasted. In general, the representational efficiency of low-cost RNS is provably better than 50% (yet another exercise!), leading to the waste of no more than 1 bit in number representation. </p> <p>\u5bfc\u51fa\u7684 RNS \u9700\u8981 5 + 5 + 4 + 3 = 17 \u4f4d\u6765\u8868\u793a\u6bcf\u4e2a\u6570\u5b57\uff0c\u6700\u5927\u4f59\u6570\u4e3a 5 \u4f4d\u5bbd\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8868\u793a\u6548\u7387\u63a5\u8fd1 100%\uff0c\u5e76\u4e14\u6ca1\u6709\u6d6a\u8d39\u4efb\u4f55\u6bd4\u7279\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u4f4e\u6210\u672c RNS \u7684\u8868\u793a\u6548\u7387\u88ab\u8bc1\u660e\u4f18\u4e8e 50%\uff08\u53c8\u4e00\u4e2a\u7ec3\u4e60\uff01\uff09\uff0c\u5bfc\u81f4\u6570\u5b57\u8868\u793a\u4e2d\u4e0d\u8d85\u8fc7 1 \u4f4d\u7684\u6d6a\u8d39\u3002</p> <p>To compare the RNS above to our best result with unrestricted moduli, we list the parameters of the two systems together:</p> <p>\u4e3a\u4e86\u5c06\u4e0a\u9762\u7684 RNS \u4e0e\u6211\u4eec\u4f7f\u7528\u65e0\u9650\u5236\u6a21\u6570\u7684\u6700\u4f73\u7ed3\u679c\u8fdb\u884c\u6bd4\u8f83\uff0c\u6211\u4eec\u5c06\u4e24\u4e2a\u7cfb\u7edf\u7684\u53c2\u6570\u4e00\u8d77\u5217\u51fa\uff1a</p> <ul> <li>RNS \\((15 | 13 | 11 | 2^3 | 7)\\)                        18 bits        M = 120 120</li> <li>RNS \\((2^5 | 2^5 \u2212 1 | 2^4 \u2212 1 | 2^3 \u2212 1|)\\)    17 bits        M = 104 160</li> </ul> <p>Both systems provide the desired range. The latter has wider, but fewer, residues. However, the simplicity of arithmetic with low-cost moduli makes the latter a more attractive choice. In general, restricting the moduli tends to increase the width of the largest residues and the optimal choice is dependent on both the application and the target implementation technology. </p> <p>\u4e24\u79cd\u7cfb\u7edf\u90fd\u63d0\u4f9b\u6240\u9700\u7684\u8303\u56f4\u3002\u540e\u8005\u5177\u6709\u66f4\u5bbd\u4f46\u66f4\u5c11\u7684\u4f59\u6570\u3002\u7136\u800c\uff0c\u7b97\u6cd5\u7684\u7b80\u5355\u6027\u548c\u4f4e\u6210\u672c\u6a21\u6570\u4f7f\u540e\u8005\u6210\u4e3a\u66f4\u5177\u5438\u5f15\u529b\u7684\u9009\u62e9\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u9650\u5236\u6a21\u6570\u5f80\u5f80\u4f1a\u589e\u52a0\u6700\u5927\u4f59\u6570\u7684\u5bbd\u5ea6\uff0c\u6700\u4f73\u9009\u62e9\u53d6\u51b3\u4e8e\u5e94\u7528\u548c\u76ee\u6807\u5b9e\u73b0\u6280\u672f\u3002</p>"},{"location":"Part_01/04/#43","title":"4.3 \u6570\u5b57\u7684\u7f16\u7801\u548c\u89e3\u7801","text":"<p>Since input numbers provided from the outside (machine or human interface) are in standard binary or decimal and outputs must be presented in the same way, conversions between binary/decimal and RNS representations are required. </p> <p>\u7531\u4e8e\u4ece\u5916\u90e8\uff08\u673a\u5668\u6216\u4eba\u673a\u754c\u9762\uff09\u63d0\u4f9b\u7684\u8f93\u5165\u6570\u5b57\u662f\u6807\u51c6\u4e8c\u8fdb\u5236\u6216\u5341\u8fdb\u5236\uff0c\u5e76\u4e14\u8f93\u51fa\u5fc5\u987b\u4ee5\u76f8\u540c\u7684\u65b9\u5f0f\u5448\u73b0\uff0c\u56e0\u6b64\u9700\u8981\u4e8c\u8fdb\u5236/\u5341\u8fdb\u5236\u548c RNS \u8868\u793a\u4e4b\u95f4\u7684\u8f6c\u6362\u3002</p>"},{"location":"Part_01/04/#rns","title":"\u4ece\u4e8c\u8fdb\u5236/\u5341\u8fdb\u5236\u5230 RNS \u7684\u8f6c\u6362","text":"<p>The binary-to-RNS conversion problem is stated as follows: Given an integer  y, find its residues with respect to the moduli  mi, 0 \u2264  i \u2264  k \u2212 1. Let us assume that  y  is an unsigned binary integer. Conversion of signed-magnitude or 2\u2019s-complement numbers can be accomplished by converting the magnitude and then complementing the RNS representation if needed. </p> <p>\u4e8c\u8fdb\u5236\u5230 RNS \u7684\u8f6c\u6362\u95ee\u9898\u8868\u8ff0\u5982\u4e0b\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 y\uff0c\u6c42\u5176\u76f8\u5bf9\u4e8e\u6a21 \\(m_i, 0 \u2264 i \u2264 k \u2212 1\\) \u7684\u4f59\u6570\u3002\u5047\u8bbe y \u662f\u4e00\u4e2a\u65e0\u7b26\u53f7\u4e8c\u8fdb\u5236\u6574\u6570\u3002\u6709\u7b26\u53f7\u6570\u503c\u6216 2 \u8865\u7801\u7684\u8f6c\u6362\u53ef\u4ee5\u901a\u8fc7\u8f6c\u6362\u5e45\u5ea6\u503c\uff0c\u7136\u540e\u6839\u636e\u9700\u8981\u5bf9 RNS \u6c42\u8865\u6765\u5b8c\u6210\u3002</p> <p>To avoid time-consuming divisions, we take advantage of the following equality:</p> <p>\u4e3a\u4e86\u907f\u514d\u8017\u65f6\u7684\u9664\u6cd5\uff0c\u6211\u4eec\u5229\u7528\u4ee5\u4e0b\u7b49\u5f0f\uff1a </p> <p>$$ \\left \\langle (y_{k-1} \\cdots y_1 y_0)2 \\right \\rangle _{m_i} = \\left \\langle  \\left \\langle 2^{k-1}y \\right \\rangle_{m_i} + \\cdots +  \\left \\langle 2y_1 \\right \\rangle_{m_i} + \\left \\langle y_0 \\right \\rangle_{m_i} \\right \\rangle $$ If we precompute and store 2 j m i  for each  i  and  j, then the residue  x i   of  y (mod  mi ) can be computed by modulo- mi  addition of some of these constants. </p> <p>\u5982\u679c\u6211\u4eec\u4e3a\u6bcf\u4e2a i \u548c j \u9884\u5148\u8ba1\u7b97\u5e76\u5b58\u50a8 \\(\\left \\langle 2^j \\right \\rangle _{m_{i}}\\) \uff0c\u5219y\u7684\u4f59\u6570 \\(x_i\\)    (mod \\(m_i\\) ) \u53ef\u4ee5 \u901a\u8fc7\u5bf9\u4e00\u4e9b\u67e5\u51fa\u5e38\u6570\u7684\u6a21\u52a0\u6cd5\u6765\u8ba1\u7b97\u3002</p> <p>Table 4.1 shows the required lookup table for converting 10-bit binary numbers in the range [0, 839] to RNS(8 | 7 | 5 | 3). Only residues mod 7, mod 5, and mod 3 are given in the table, since the residue mod 8 is directly available as the three least-significant bits of the binary number  y. </p> <p>\u8868 4.1 \u663e\u793a\u4e86\u5c06 [0, 839] \u8303\u56f4\u5185\u7684 10 \u4f4d\u4e8c\u8fdb\u5236\u6570\u8f6c\u6362\u4e3a RNS(8|7|5|3) \u6240\u9700\u7684\u67e5\u627e\u8868\u3002\u8868\u4e2d\u53ea\u7ed9\u51fa\u4e86\u4f59\u6570 mod 7\u3001mod 5 \u548c mod 3\uff0c\u56e0\u4e3a\u4f59\u6570 mod 8 \u53ef\u76f4\u63a5\u7528\u4f5c\u4e8c\u8fdb\u5236\u6570 y \u7684\u4e09\u4e2a\u6700\u4f4e\u6709\u6548\u4f4d\u3002</p> <p></p> <p>EXAMPLE 4.1 Represent  y =  ( 1010 0100 ) two =  ( 164 ) ten in RNS ( 8 | 7 | 5 | 3 ).  The residue of  y  mod 8 is  x 3 =  (y 2 y 1 y 0 ) two =  ( 100 ) two = 4. Since  y = 27 + 25 + 22, the required residues mod 7, mod 5, and mod 3 are obtained by simply adding the values stored in the three rows corresponding to  j = 7, 5, 2 in Table 4.1:</p> <p>\u793a\u4f8b4.1 \u7528\\(RNS (8 | 7 | 5 | 3 )\\) \u8868\u793a\\(y = ( 1010 0100 )_2 = ( 164 )_{10}\\) \u3002</p> <p>y mod 8 \u7684\u4f59\u6570\u4e3a \\(x_3 = (y_2 y_1 y_0 )_2 = (100)_2 = 4\\)\u3002\u7531\u4e8e \\(y = 2^7 + 2^5 + 2^2\\)\uff0c\u53ea\u9700\u5c06\u8868 4.1 \u4e2d j = 7, 5, 2 \u5bf9\u5e94\u7684\u4e09\u884c\u4e2d\u5b58\u50a8\u7684\u503c\u76f8\u52a0\u5373\u53ef\u83b7\u5f97\u6240\u9700\u7684\u4f59\u6570 mod 7\u3001mod 5 \u548c mod 3\uff1a</p> <p>$$ \\begin{array}{c} x_2 = \\left \\langle y \\right \\rangle _7 = \\left \\langle 2 + 4 + 4\\right \\rangle _7 = 3 \\ x_1 = \\left \\langle y \\right \\rangle _5 = \\left \\langle 3 + 2 + 4\\right \\rangle _5 = 4 \\ x_0 = \\left \\langle y \\right \\rangle _3 = \\left \\langle 2 + 2 + 1\\right \\rangle _3 = 2 \\end{array} $$ Therefore, the RNS(8 | 7 | 5 | 3) representation of (164)ten is (4 | 3 | 4 | 2)RNS. </p> <p>\u56e0\u6b64\uff0c\\((164)_{10}\\) \u7684 \\(RNS(8 | 7 | 5 | 3)\\) \u8868\u793a\u4e3a \\((4 | 3 | 4 | 2)_{RNS}\\)\u3002</p> <p>In the worst case,  k  modular additions are required for computing each residue of a k-bit number. To reduce the number of operations, one can view the given input number as a number in a higher radix. For example, if we use radix 4, then storing the residues of 4 i, 2 \u00d7 4 i  and 3 \u00d7 4 i  in a table would allow us to compute each of the required residues using only  k/ 2 modular additions. </p> <p>\u5728\u6700\u574f\u7684\u60c5\u51b5\u4e0b\uff0c\u9700\u8981 k \u4e2a\u6a21\u52a0\u6cd5\u6765\u8ba1\u7b97 k \u4f4d\u6570\u5b57\u7684\u6bcf\u4e2a\u4f59\u6570\u3002\u4e3a\u4e86\u51cf\u5c11\u8fd0\u7b97\u6b21\u6570\uff0c\u53ef\u4ee5\u5c06\u7ed9\u5b9a\u7684\u8f93\u5165\u6570\u5b57\u89c6\u4e3a\u66f4\u9ad8\u57fa\u6570\u7684\u6570\u5b57\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u4f7f\u7528\u57fa\u6570 4\uff0c\u90a3\u4e48\u5c06 \\(4^i\u30012 \u00d7 4^i \u548c 3 \u00d7 4^i\\) \u7684\u4f59\u6570\u5b58\u50a8\u5728\u8868\u4e2d\u5c06\u5141\u8bb8\u6211\u4eec\u4ec5\u4f7f\u7528 \\(k/ 2\\) \u6a21\u52a0\u6cd5\u6765\u8ba1\u7b97\u6bcf\u4e2a\u6240\u9700\u7684\u7559\u6570\u3002</p> <p>The conversion for each modulus can be done by repeatedly using a single lookup table and modular adder or by several copies of each arranged into a pipeline. For a low-cost modulus  m = 2 a \u2212 1, the residue can be determined by dividing up  y  into  a-bit segments and adding them modulo 2 a \u2212 1. </p> <p>\u6bcf\u4e2a\u6a21\u6570\u7684\u8f6c\u6362\u53ef\u4ee5\u901a\u8fc7\u91cd\u590d\u4f7f\u7528\u5355\u4e2a\u67e5\u627e\u8868\u548c\u6a21\u52a0\u6cd5\u5668\u6216\u901a\u8fc7\u6392\u5217\u5230\u7ba1\u9053\u4e2d\u7684\u6bcf\u4e2a\u6a21\u6570\u7684\u591a\u4e2a\u526f\u672c\u6765\u5b8c\u6210\u3002\u5bf9\u4e8e\u4f4e\u6210\u672c\u6a21\u6570 \\(m = 2^a \u2212 1\\)\uff0c\u53ef\u4ee5\u901a\u8fc7\u5c06 y \u5206\u6210 a \u4f4d\u6bb5\u5e76\u5c06\u5b83\u4eec\u52a0\u4e0a\u6a21 \\(2^a \u2212 1\\) \u6765\u786e\u5b9a\u4f59\u6570\u3002</p>"},{"location":"Part_01/04/#rns_1","title":"\u4ece RNS \u5230\u6df7\u5408\u57fa\u6570\u5f62\u5f0f\u7684\u8f6c\u6362","text":"<p>Associated with any residue number system RNS (mk\u22121 | \u00b7 \u00b7 \u00b7 | m 2 | m 1 | m 0 ) is a mixed-radix number system MRS (mk\u22121 | \u00b7 \u00b7 \u00b7 | m 2 | m 1 | m 0 ), which is essentially a k-digit positional number system with position weights</p> <p>\u4e0e\u4efb\u4f55\u5269\u4f59\u6570\u6570\u5b57\u7cfb\u7edf RNS \\((m_{k\u22121} | \u00b7 \u00b7 \u00b7 | m_2 | m_1 | m_0 )\\) \u76f8\u5173\u8054\u7684\u662f\u6df7\u5408\u57fa\u6570\u7cfb\u7edf MRS \\((m_{k\u22121} | \u00b7 \u00b7 \u00b7 | m_2 | m_1 | m_0 )\\)\uff0c\u5b83\u672c\u8d28\u4e0a\u662f\u4e00\u4e2ak \u4f4d\u7684\u4f4d\u7f6e\u6570\u5b57\u7cfb\u7edf\uff0c\u5177\u6709\u4f4d\u7f6e\u6743\u91cd\uff1a</p> <p>$$ m_{k\u22122}\\cdots m_2m_1m_0,  \\cdots,   m_2m_1m_0,  m_1m_0,  m_0,  1 $$ and digit sets [0,  mk\u22121 \u2212 1], \u00b7 \u00b7 \u00b7 , [0,  m 2 \u2212 1], [0,  m 1 \u2212 1], and [0,  m 0 \u2212 1] in its  k-digit positions. Hence, the MRS digits are in the same ranges as the RNS digits (residues). For example, the mixed-radix system MRS ( 8 | 7 | 5 | 3 )  has position weights 7 \u00d7 5 \u00d7 3 = 105, 5 \u00d7 3 = 15, 3, and 1, leading to  </p> <p>\u4ee5\u53ca\u5728\u5176 k \u4f4d\u4f4d\u7f6e\u4e0a\u7684\u6570\u5b57\u96c6 [\\(0, m_{k\u22121} \u2212 1\\)]\u3001\u00b7\u00b7\u00b7\u3001[\\(0, m_2 \u2212 1\\)]\u3001[\\(0, m_1 \u2212 1\\)] \u548c [\\(0, m_0 \u2212 1\\)]\u3002\u56e0\u6b64\uff0cMRS \u6570\u5b57\u4e0e RNS \u6570\u5b57\uff08\u4f59\u6570\uff09\u5904\u4e8e\u76f8\u540c\u8303\u56f4\u3002\u4f8b\u5982\uff0c\u6df7\u5408\u57fa\u6570\u7cfb\u7edf MRS ( 8 | 7 | 5 | 3 ) \u7684\u4f4d\u7f6e\u6743\u91cd\u4e3a 7 \u00d7 5 \u00d7 3 =105, 5 \u00d7 3 = 15, 3, 1, \u5bfc\u81f4</p> \\[ ( 0 | 3 | 1 | 0 )_{MRS ( 8|7|5|3 )} = ( 0 \u00d7 105 ) + ( 3 \u00d7 15 ) + ( 1 \u00d7 3 ) + ( 0 \u00d7 1 ) = 48 \\] <p>The RNS-to-MRS conversion problem is that of determining the  zi  digits of MRS, given the  xi  digits of RNS, so that</p> <p>RNS \u5230 MRS \u7684\u8f6c\u6362\u95ee\u9898\u662f\u5728\u7ed9\u5b9a RNS \u7684 \\(x_i\\) \u6570\u5b57\u7684\u60c5\u51b5\u4e0b\u786e\u5b9a MRS \u7684 \\(z_i\\) \u6570\u5b57\uff0c\u4ee5\u4fbf</p> \\[ y = (x_{k\u22121}| \u00b7 \u00b7 \u00b7 | x_2 | x_1 | x_0 ) _{RNS} = (z_{k\u22121} | \u00b7 \u00b7 \u00b7 | z_2 | z_1 | z_0 ) _{MRS} \\] <p>From the definition of MRS, we have</p> <p>\u6839\u636eMRS\u7684\u5b9a\u4e49\uff0c\u6211\u4eec\u6709</p> \\[ y = z_{k\u22121} (m_{k\u22122} \\cdots m_2 m_1 m_0 ) + \\cdots + z_2 (m_1 m_0 ) + z_1 (m_0 ) + z_0 \\] <p>It is thus immediately obvious that  z 0 =  x 0. Subtracting  z 0 =  x 0 from both the RNS and MRS representations, we get</p> <p>\u56e0\u6b64\u5f88\u660e\u663e \\(z_0 = x_0\\)\u3002\u4ece RNS \u548c MRS \u8868\u793a\u4e2d\u51cf\u53bb \\(z_0 = x_0\\)\uff0c\u6211\u4eec\u5f97\u5230</p> \\[ y - x_0 = (x'_{k\u22121}| \u00b7 \u00b7 \u00b7 | x'_2 | x'_1 | 0 ) _{RNS} = (z_{k\u22121} | \u00b7 \u00b7 \u00b7 | z_2 | z_1 | 0 ) _{MRS} \\] <p>\u5176\u4e2d\\(x'_j=\\left \\langle x_j - x_0 \\right \\rangle_{m_j}\\)\u200b. </p> <p>If we now divide both representations by  m*0, we get the following in the reduced RNS and MRS from which *m 0 has been removed:</p> <p>\u5982\u679c\u6211\u4eec\u73b0\u5728\u5c06\u4e24\u4e2a\u8868\u793a\u9664\u4ee5 \\(m_0\\)\uff0c\u5f97\u5230\u7ed3\u679c \u662f\u5df2\u5220\u9664 \\(m_0\\) \u7684\u7b80\u5316 RNS \u548c MRS \uff1a</p> <p>$$ (x''{k\u22121}| \u00b7 \u00b7 \u00b7 | x''_2 | x''_1) _{RNS} = (z | \u00b7 \u00b7 \u00b7 | z_2 | z_1) _{MRS} $$ Thus, if we demonstrate how to divide the number  y =  (x| \u00b7 \u00b7 \u00b7 |  x |  x | 0 *)*RNS by m0 to obtain (xk\u22121 | \u00b7 \u00b7 \u00b7 | x2 | x1)RNS, we have converted the original problem to a similar problem with one fewer modulus. Repeating the same process then leads to the determination of all the zi digits in turn. </p> <p>\u56e0\u6b64\uff0c\u5982\u679c\u6211\u4eec\u6f14\u793a\u5982\u4f55\u5c06 \\(y\u2019 = (x\u2019_{k-1}|\\cdots|x\u2019_2|x\u2019_1|0)_{RNS}\\) \u9664\u4ee5\u6570\u5b57\\(m_0\\) \u6765\u5f97\u5230 \\((x''_{k\u22121}| \u00b7 \u00b7 \u00b7 | x''_2 | x''_1) _{RNS}\\)\uff0c \u6211\u4eec\u5df2\u7ecf\u5c06\u539f\u59cb\u95ee\u9898\u8f6c\u6362\u4e3a\u5c11\u4e00\u4e2a\u6a21\u6570\u7684\u7c7b\u4f3c\u95ee\u9898\u3002\u91cd\u590d\u76f8\u540c\u7684\u8fc7\u7a0b\u5373\u53ef\u4f9d\u6b21\u786e\u5b9a\u6240\u6709\u7684 \\(z_i\\) \u6570\u5b57\u3002</p> <p>Dividing y, which is a multiple of m 0, by a given constant (in this case m 0) is known as scaling and is much simpler than general division in RNS. Division by m 0 can be accomplished by multiplying each residue by the multiplicative inverse of m 0 with respect to the associated modulus. For example, the multiplicative inverses of 3 relative to 8, 7, and 5 are 3, 5, and 2, respectively, because</p> <p>\u5c06 y\uff08\u662f\\(m_0\\)\u7684\u500d\u6570\uff09\u9664\u4ee5\u7ed9\u5b9a\u5e38\u6570\uff08\u5728\u672c\u4f8b\u4e2d\u4e3a \\(m_0\\)\uff09\u79f0\u4e3a\u7f29\u653e\uff0c\u5e76\u4e14\u6bd4 RNS \u4e2d\u7684\u4e00\u822c\u9664\u6cd5\u7b80\u5355\u5f97\u591a\u3002\u9664\u4ee5\\(m_0\\) \u53ef\u4ee5\u901a\u8fc7\u5c06\u6bcf\u4e2a\u4f59\u6570\u4e58\u4ee5\\(m_0\\) \u76f8\u5bf9\u4e8e\u76f8\u5173\u6a21\u6570\u7684*\u4e58\u6cd5\u9006\u5143*\u6765\u5b8c\u6210\u3002\u4f8b\u5982\uff0c3 \u76f8\u5bf9\u4e8e 8\u30017 \u548c 5 \u7684*\u4e58\u6cd5\u9006\u5143*\u5206\u522b\u4e3a 3\u30015 \u548c 2\uff0c\u56e0\u4e3a</p> <p>$$ \\left \\langle 3 \\times 3 \\right \\rangle _8 = \\left \\langle 3 \\times 5 \\right \\rangle _7 = \\left \\langle 3 \\times 2 \\right \\rangle _5 = 1 $$ \u56e0\u6b64\uff0c\u6570\u5b57 \\(y = ( 0 | 6 | 3 | 0 )_{RNS}\\) \u53ef\u4ee5\u901a\u8fc7\u4e58\u4ee5 \\(( 3 | 5 | 2 | \u2212 ) _{RNS}\\) \u6765\u9664\u4ee5 3\uff1a</p> <p>$$ \\frac{( 0 | 6 | 3 | 0 ){RNS}}{3}=( 0 | 6 | 3 | 0 )\\times ( 3 | 5 | 2 | \u2212 ) {RNS} =  (0 | 2 | 1 | \u2212) $$ Multiplicative inverses of the moduli can be precomputed and stored in tables to facilitate RNS-to-MRS conversion.</p> <p>\u6a21\u7684\u4e58\u6cd5\u9006\u53ef\u4ee5\u9884\u5148\u8ba1\u7b97\u5e76\u5b58\u50a8\u5728\u8868\u4e2d\uff0c\u4ee5\u65b9\u4fbf RNS \u5230 MRS \u7684\u8f6c\u6362\u3002</p> <p>EXAMPLE 4.2 Convert y = ( 0 | 6 | 3 | 0 ) RNS to mixed-radix representation. We have z 0 = x 0 = 0. Based on the preceding discussion, dividing y by 3 yields: ( 0 | 6 | 3 | 0 ) RNS = ( 0 | 6 | 3 | 0 ) RNS \u00d7 ( 3 | 5 | 2 | \u2212 ) RNS</p> <p>\u793a\u4f8b4.2 \u5c06\\(y = ( 0 | 6 | 3 | 0 ) _{RNS}\\) \u8f6c\u6362\u4e3a\u6df7\u5408\u57fa\u6570\u8868\u793a\u3002</p> <p>\u6211\u4eec\u6709 \\(z_0 = x_0 = 0\\)\u3002\u6839\u636e\u524d\u9762\u7684\u8ba8\u8bba\uff0c\u5c06 y \u9664\u4ee5 3 \u5f97\u5230\uff1a </p> \\[ \\frac{( 0 | 6 | 3 | 0 )_{RNS}}{3}=( 0 | 6 | 3 | 0 )_{RNS}\\times ( 3 | 5 | 2 | \u2212 ) _{RNS} =  (0 | 2 | 1 | \u2212)_{RNS} \\] <p>Thus we have z 1 = 1. Subtracting 1 and dividing by 5, we get:</p> <p>\u56e0\u6b64\u6211\u4eec\u6709 \\(z_1 = 1\\)\u3002\u51cf\u53bb 1 \u518d\u9664\u4ee5 5\uff0c\u6211\u4eec\u5f97\u5230\uff1a</p> \\[ \\frac{(7|1|0|-)_{RNS}}{5} = (7|1|0|-)_{RNS} \\times (5|3|-|-)_{RNS}=(0|-|-|-)_{RNS} \\] <p>Next, we get z 2 = 3. Subtracting 3 and dividing by 7, we find:</p> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5f97\u5230 \\(z_2 = 3\\)\u3002\u51cf\u53bb 3 \u518d\u9664\u4ee5 7\uff0c\u6211\u4eec\u53d1\u73b0\uff1a</p> \\[ \\frac{(0|0|-|-)_{RNS}}{7} = (0|0|-|-)_{RNS} \\times (7|-|-|-)_{RNS} = (0|-|-|-)_{RNS} \\] <p>We conclude by observing that z 3 = 0. The conversion is now complete:</p> <p>\u6211\u4eec\u901a\u8fc7\u89c2\u5bdf \u5f97\u51fa\u7ed3\u8bba\\(z_3 = 0\\) \u3002\u8f6c\u6362\u73b0\u5df2\u5b8c\u6210\uff1a</p> \\[ y = (0 | 6 | 3 | 0)_{RNS} = (0 | 3 | 1 | 0)_{MRS} = 48 \\] <p>Mixed-radix representation allows us to compare the magnitudes of two RNS numbers or to detect the sign of a number. For example, the RNS representations ( 0 | 6 | 3 | 0 ) RNS and ( 5 | 3 | 0 | 0 ) RNS of 48 and 45 provide no clue to their relative magnitudes, whereas the equivalent mixed-radix representations ( 0 | 3 | 1 | 0 ) MRS and ( 0 | 3 | 0 | 0 ) MRS, or ( 000 | 011 | 001 | 00 ) MRS and ( 000 | 011 | 000 | 00 ) MRS, when coded in binary, can be compared as ordinary numbers.</p> <p>\u6df7\u5408\u57fa\u6570\u8868\u793a\u5141\u8bb8\u6211\u4eec\u6bd4\u8f83\u4e24\u4e2aRNS\u6570\u5b57\u7684\u5927\u5c0f\u6216\u68c0\u6d4b\u6570\u5b57\u7684\u7b26\u53f7\u3002\u4f8b\u5982\uff0c48 \u548c 45 \u7684 RNS \u8868\u793a \\(( 0 | 6 | 3 | 0 )_{RNS}\\) \u548c \\(( 5 | 3 | 0 | 0 ) _{RNS}\\) \u6ca1\u6709\u63d0\u4f9b\u5b83\u4eec\u76f8\u5bf9\u5927\u5c0f\u7684\u7ebf\u7d22\uff0c\u800c\u7b49\u6548\u7684\u6df7\u5408\u57fa\u6570\u8868\u793a \\(( 0 | 3 | 1 | 0 ) _{MRS}\\)</p> <p>\u548c\\(( 0 | 3 | 0 | 0 ) _{MRS}\\)\uff0c\u6216\\(( 000 | 011 | 001 | 00 )_{MRS}\\) \u548c\\(( 000 | 011 | 000 | 00 ) _{MRS}\\)\uff0c\u5f53\u4ee5\u4e8c\u8fdb\u5236\u7f16\u7801\u65f6\uff0c\u53ef\u4ee5\u50cf\u666e\u901a\u6570\u5b57\u4e00\u6837\u8fdb\u884c\u6bd4\u8f83\u3002</p>"},{"location":"Part_01/04/#rns_2","title":"RNS \u5230\u4e8c\u8fdb\u5236/\u5341\u8fdb\u5236\u7684\u8f6c\u6362","text":"<p>One method for RNS-to-binary conversion is to first derive the mixed-radix representation of the RNS number and then use the weights of the mixed-radix positions to complete the conversion. We can also derive position weights for the RNS directly based on the Chinese remainder theorem (CRT), as discussed below.</p> <p>RNS \u5230\u4e8c\u8fdb\u5236\u8f6c\u6362\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u9996\u5148\u5bfc\u51fa RNS \u6570\u7684\u6df7\u5408\u57fa\u8868\u793a\uff0c\u7136\u540e\u4f7f\u7528\u6df7\u5408\u57fa\u4f4d\u7f6e\u7684\u6743\u91cd\u6765\u5b8c\u6210\u8f6c\u6362\u3002\u6211\u4eec\u8fd8\u53ef\u4ee5\u76f4\u63a5\u57fa\u4e8e\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406 (CRT) \u5bfc\u51fa RNS \u7684\u4f4d\u7f6e\u6743\u91cd\uff0c\u5982\u4e0b\u6240\u8ff0\u3002</p> <p>Consider the conversion of y = ( 3 | 2 | 4 | 2 ) RNS from RNS ( 8 | 7 | 5 | 3 ) to decimal. Based on RNS properties, we can write</p> <p>\u8003\u8651\u5c06 y = ( 3 | 2 | 4 | 2 ) RNS \u4ece RNS ( 8 | 7 | 5 | 3 ) \u8f6c\u6362\u4e3a\u5341\u8fdb\u5236\u3002\u57fa\u4e8e RNS \u5c5e\u6027\uff0c\u6211\u4eec\u53ef\u4ee5\u5199\u505a</p> \\[ \\begin{array}{l} (3 | 2 | 4 | 2)_{RNS} &amp;= (3 | 0 | 0 | 0)_{RNS} + (0 | 2 | 0 | 0)_{RNS} + (0 | 0 | 4 | 0)_{RNS} + (0 | 0 | 0 | 2)_{RNS} \\\\ &amp;= 3 \u00d7 (1 | 0 | 0 | 0)_{RNS} + 2 \u00d7 (0 | 1 | 0 | 0)_{RNS} + 4 \u00d7 (0 | 0 | 1 | 0)_{RNS} + 2 \u00d7 (0 | 0 | 0 | 1)_{RNS} \\end{array} \\] <p>Thus, knowing the values of the following four constants (the RNS position weights) would allow us to convert any number from RNS ( 8 | 7 | 5 | 3 ) to decimal using four multiplications and three additions.</p> <p>\u56e0\u6b64\uff0c\u77e5\u9053\u4ee5\u4e0b\u56db\u4e2a\u5e38\u91cf\uff08RNS \u4f4d\u7f6e\u6743\u91cd\uff09\u7684\u503c\u5c06\u5141\u8bb8\u6211\u4eec\u4f7f\u7528\u56db\u6b21\u4e58\u6cd5\u548c\u4e09\u6b21\u52a0\u6cd5\u5c06\u4efb\u4f55\u6570\u5b57\u4ece RNS (8 | 7 | 5 | 3 ) \u8f6c\u6362\u4e3a\u5341\u8fdb\u5236\u3002</p> \\[ \\begin{array}{c} (1 | 0 | 0 | 0)_{RNS} = 105 \\\\ (0 | 1 | 0 | 0)_{RNS} = 120 \\\\ (0 | 0 | 1 | 0)_{RNS} = 336 \\\\ (0 | 0 | 0 | 1)_{RNS} = 280 \\end{array} \\] <p>\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0</p> \\[ (3 | 2 | 4 | 2)RNS = \\left \\langle (3 \u00d7 105) + (2 \u00d7 120) + (4 \u00d7 336) + (2 \u00d7 280)\\right \\rangle _{840} = 779 \\] <p>It only remains to show how the preceding weights were derived. How, for example, did we determine that w 3 = ( 1 | 0 | 0 | 0 ) RNS = 105? To determine the value of w 3, we note that it is divisible by 3, 5, and 7, since its last three residues are 0s. Hence, w 3 must be a multiple of 105. We must then pick the appropriate multiple of 105 such that its residue with respect to 8 is 1. This is done by multiplying 105 by its multiplicative inverse with respect to 8. Based on the preceding discussion, the conversion process can be formalized in the form of CRT.</p> <p>\u53ea\u9700\u8981\u8bf4\u660e\u524d\u9762\u7684\u6743\u91cd\u662f\u5982\u4f55\u5f97\u51fa\u7684\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u5982\u4f55\u786e\u5b9a \\(w_3 = ( 1 | 0 | 0 | 0 ) _{RNS} = 105\\)\uff1f \u4e3a\u4e86\u786e\u5b9a \\(w_3\\) \u7684\u503c\uff0c\u6211\u4eec\u6ce8\u610f\u5230\u5b83\u53ef\u4ee5\u88ab 3\u30015 \u548c 7 \u6574\u9664\uff0c\u56e0\u4e3a\u5b83\u7684\u6700\u540e\u4e09\u4e2a\u4f59\u6570\u662f 0\u3002\u56e0\u6b64\uff0cw 3 \u5fc5\u987b\u662f 105 \u7684\u500d\u6570\u3002\u7136\u540e\u6211\u4eec\u5fc5\u987b\u9009\u62e9 105 \u7684\u9002\u5f53\u500d\u6570\uff0c\u4f7f\u5176\u76f8\u5bf9\u4e8e 8 \u7684\u4f59\u6570\u4e3a 1\u3002\u8fd9\u662f\u901a\u8fc7\u5c06 105 \u4e58\u4ee5\u5b83\u76f8\u5bf9\u4e8e 8 \u7684\u4e58\u6cd5\u9006\u5143\u6765\u5b8c\u6210\u7684\u3002\u57fa\u4e8e\u524d\u9762\u7684\u8ba8\u8bba\uff0c\u8f6c\u6362\u8fc7\u7a0b\u53ef\u4ee5\u4ee5 CRT \u7684\u5f62\u5f0f\u5f62\u5f0f\u5316\u3002</p> <p>THEOREM 4.1 (The Chinese remainder theorem) The magnitude of an RNS number can be obtained from the CRT formula:</p> <p>\u5b9a\u7406 4.1\uff08\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\uff09RNS \u6570\u5b57\u7684\u5927\u5c0f\u53ef\u4ee5\u4eceCRT\u516c\u5f0f\u4e2d\u83b7\u5f97\uff1a</p> <p>$$ x = (x_{k\u22121} | \u00b7 \u00b7 \u00b7 | x_2 | x_1 | x_0 ) {RNS} = \\left \\langle \\sum^{k-1}M_i \\left \\langle \\alpha_i x_i\\right \\rangle_{m_i} \\right \\rangle_M $$ \u5176\u4e2d \\(M_i=M/m_i\\), \u800c \\(\\alpha_i=\\left \\langle M_i^{-1}\\right \\rangle _{m_i}\\) \u662f\\(M_i\\)\u76f8\u5bf9\u4e8e\\(m_i\\)\u7684\u4e58\u6cd5\u9006\u5143\u3002</p> <p>To avoid multiplications in the conversion process, we can store the values of</p> <p>\u4e3a\u4e86\u907f\u514d\u8f6c\u6362\u8fc7\u7a0b\u4e2d\u7684\u4e58\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u5b58\u50a8\u5bf9\u4e8e\u6240\u6709\u53ef\u80fd\u7684\\(i\\) \u548c\\(x_i\\)\u5bf9\u5e94\u7684\\(\\left \\langle M_i \\left \\langle \\alpha_i x_i\\right \\rangle_{m_i} \\right \\rangle_M\\)\u7684\u503c\u5230\u4e00\u4e2a\u8868\u4e2d\uff0c\u8868\u5927\u5c0f\u6709\\(\\sum_{i=0}^{k-1}m_i\\)\u4e2aword\u3002</p> <p></p> <p>\u8868 4.2 \u5e94\u7528\u4e2d\u56fd\u4f59\u6570\u5b9a\u7406\u5230RNS(8|7|5|3)\u6240\u9700\u7684\u503c</p> <p>shows the required values for RNS ( 8 | 7 | 5 | 3 ). Conversion is then performed exclusively by table lookups and modulo- M additions.</p> <p>\u8868 4.2\u663e\u793a RNS ( 8 | 7 | 5 | 3 ) \u6240\u9700\u7684\u503c\u3002\u4ec5\u901a\u8fc7\u8868\u67e5\u627e\u548c\u6a21 M \u52a0\u6cd5\u5c31\u53ef\u4ee5\u6267\u884c\u8f6c\u6362\u3002</p>"},{"location":"Part_01/04/#44-rns","title":"4.4 \u56f0\u96be\u7684 RNS \u7b97\u672f\u8fd0\u7b97","text":"<p>In this section, we discuss algorithms and hardware designs for sign test, magnitude comparison, overflow detection, and general division in RNS. The first three of these operations are essentially equivalent in that if an RNS with dynamic range  M  is used for representing signed numbers in the range [\u2212 N ,  P], with  M =  N +  P + 1, then sign test is the same as comparison with  P  and overflow detection can be performed based on the signs of the operands and that of the result. Thus, it suffices to discuss magnitude comparison and general division. </p> <p>\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u8ba8\u8bba RNS \u4e2d\u7b26\u53f7\u6d4b\u8bd5\u3001\u5e45\u5ea6\u6bd4\u8f83\u3001\u6ea2\u51fa\u68c0\u6d4b\u548c\u4e00\u822c\u9664\u6cd5\u7684\u7b97\u6cd5\u548c\u786c\u4ef6\u8bbe\u8ba1\u3002\u524d\u4e09\u4e2a\u64cd\u4f5c\u672c\u8d28\u4e0a\u662f\u7b49\u4ef7\u7684\uff0c\u5982\u679c\u4f7f\u7528\u52a8\u6001\u8303\u56f4\u4e3a \\(M\\) \u7684 RNS \u6765\u8868\u793a \\([\u2212 N , P]\\) \u8303\u56f4\u5185\u7684\u6709\u7b26\u53f7\u6570\uff0c\u5176\u4e2d \\(M = N + P + 1\\)\uff0c\u5219\u7b26\u53f7\u6d4b\u8bd5\u4e0e\u4e0e \\(P\\) \u7684\u6bd4\u8f83\u76f8\u540c\uff0c\u5e76\u4e14\u53ef\u4ee5\u6839\u636e\u64cd\u4f5c\u6570\u7684\u7b26\u53f7\u548c\u7ed3\u679c\u7684\u7b26\u53f7\u8fdb\u884c\u6ea2\u51fa\u68c0\u6d4b\u3002\u56e0\u6b64\uff0c\u8ba8\u8bba\u5927\u5c0f\u6bd4\u8f83\u548c\u4e00\u822c\u9664\u6cd5\u5c31\u8db3\u591f\u4e86\u3002</p> <p>To compare the magnitudes of two RNS numbers, we can convert both to binary</p> <p>or mixed-radix form. However, this would involve a great deal of overhead. A moreefficient approach is through approximate CRT decoding. Dividing the equality in the statement of Theorem 4.1 by  M , we obtain the following expression for the scaled value of  x  in [0, 1):</p> <p>\u4e3a\u4e86\u6bd4\u8f83\u4e24\u4e2a RNS \u6570\u5b57\u7684\u5927\u5c0f\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u4e24\u8005\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u6216\u6df7\u5408\u57fa\u6570\u5f62\u5f0f\u3002\u7136\u800c\uff0c\u8fd9\u5c06\u6d89\u53ca\u5927\u91cf\u7684\u5f00\u9500\u3002\u4e00\u4e2a\u66f4\u6709\u6548\u7684\u65b9\u6cd5\u662f\u901a\u8fc7\u8fd1\u4f3c CRT \u89e3\u7801\u3002\u5c06\u5b9a\u7406 4.1 \u7684\u9648\u8ff0\u4e2d\u7684\u7b49\u5f0f\u9664\u4ee5 M \uff0c\u6211\u4eec\u5f97\u5230 [0, 1) \u4e2d x \u7684\u7f29\u653e\u503c\u7684\u4ee5\u4e0b\u8868\u8fbe\u5f0f\uff1a</p> <p>$$ \\frac{x}{M} = \\frac{(x_{k\u22121} | \u00b7 \u00b7 \u00b7 | x_2 | x_1 | x_0 ) {RNS}}{M} = \\left \\langle \\sum{k-1}m_i \\left \\langle \\alpha_i x_i\\right \\rangle_{m_i} \\right \\rangle_1 $$ Here, the addition of terms is performed modulo 1, meaning that in adding the terms \\(m_i^{-1} \\left \\langle \\alpha_i x_i\\right \\rangle_{m_i}\\), each of which is in [0, 1), the whole part of the result is discarded and only the fractional part is kept; this is much simpler than the modulo- M  addition needed in conventional CRT decoding. </p> <p>\u8fd9\u91cc\uff0c\u9879\u7684\u76f8\u52a0\u662f\u4ee5\u6a21 1 \u8fdb\u884c\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5728\u76f8\u52a0\u9879 \\(m_i^{-1} \\left \\langle \\alpha_i x_i\\right \\rangle_{m_i}\\) \u6bcf\u4e00\u4e2a\u90fd\u5728[0, 1)\u4e2d\uff0c\u7ed3\u679c\u6574\u6570\u4e22\u5f03\uff0c\u53ea\u4fdd\u7559\u5c0f\u6570\u90e8\u5206\uff1b\u8fd9\u6bd4\u4f20\u7edf CRT \u89e3\u7801\u4e2d\u6240\u9700\u7684\u6a21 M \u52a0\u6cd5\u7b80\u5355\u5f97\u591a\u3002</p> <p>Again, the terms  \\(m_i^{-1} \\left \\langle \\alpha_i x_i\\right \\rangle_{m_i}\\) can be precomputed for all possible  i  and  *x*i and stored in tables of total size \u0007k i=\u221201 mi words. Table 4.3 shows the required lookup table for approximate CRT decoding in RNS(8 | 7 | 5 | 3). Conversion is then performed exclusively by table lookups and modulo-1 additions (i.e., fractional addition, with the carry-out simply ignored).</p> <p>\u540c\u6837\u7684\uff0c\u53ef\u4ee5\u9884\u5148\u8ba1\u7b97\u6240\u6709\u53ef\u80fd\u7684 \\(i\\) \u548c \\(x_i\\)\u5bf9\u5e94\u7684\u9879 \\(m_i^{-1} \\left \\langle \\alpha_i x_i\\right \\rangle_{m_i}\\) \u653e\u5728\u4e00\u4e2a\u6709\\(\\sum_{i=0}^{k-1}m_i\\)\u4e2aword\u7684\u8868\u4e2d\u3002\u8868 4.3 \u663e\u793a\u4e86\u8fd1\u4f3c\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\u8ba1\u7b97RNS(8|7|5|3)\u6240\u9700\u7684\u67e5\u627e\u8868\uff0c \u7136\u540e\u4ec5\u6839\u636e\u8868 4.3 \u5e94\u7528\u6240\u9700\u7684\u503c\u8fdb\u884c\u8f6c\u6362\uff0c \u8868\u67e5\u627e\u548c\u6a21 1 \u52a0\u6cd5\uff08\u5373\u5c0f\u6570\u52a0\u6cd5\uff0c\u5ffd\u7565\u8fdb\u4f4d\uff09</p> <p></p> <p>\u88684.3 \u5c06\u8fd1\u4f3c\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\u89e3\u7801\u5e94\u7528\u4e8e RNS(8|7|5|3) \u6240\u9700\u7684\u503c </p> <p>EXAMPLE 4.3 Use approximate CRT decoding to determine the larger of the two numbers x = ( 0 | 6 | 3 | 0 ) RNS and y = ( 5 | 3 | 0 | 0 ) RNS. Reading values from Table 4.3, we get:</p> <p>\u793a\u4f8b4.3 \u4f7f\u7528\u8fd1\u4f3cCRT \u89e3\u7801\u6765\u786e\u5b9a\u4e24\u4e2a\u6570\u5b57\\(x = ( 0 | 6 | 3 | 0 ) _{RNS}\\) \u548c\\(y = ( 5 | 3 | 0 | 0 ) _{RNS}\\) \u4e2d\u8f83\u5927\u7684\u4e00\u4e2a\u3002\u4ece\u8868 4.3 \u4e2d\u8bfb\u53d6\u503c\uff0c\u6211\u4eec\u5f97\u5230\uff1a</p> \\[ \\begin{array}{c} \\frac{x}{M} \\approx \\left \\langle .0000 + .8571 + .2000 + .0000 \\right \\rangle _1 =  .0571 \\\\ \\frac{y}{M} \\approx \\left \\langle .6250 + .4286 + .0000 + .0000 \\right \\rangle _1 =  .0536 \\end{array} \\] <p>Thus, we can conclude that  x &gt; y, subject to approximation errors to be discussed next. </p> <p>\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u7ed3\u8bba\uff0cx &gt; y\uff0c\u4f46\u4f1a\u53d7\u5230\u63a5\u4e0b\u6765\u8ba8\u8bba\u7684\u8fd1\u4f3c\u8bef\u5dee\u7684\u5f71\u54cd\u3002</p> <p>If the maximum error in each table entry is  \u03b5, then approximate CRT decoding yields the scaled value of an RNS number with an error of no more than  k\u03b5. In Example 4.3, assuming that the table entries have been rounded to four decimal digits, the maximum error in each entry is  \u03b5 = 0.000 05 and the maximum error in the scaled value is 4 \u03b5 = 0.0002. The conclusion  x &gt; y  is, therefore, safe. </p> <p>\u5982\u679c\u6bcf\u4e2a\u8868\u6761\u76ee\u4e2d\u7684\u6700\u5927\u8bef\u5dee\u4e3a\u03b5\uff0c\u5219\u8fd1\u4f3cCRT\u89e3\u7801\u4ea7\u751f\u8bef\u5dee\u4e0d\u8d85\u8fc7k\u03b5\u7684RNS\u6570\u7684\u7f29\u653e\u503c\u3002\u5728\u4f8b 4.3 \u4e2d\uff0c\u5047\u8bbe\u8868\u683c\u6761\u76ee\u5df2\u56db\u820d\u4e94\u5165\u4e3a\u56db\u4f4d\u5c0f\u6570\uff0c\u5219\u6bcf\u4e2a\u6761\u76ee\u7684\u6700\u5927\u8bef\u5dee\u4e3a \u03b5 = 0.000 05\uff0c\u6362\u7b97\u503c\u7684\u6700\u5927\u8bef\u5dee\u4e3a 4 \u03b5 = 0.0002\u3002\u56e0\u6b64\uff0c\u7ed3\u8bba x &gt; y \u662f\u5b89\u5168\u7684\u3002</p> <p>Of course we can use highly precise table entries to avoid the possibility of erroneous conclusions altogether. But this would defeat the advantage of approximate CRT decoding in simplicity and speed. Thus, in practice, a two-stage process might be envisaged: a quick approximate decoding process is performed first, with the resulting scaled value(s) and error bound(s) used to decide whether a more precise or exact decoding is needed for arriving at a conclusion. </p> <p>\u5f53\u7136\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u9ad8\u7cbe\u5ea6\u7684\u8868\u683c\u6761\u76ee\u6765\u5b8c\u5168\u907f\u514d\u5f97\u51fa\u9519\u8bef\u7ed3\u8bba\u7684\u53ef\u80fd\u6027\u3002\u4f46\u8fd9\u4f1a\u62b5\u6d88\u8fd1\u4f3c CRT \u89e3\u7801\u5728\u7b80\u5355\u6027\u548c\u901f\u5ea6\u65b9\u9762\u7684\u4f18\u52bf\u3002\u56e0\u6b64\uff0c\u5728\u5b9e\u8df5\u4e2d\uff0c\u53ef\u4ee5\u8bbe\u60f3\u4e00\u4e2a\u4e24\u9636\u6bb5\u7684\u8fc7\u7a0b\uff1a\u9996\u5148\u6267\u884c\u5feb\u901f\u8fd1\u4f3c\u89e3\u7801\u8fc7\u7a0b\uff0c\u4f7f\u7528\u5f97\u5230\u7684\u7f29\u653e\u503c\u548c\u8bef\u5dee\u754c\u9650\u6765\u51b3\u5b9a\u662f\u5426\u9700\u8981\u66f4\u7cbe\u786e\u6216\u66f4\u7cbe\u786e\u7684\u89e3\u7801\u6765\u5f97\u51fa\u7ed3\u8bba\u3002</p> <p>In many practical situations, an exact comparison of  x  and  y  might not be required and a ternary decision result  x &lt; y,  x \u2248  y (i.e., too close to call), or  x &gt; y  might do. In such cases, approximate CRT decoding is just the right tool. For example, in certain division algorithms (to be discussed in Chapter 14), the sign and the magnitude of the partial remainder  s  are used to choose the next quotient digit  qj  from the redundant digit set [\u22121, 1] according to the following:</p> <p>\u5728\u8bb8\u591a\u5b9e\u9645\u60c5\u51b5\u4e0b\uff0c\u53ef\u80fd\u4e0d\u9700\u8981\u5bf9 x \u548c y \u8fdb\u884c\u7cbe\u786e\u6bd4\u8f83\uff0c\u800c\u53ef\u80fd\u9700\u8981\u4e09\u5143\u51b3\u7b56\u7ed3\u679c x &lt; y\u3001x \u2248 y\uff08\u5373\uff0c\u592a\u63a5\u8fd1\u800c\u65e0\u6cd5\u51b3\u5b9a\uff09\u6216 x &gt; y\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8fd1\u4f3c CRT \u89e3\u7801\u6b63\u662f\u6b63\u786e\u7684\u5de5\u5177\u3002\u4f8b\u5982\uff0c\u5728\u67d0\u4e9b\u9664\u6cd5\u7b97\u6cd5\u4e2d\uff08\u5c06\u5728\u7b2c14\u7ae0\u4e2d\u8ba8\u8bba\uff09\uff0c\u90e8\u5206\u4f59\u6570s\u7684\u7b26\u53f7\u548c\u5927\u5c0f\u7528\u4e8e\u6839\u636e\u4ee5\u4e0b\u516c\u5f0f\u4ece\u5197\u4f59\u6570\u5b57\u96c6[\u22121, 1]\u4e2d\u9009\u62e9\u4e0b\u4e00\u4e2a\u5546\u6570\u5b57qj\uff1a</p> <pre><code>       s &lt; 0       quotient digit = \u22121\n       s \u2248 0       quotient digit = 0\n       s &gt; 0       quotient digit = 1\n</code></pre> <p>In this case, the algorithm\u2019s built-in tolerance to imprecision allows us to use it for RNS division. Once the quotient digit in [\u22121, 1] has been chosen, the value  qjd , where  d is the divisor, is subtracted from the partial remainder to obtain the new partial remainder for the next iteration. Also, the quotient, derived in positional radix-2 format using the digit set [\u22121, 1], is converted to RNS on the fly. </p> <p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7b97\u6cd5\u5185\u7f6e\u7684\u5bf9\u4e0d\u7cbe\u786e\u6027\u7684\u5bb9\u5fcd\u5ea6\u5141\u8bb8\u6211\u4eec\u5c06\u5176\u7528\u4e8e RNS \u9664\u6cd5\u3002\u4e00\u65e6\u9009\u62e9\u4e86 [\u22121, 1] \u4e2d\u7684\u5546\u6570\u5b57\uff0c\u5c31\u4ece\u90e8\u5206\u4f59\u6570\u4e2d\u51cf\u53bb\u503c \\(q_jd\\) \uff08\u5176\u4e2d d \u662f\u9664\u6570\uff09\u4ee5\u83b7\u5f97\u4e0b\u4e00\u6b21\u8fed\u4ee3\u7684\u65b0\u90e8\u5206\u4f59\u6570\u3002\u6b64\u5916\uff0c\u4f7f\u7528\u6570\u5b57\u96c6 [\u22121, 1] \u4ee5\u4f4d\u7f6e\u57fa 2 \u683c\u5f0f\u5bfc\u51fa\u7684\u5546\u4f1a\u5373\u65f6\u8f6c\u6362\u4e3a RNS\u3002</p> <p>In other division algorithms, to be discussed in Chapters 14 and 15, approximate comparison of the partial remainder  s  and divisor  d  is used to choose a radix- r  quotient digit in [\u2212 \u03b1,  \u03b2]. An example includes radix-4 division with the redundant quotient digit set [\u22122, 2]. In these cases, too, approximate CRT decoding can be used to facilitate RNS division [Hung94]. </p> <p>\u5728\u7b2c 14 \u7ae0\u548c\u7b2c 15 \u7ae0\u8ba8\u8bba\u7684\u5176\u4ed6\u9664\u6cd5\u7b97\u6cd5\u4e2d\uff0c\u90e8\u5206\u4f59\u6570 s \u548c\u9664\u6570 d \u7684\u8fd1\u4f3c\u6bd4\u8f83\u7528\u4e8e\u9009\u62e9 [\u2212 \u03b1, \u03b2] \u4e2d\u7684\u57fa\u6570 r \u5546\u4f4d\u3002\u4e00\u4e2a\u793a\u4f8b\u5305\u62ec\u5177\u6709\u5197\u4f59\u5546\u6570\u5b57\u96c6 [\u22122, 2] \u7684\u57fa 4 \u9664\u6cd5\u3002\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u8fd1\u4f3c CRT \u89e3\u7801\u6765\u4fc3\u8fdb RNS\u9664\u6cd5 [Hung94]\u3002</p>"},{"location":"Part_01/04/#45-rns","title":"4.5 \u5197\u4f59 RNS \u8868\u793a","text":"<p>Just as the digits in a positional radix- r  number system do not have to be restricted to the set [0,  r \u2212 1], we are not obliged to limit the residue digits for the modulus  mi  to the set [0,  mi \u2212 1]. Instead, we can agree to use the digit set [0,  \u03b2i] for the mod- mi  residue, provided  \u03b2i \u2265  mi \u2212 1. If  \u03b2i \u2265  mi, then the resulting RNS is redundant. </p> <p>\u6b63\u5982\u4f4d\u7f6e\u57fa\u6570 r \u6570\u7cfb\u4e2d\u7684\u6570\u5b57\u4e0d\u5fc5\u9650\u5236\u5728\u96c6\u5408 [\\(0, r \u2212 1\\)] \u4e2d\u4e00\u6837\uff0c\u6211\u4eec\u4e5f\u6ca1\u6709\u4e00\u5b9a\u9700\u8981\u5c06\u6a21 \\(m_i\\) \u7684\u4f59\u6570\u6570\u5b57\u9650\u5236\u5728\u96c6\u5408 [\\(0, m_i \u2212 1\\)] \u4e2d\u3002\u76f8\u53cd\uff0c\u6211\u4eec\u53ef\u4ee5\u540c\u610f\u4f7f\u7528\u6570\u5b57\u96c6 [\\(0, \u03b2_i\\)] \u4f5c\u4e3a mod-\\(m_i\\) \u4f59\u6570\uff0c\u524d\u63d0\u662f \\(\u03b2_i \u2265 m_i \u2212 1\\)\u3002\u5982\u679c \\(\u03b2_i \u2265 m_i\\)\uff0c\u5219\u751f\u6210\u7684 RNS \u662f\u5197\u4f59\u7684\u3002</p> <p>One reason to use redundant residues is to simplify the modular reduction step needed after each arithmetic operation. Consider, for example, the representation of mod-13 residues using 4-bit binary numbers. Instead of using residues in [0, 12], we can use pseudoresidues in [0, 15]. Residues 0, 1, and 2 will then have two representations, since 13 = 0 mod 13, 14 = 1 mod 13, and 15 = 2 mod 13. Addition of such a pseudoresidue y  to an ordinary residue  x, producing a pseudoresidue  z, can be performed by a 4-bit binary adder. If the carry-out is 0, the addition result is kept intact; otherwise, the carry-out, which is worth 16 units, is dropped and 3 is added to the result. Thus, the required mod-13 addition unit is as shown in Fig. 4.3. Addition of two pseudoresidues is possible in a similar way [Parh01]. </p> <p>\u4f7f\u7528\u5197\u4f59\u4f59\u6570\u7684\u539f\u56e0\u4e4b\u4e00\u662f\u7b80\u5316\u6bcf\u6b21\u7b97\u672f\u8fd0\u7b97\u540e\u6240\u9700\u7684\u6a21\u5f52\u7ea6\u6b65\u9aa4\u3002\u4f8b\u5982\uff0c\u8003\u8651 mod-13 \u7684\u8868\u793a\u4f7f\u7528 4 \u4f4d\u4e8c\u8fdb\u5236\u6570\u7684\u4f59\u6570\u3002\u6211\u4eec\u53ef\u4ee5\u5728 [0, 15] \u4e2d\u4f7f\u7528\u4f2a\u4f59\u6570\uff0c\u800c\u4e0d\u662f\u5728 [0, 12] \u4e2d\u3002\u4f59\u6570 0\u30011 \u548c 2 \u5c06\u6709\u4e24\u79cd\u8868\u793a\uff0c\u56e0\u4e3a 13 = 0 mod 13\u300114 = 1 mod 13 \u548c 15 = 2 mod 13\u3002\u5c06\u8fd9\u6837\u7684\u4f2a\u4f59\u6570 y \u6dfb\u52a0\u5230\u666e\u901a\u4f59\u6570 x\uff0c\u4ea7\u751f\u4f2a\u4f59\u6570 z\uff0c\u53ef\u4ee5\u7531 4 \u4f4d\u4e8c\u8fdb\u5236\u52a0\u6cd5\u5668\u6267\u884c\u3002\u5982\u679c\u8fdb\u4f4d\u4e3a0\uff0c\u5219\u52a0\u6cd5\u7ed3\u679c\u4fdd\u6301\u4e0d\u53d8\uff1b\u5426\u5219\uff0c\u503c 16 \u4e2a\u5355\u4f4d\u7684\u8fdb\u4f4d\u5c06\u88ab\u4e22\u5f03\uff0c\u7ed3\u679c\u5c06\u6dfb\u52a0 3\u3002\u56e0\u6b64\uff0c\u6240\u9700\u7684mod-13\u52a0\u6cd5\u5355\u5143\u5982\u56fe4.3\u6240\u793a\u3002\u53ef\u4ee5\u7528\u7c7b\u4f3c\u7684\u65b9\u5f0f\u6dfb\u52a0\u4e24\u4e2a\u4f2a\u4f59\u6570[Parh01]\u3002</p> <p></p> <p>One can go even further and make the pseudoresidues 2 h  bits wide, where normal mod- m  residues would be only  h  bits wide. This simplifies a multiply-accumulate operation, which is done by adding the 2 h-bit product of two normal residues to a 2 h-bit running total, reducing the (2 h + 1)-bit result to a 2 h-bit pseudoresidue for the next step by subtracting 2 hm  from it if needed (Fig. 4.4). Reduction to a standard  h-bit residue is then done only once at the end of accumulation. </p> <p>\u6211\u4eec\u53ef\u4ee5\u66f4\u8fdb\u4e00\u6b65\uff0c\u4f7f\u4f2a\u4f59\u6570\u4e3a \\(2 h\\) \u4f4d\u5bbd\uff0c\u800c\u6b63\u5e38\u7684 mod-m \u4f59\u6570\u53ea\u6709 \\(h\\) \u4f4d\u5bbd\u3002\u8fd9\u7b80\u5316\u4e86\u4e58\u6cd5\u7d2f\u52a0\u8fd0\u7b97\uff0c\u8be5\u8fd0\u7b97\u662f\u901a\u8fc7\u5c06\u4e24\u4e2a\u6b63\u5e38\u6b8b\u6570\u7684 \\(2 h\\) \u4f4d\u4e58\u79ef\u6dfb\u52a0\u5230 \\(2 h\\) \u4f4d\u8fd0\u884c\u603b\u6570\u4e2d\u6765\u5b8c\u6210\u7684\uff0c\u5982\u679c\u9700\u8981\u7684\u8bdd\uff0c\u901a\u8fc7\u4ece\u4e2d\u51cf\u53bb \\(2^hm\\) \u5c06 \\((2 h + 1)\\) \u4f4d\u7ed3\u679c\u51cf\u5c11\u4e3a \\(2 h\\) \u4f4d\u4f2a\u4f59\u6570\uff08\u56fe 4.4\uff09\u3002\u7136\u540e\uff0c\u4ec5\u5728\u7d2f\u52a0\u7ed3\u675f\u65f6\u5c06\u5176\u51cf\u5c11\u5230\u6807\u51c6 h \u4f4d\u4f59\u6570\u3002</p>"},{"location":"Part_01/04/#46-rns","title":"4.6 RNS \u4e2d\u5feb\u901f\u7b97\u672f\u7684\u9650\u5236","text":"<p>How much faster is RNS arithmetic than conventional (say, binary) arithmetic? We will see later in Chapters 6 and 7 that addition of binary numbers in the range \\([0,  M \u2212 1]\\)\u200b can be done in O(log log  M ) time and with O(log  M ) cost using a variety of methods such as carry-lookahead, conditional-sum, or multilevel carry-select. Both these are optimal to within constant factors, given the fixed-radix positional representation. For example, one can use the constant fan-in argument to establish that the circuit depth of an adder must be at least logarithmic in the number  k = log r M  of digits. Redundant representations allow O(1)-time, O(log  M )-cost addition. What is the best one can do with RNS arithmetic? </p> <p>RNS \u7b97\u672f\u6bd4\u4f20\u7edf\uff08\u4f8b\u5982\u4e8c\u8fdb\u5236\uff09\u7b97\u672f\u5feb\u591a\u5c11\uff1f\u6211\u4eec\u7a0d\u540e\u5c06\u5728\u7b2c 6 \u7ae0\u548c\u7b2c 7 \u7ae0\u4e2d\u770b\u5230 [\\(0, M \u2212 1\\)] \u8303\u56f4\u5185\u7684\u4e8c\u8fdb\u5236\u6570\u7684\u52a0\u6cd5\u53ef\u4ee5\u4f7f\u7528\u5404\u79cd\u65b9\u6cd5\uff08\u4f8b\u5982\u8fdb\u4f4d\u524d\u77bb\u3001\u6761\u4ef6\u548c\u6216\u591a\u7ea7\u8fdb\u4f4d\u9009\u62e9\uff09\u5728 \\(O(log log M )\\) \u65f6\u95f4\u5185\u4ee5 \\(O(log M )\\) \u6210\u672c\u5b8c\u6210\u3002\u8003\u8651\u5230\u56fa\u5b9a\u57fa\u6570\u4f4d\u7f6e\u8868\u793a\uff0c\u8fd9\u4e24\u8005\u5728\u5e38\u6570\u56e0\u5b50\u5185\u90fd\u662f\u6700\u4f73\u7684\u3002\u4f8b\u5982\uff0c\u53ef\u4ee5\u4f7f\u7528\u6052\u5b9a\u6247\u5165\u53c2\u6570\u6765\u786e\u5b9a\u52a0\u6cd5\u5668\u7684\u7535\u8def\u6df1\u5ea6\u5fc5\u987b\u81f3\u5c11\u662f\u6570\u5b57 \\(k = log_r M\\) \u7684\u5bf9\u6570\u3002\u5269\u4f59\u6570\u8868\u793a\u5141\u8bb8 O(1) \u65f6\u95f4\u3001O(log M) \u6210\u672c\u76f8\u52a0\u3002\u4f7f\u7528 RNS \u7b97\u6cd5\u53ef\u4ee5\u505a\u7684\u6700\u597d\u7684\u4e8b\u60c5\u662f\u4ec0\u4e48\uff1f</p> <p>Consider the residue number system RNS( mk\u22121 | \u00b7 \u00b7 \u00b7 |  m 1 |  m 0). Assume that the moduli are chosen as the smallest possible prime numbers to minimize the size of the moduli, and thus maximize computation speed. The following theorems from number theory help us in figuring out the complexity. </p> <p>\u8003\u8651\u4f59\u6570\u7cfb\u7edf \\(RNS(m_{k\u22121} | \u00b7 \u00b7 \u00b7 | m_1 | m_0)\\)\u3002\u5047\u8bbe\u6a21\u6570\u88ab\u9009\u62e9\u4e3a\u5c3d\u53ef\u80fd\u5c0f\u7684\u7d20\u6570\uff0c\u4ee5\u6700\u5c0f\u5316\u6a21\u6570\u7684\u5927\u5c0f\uff0c\u4ece\u800c\u6700\u5927\u5316\u8ba1\u7b97\u901f\u5ea6\u3002\u4ee5\u4e0b\u6570\u8bba\u5b9a\u7406\u5e2e\u52a9\u6211\u4eec\u8ba1\u7b97\u590d\u6742\u6027\u3002</p> <p>THEOREM 4.2 The  i th prime  pi  is asymptotically equal to  i  ln  i. </p> <p>\u5b9a\u7406 4.2 \u7b2c i \u4e2a\u7d20\u6570 \\(p_i\\) \u6e10\u8fd1\u7b49\u4e8e \\(i \\ln i\\)\u3002</p> <p>THEOREM 4.3 The number of primes in [1,  n] is asymptotically equal to n/(ln  n). </p> <p>\u5b9a\u7406 4.3 [\\(1, n\\)] \u4e2d\u7684\u7d20\u6570\u4e2a\u6570\u6e10\u8fd1\u7b49\u4e8e \\(n/(\\ln n)\\)\u3002</p> <p>THEOREM 4.4 The product of all primes in [1,  n] is asymptotically equal to  en. </p> <p>\u5b9a\u7406 4.4 [\\(1, n\\)] \u4e2d\u6240\u6709\u7d20\u6570\u7684\u4e58\u79ef\u6e10\u8fd1\u7b49\u4e8e \\(e^n\\)\u3002</p> <p>Table 4.4 lists some numerical values that can help us understand the asymptotic approximations given in Theorems 4.2 and 4.3. </p> <p>\u88684.4\u5217\u51fa\u4e86\u4e00\u4e9b\u6570\u503c\uff0c\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u7406\u89e3\u5b9a\u74064.2\u548c4.3\u4e2d\u7ed9\u51fa\u7684\u6e10\u8fd1\u8fd1\u4f3c\u3002</p> <p></p> <p>Armed with these results from number theory, we can derive an interesting limit on the speed of RNS arithmetic. </p> <p>\u501f\u52a9\u6570\u8bba\u7684\u8fd9\u4e9b\u7ed3\u679c\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa RNS \u7b97\u672f\u901f\u5ea6\u7684\u6709\u8da3\u9650\u5236\u3002</p> <p>THEOREM 4.5 It is possible to represent all  k-bit binary numbers in RNS with O( k/log  k) moduli such that the largest modulus has O(log  k) bits. </p> <p>\u5b9a\u7406 4.5 \u53ef\u4ee5\u7528 \\(O(k/\\log k)\\) \u6a21\u6765\u8868\u793a RNS \u4e2d\u7684\u6240\u6709 k \u4f4d\u4e8c\u8fdb\u5236\u6570\uff0c\u4f7f\u5f97\u6700\u5927\u6a21\u6570\u5177\u6709 \\(O(\\log k)\\) \u4f4d\u3002</p> <p>Proof: If the largest needed prime is  n, by Theorem 4.4, we must have  en \u2248 2 k . This equality implies  n &lt; k. The number of moduli required is the number of primes less than  n, which by Theorem 4.3 is O( n/log  n) = O( k/log  k). </p> <p>\u8bc1\u660e\uff1a\u5982\u679c\u6240\u9700\u7684\u6700\u5927\u7d20\u6570\u662fn\uff0c\u6839\u636e\u5b9a\u74064.4\uff0c\u6211\u4eec\u5fc5\u987b\u6709\\(e^n \u2248 2^k\\) \u3002\u8fd9\u4e2a\u7b49\u5f0f\u610f\u5473\u7740 \\(n &lt; k\\)\u3002\u6240\u9700\u7684\u6a21\u6570\u662f\u5c0f\u4e8e n \u7684\u7d20\u6570\u7684\u4e2a\u6570\uff0c\u6839\u636e\u5b9a\u7406 4.3 \u4e3a \\(O( n/\\log n)\\) = \\(O( k/\\log k)\\)\u3002</p> <p>As a result, addition of such residue numbers can be performed in O(log log log  M ) time and with O(log  M ) cost. So, the cost of addition is asymptotically comparable to that of binary representation whereas the delay is much smaller, though not constant. </p> <p>\u7ed3\u679c\uff0c\u53ef\u4ee5\u5728 \\(O(\\log \\log \\log M )\\) \u65f6\u95f4\u5185\u4ee5 \\(O(\\log M )\\) \u6210\u672c\u6267\u884c\u6b64\u7c7b\u4f59\u6570\u7684\u52a0\u6cd5\u3002\u56e0\u6b64\uff0c\u52a0\u6cd5\u7684\u6210\u672c\u4e0e\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u6210\u672c\u6e10\u8fd1\u76f8\u5f53\uff0c\u800c\u5ef6\u8fdf\u8981\u5c0f\u5f97\u591a\uff0c\u5c3d\u7ba1\u4e0d\u662f\u6052\u5b9a\u7684\u3002</p> <p>If for implementation ease, we limit ourselves to moduli of the form 2 a  or 2 a \u2212 1, the following results from number theory are applicable. </p> <p>\u5982\u679c\u4e3a\u4e86\u4fbf\u4e8e\u5b9e\u73b0\uff0c\u6211\u4eec\u5c06\u6a21\u6570\u9650\u5236\u4e3a \\(2^a\\) \u6216 \\(2^a \u2212 1\\) \u5f62\u5f0f\uff0c\u5219\u9002\u7528\u4ee5\u4e0b\u6570\u8bba\u7ed3\u679c\u3002</p> <p>THEOREM 4.6 The numbers 2 a \u2212 1 and 2 b \u2212 1 are relatively prime if and only if  a  and  b  are relatively prime. </p> <p>\u5b9a\u7406 4.6 \u5f53\u4e14\u4ec5\u5f53 a \u548c b \u4e92\u8d28\u65f6\uff0c\u6570 \\(2^a \u2212 1\\) \u548c \\(2^b \u2212 1\\) \u4e92\u8d28\u3002</p> <p>THEOREM 4.7 The sum of the first  i  primes is asymptotically O( i 2 ln  i). </p> <p>\u5b9a\u7406 4.7 \u524d \\(i\\) \u4e2a\u7d20\u6570\u4e4b\u548c\u6e10\u8fd1\u4e3a \\(O( i^2 \\ln i)\\) \u3002</p> <p>These theorems allow us to prove the following asymptotic result for low-cost residue number systems. </p> <p>\u8fd9\u4e9b\u5b9a\u7406\u4f7f\u6211\u4eec\u80fd\u591f\u8bc1\u660e\u4f4e\u6210\u672c\u5269\u4f59\u6570\u7cfb\u7edf\u7684\u4ee5\u4e0b\u6e10\u8fd1\u7ed3\u679c\u3002</p> <p>THEOREM 4.8 It is possible to represent all  k-bit binary numbers in RNS with O( (k/  log  k) 1 / 2) low-cost moduli of the form 2 a \u22121 such that the largest modulus has O( (k  log  k) 1 / 2) bits. </p> <p>\u5b9a\u7406 4.8 \u53ef\u4ee5\u7528 \\(2^a \u22121\\) \u5f62\u5f0f\u7684 \\(O( (k/ \\log k)^ {1 / 2})\\) \u4f4e\u6210\u672c\u6a21\u6765\u8868\u793a RNS \u4e2d\u7684\u6240\u6709 k \u4f4d\u4e8c\u8fdb\u5236\u6570\uff0c\u4f7f\u5f97\u6700\u5927\u6a21\u6570\u5177\u6709 \\(O( (k \\log k)^{1 / 2})\\) \u4f4d\u3002</p> <p>Proof: If the largest modulus that we need is 2 l \u2212 1, by Theorem, 4.7, we must have $ l^2 \\ln  l \u2248  k$. This implies that  l = O ((k/  log  k) 1 / 2 ). By Theorem 4.2, the l th prime is approximately  pl \u2248  l  ln  l \u2248 O ((k  log  k) 1 / 2 ). The proof is complete upon noting that to minimize the size of the moduli, we pick the  i th modulus to be 2 pi \u2212 1. </p> <p>\u8bc1\u660e\uff1a\u5982\u679c\u6211\u4eec\u9700\u8981\u7684\u6700\u5927\u6a21\u6570\u662f \\(2^l \u2212 1\\)\uff0c\u6839\u636e\u5b9a\u7406 4.7\uff0c\u6211\u4eec\u5fc5\u987b\u6709 l 2 ln l \u2248 k\u3002\u8fd9\u610f\u5473\u7740 \\(l = O ((k/ \\log k)^{1 / 2} )\\)\u3002\u6839\u636e\u5b9a\u7406 4.2\uff0c\u7b2c \\(l\\)\u4e2a\u7d20\u6570\u8fd1\u4f3c\u4e3a \\(p_l \u2248 l ln l \u2248 O ((k \\log k)^{1 / 2} )\\)\u3002\u8bc1\u660e\u5b8c\u6210\u540e\u6ce8\u610f\u5230\uff0c\u4e3a\u4e86\u6700\u5c0f\u5316\u6a21\u6570\u7684\u5927\u5c0f\uff0c\u6211\u4eec\u9009\u62e9\u7b2c \\(i\\) \u4e2a\u6a21\u6570\u4e3a \\(2^{p_i} \u2212 1\\)\u3002</p> <p>As a result, addition of low-cost residue numbers can be performed in O(log log  M ) time with O(log  M ) cost and thus, asymptotically, offers little advantage over binary representation. </p> <p>\u56e0\u6b64\uff0c\u4f4e\u6210\u672c\u4f59\u6570\u7684\u52a0\u6cd5\u53ef\u4ee5\u5728 O(log log M ) \u65f6\u95f4\u5185\u4ee5 O(log M ) \u6210\u672c\u6267\u884c\uff0c\u56e0\u6b64\u6e10\u8fd1\u5730\u4e0e\u4e8c\u8fdb\u5236\u8868\u793a\u76f8\u6bd4\u51e0\u4e4e\u6ca1\u6709\u4f18\u52bf\u3002</p>"},{"location":"Part_01/04/#_1","title":"\u95ee\u9898\uff08\u7565\uff09","text":""},{"location":"Part_01/04/#_2","title":"\u53c2\u8003\u6587\u732e\u548c\u8fdb\u4e00\u6b65\u9605\u8bfb","text":"<pre><code>[Garn59] Garner, H. L., \u201cThe Residue Number System,\u201d IRE Trans. Electronic Computers, Vol.\n         8, pp. 140\u2013147, 1959.\n[Hung94] Hung, C. Y., and B. Parhami, \u201cAn Approximate Sign Detection Method for Residue\n         Numbers and Its Application to RNS Division,\u201d Computers &amp; Mathematics with\n         Applications, Vol. 27, No. 4, pp. 23\u201335, 1994.\n[Hung95] Hung, C. Y., and B. Parhami, \u201cError Analysis of Approximate Chinese-RemainderTheorem Decoding,\u201d IEEE Trans.                 Computers, Vol. 44, No. 11, pp. 1344\u20131348, 1995.\n[Jenk93] Jenkins, W. K., \u201cFinite Arithmetic Concepts,\u201d in Handbook for Digital Signal\n         Processing, S. K. Mitra and J. F. Kaiser (eds.), Wiley, 1993, pp. 611\u2013675.\n[Merr64] Merrill, R.D., \u201cImproving Digital Computer Performance Using Residue Number\n         Theory,\u201d IEEE Trans. Electronic Computers, Vol. 13, No. 2, pp. 93\u2013101, 1964.\n[Omon07] Omondi, A., and B. Premkumar, Residue Number Systems: Theory and\n         Implementation, Imperial College Press, 2007.\n[Parh76] Parhami, B., \u201cLow-Cost Residue Number Systems for Computer Arithmetic,\u201d\n         AFIPS Conf. Proc., Vol. 45 (1976 National Computer Conference), AFIPS Press,\n         1976, pp. 951\u2013956.\n[Parh93] Parhami, B., and H.-F. Lai, \u201cAlternate Memory Compression Schemes for Modular\n         Multiplication,\u201d IEEE Trans. Signal Processing, Vol. 41, pp. 1378\u20131385, 1993.\n[Parh96] Parhami, B., \u201cA Note on Digital Filter Implementation Using Hybrid RNS-Binary\n         Arithmetic,\u201d Signal Processing, Vol. 51, pp. 65-67, 1996.\n[Parh01] Parhami, B., \u201cRNS Representations with Redundant Residues,\u201d Proc. 35th Asilomar\n         Conf. Signals, Systems, and Computers, pp. 1651\u20131655, 2001.\n[Sode86] Soderstrand, M. A., W. K. Jenkins, G. A. Jullien, and F. J. Taylor (eds.), Residue\n         Number System Arithmetic, IEEE Press, 1986.\n[Szab67] Szabo, N. S., and R. I. Tanaka, Residue Arithmetic and Its Applications to Computer\n         Technology, McGraw-Hill, 1967.\n[Verg08] Vergos, H. T., \u201cA Unifying Approach for Weighted and Diminished-1 Modulo 2n + 1\n         Addition,\u201d IEEE Trans. Circuits and Systems II, Vol. 55, No. 10, pp. 1041\u20131045, 2008.\n</code></pre>"},{"location":"Part_02/","title":"\u52a0\u6cd5\u4e0e\u51cf\u6cd5","text":"<p>ADDITION/SUBTRACTION</p> <p>\u201cIn the arithmetic of love, one plus one equals everything, and two minus one equals nothing.\u201d                \u2014  MIGNON MCLAUGHLIN</p> <p>\u201c\u5728\u7231\u60c5\u7684\u7b97\u672f\u4e2d\uff0c\u4e00\u52a0\u4e00\u7b49\u4e8e\u4e00\u5207\uff0c\u4e8c\u51cf\u4e00\u7b49\u4e8e\u96f6\u3002\u201d               \u2014  \u7c73\u683c\u519c.\u9ea6\u514b\u52b3\u683c\u6797</p> <p>\u201cA man has one hundred dollars and you leave him with two dollars, that\u2019s subtraction.\u201d                \u2014  MAE WEST, MY LITTLE CHICKADEE , 1940</p> <p>\u201c\u4e00\u4e2a\u4eba\u6709\u4e00\u767e\u7f8e\u5143\uff0c\u4f60\u7559\u7ed9\u4ed6\u4e24\u7f8e\u5143\uff0c\u8fd9\u5c31\u662f\u51cf\u6cd5\u3002\u201d               \u2014 \u6885.\u97e6\u65af\u7279\uff0c\u6211\u7684\u5c0f\u5c71\u96c0\uff0c1940</p> <p>ADDITION IS THE MOST COMMON ARITHMETIC OPERATION AND ALSO SERVES AS a building block for synthesizing many other operations. Within digital computers, addition is performed extensively both in explicitly specified computation steps and as a part of implicit ones dictated by indexing and other forms of address arithmetic. In simple arithmetic/logic units that lack dedicated hardware for fast multiplication and division, these latter operations are performed as sequences of additions. A review of fast addition schemes is thus an apt starting point in investigating arithmetic algorithms. Subtraction is normally performed by negating the subtrahend and adding the result to the minuend. This is quite natural,given that an adder must handle signed numbers anyway. Even when implemented directly, a subtractor is quite similar to an adder. Thus, in the following four chapters that constitute this part,we focus almost exclusively on addition:</p> <p>\u52a0\u6cd5\u662f\u6700\u5e38\u89c1\u7684\u7b97\u672f\u8fd0\u7b97\uff0c\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u8bb8\u591a\u5176\u4ed6\u8fd0\u7b97\u7684\u6784\u5efa\u5757\u3002 \u5728\u6570\u5b57\u8ba1\u7b97\u673a\u4e2d\uff0c\u52a0\u6cd5\u5728\u660e\u786e\u6307\u5b9a\u7684\u8ba1\u7b97\u6b65\u9aa4\u4e2d\u5e7f\u6cdb\u6267\u884c\uff0c\u5e76\u4e14\u4f5c\u4e3a\u7531\u7d22\u5f15\u548c\u5176\u4ed6\u5f62\u5f0f\u7684\u5730\u5740\u7b97\u672f\u6307\u793a\u7684\u9690\u5f0f\u8ba1\u7b97\u6b65\u9aa4\u7684\u4e00\u90e8\u5206\u3002 \u5728\u7f3a\u4e4f\u7528\u4e8e\u5feb\u901f\u4e58\u6cd5\u548c\u9664\u6cd5\u7684\u4e13\u7528\u786c\u4ef6\u7684\u7b80\u5355\u7b97\u672f/\u903b\u8f91\u5355\u5143\u4e2d\uff0c\u8fd9\u4e9b\u8fd0\u7b97\u901a\u5e38\u4f5c\u4e3a\u52a0\u6cd5\u5e8f\u5217\u6267\u884c\u3002 \u56e0\u6b64\uff0c\u5bf9\u5feb\u901f\u52a0\u6cd5\u65b9\u6848\u7684\u56de\u987e\u662f\u7814\u7a76\u7b97\u672f\u7b97\u6cd5\u7684\u4e00\u4e2a\u5408\u9002\u7684\u8d77\u70b9\u3002 \u51cf\u6cd5\u901a\u5e38\u662f\u901a\u8fc7\u5bf9\u88ab\u51cf\u6570\u53d6\u8d1f\u5e76\u5c06\u7ed3\u679c\u4e0e\u88ab\u51cf\u6570\u76f8\u52a0\u6765\u6267\u884c\u7684\u3002 \u8fd9\u662f\u5f88\u81ea\u7136\u7684\uff0c\u56e0\u4e3a\u52a0\u6cd5\u5668\u65e0\u8bba\u5982\u4f55\u90fd\u5fc5\u987b\u5904\u7406\u5e26\u7b26\u53f7\u7684\u6570\u5b57\u3002 \u5373\u4f7f\u76f4\u63a5\u5b9e\u73b0\uff0c\u51cf\u6cd5\u5668\u4e5f\u4e0e\u52a0\u6cd5\u5668\u975e\u5e38\u76f8\u4f3c\u3002 \u56e0\u6b64\uff0c\u5728\u6784\u6210\u8fd9\u4e00\u90e8\u5206\u7684\u4ee5\u4e0b\u56db\u7ae0\u4e2d\uff0c\u6211\u4eec\u51e0\u4e4e\u5b8c\u5168\u5173\u6ce8\u52a0\u6cd5\uff1a</p> <ul> <li>\u7b2c\u4e94\u7ae0 \u57fa\u7840\u7684\u52a0\u6cd5\u4e0e\u8ba1\u6570\u65b9\u6848 Basic Addition and Counting</li> <li>\u7b2c\u516d\u7ae0 \u8d85\u524d\u8fdb\u4f4d\u52a0\u6cd5\u5668 Cary-Lookahead Adders</li> <li>\u7b2c\u4e03\u7ae0 \u5176\u5b83\u9ad8\u901f\u52a0\u6cd5\u5668 Variations in Fast Adders</li> <li>\u7b2c\u516b\u7ae0 \u591a\u64cd\u4f5c\u6570\u52a0\u6cd5 Multi-operand Addition</li> </ul>"},{"location":"Part_02/05/","title":"5. \u57fa\u7840\u7684\u52a0\u6cd5\u4e0e\u8ba1\u6570\u65b9\u6848","text":"<p>Basic Addition and Counting</p> <p>\u201cNot everything that can be counted counts,and not everything that counts can be counted.\u201d               \u2014 ALBERT EINSTEIN</p> <p>\u201c\u4e0d\u662f\u6240\u6709\u53ef\u4ee5\u8ba1\u7b97\u7684\u4e1c\u897f\u90fd\u91cd\u8981\uff0c\u4e5f\u4e0d\u662f\u6240\u6709\u91cd\u8981\u7684\u4e1c\u897f\u90fd\u53ef\u4ee5\u8ba1\u7b97\u3002\u201d               \u2014 \u827e\u5c14\u4f2f\u7279\u7231\u56e0\u65af\u5766</p> <p>As stated in Section 3.1, propagation of carries is a major impediment to high speed addition with fixed-radix positional number representations. Before exploring various ways of speeding up the carry-propagation process, however, we need to examine simple ripple-carry adders, the building blocks used in their construction, the nature of the carry-propagation process, and the special case of counting.Chapter topics include:</p> <p>\u5982\u7b2c 3.1 \u8282\u6240\u8ff0\uff0c\u8fdb\u4f4d\u4f20\u64ad\u662f\u56fa\u5b9a\u57fa\u6570\u4f4d\u7f6e\u6570\u8868\u793a\u6cd5\u505a\u9ad8\u901f\u52a0\u6cd5\u7684\u4e3b\u8981\u969c\u788d\u3002 \u7136\u800c\uff0c\u5728\u63a2\u7d22\u52a0\u901f\u8fdb\u4f4d\u4f20\u64ad\u8fc7\u7a0b\u7684\u5404\u79cd\u65b9\u6cd5\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u7814\u7a76\u7b80\u5355\u7684\u8109\u52a8\u8fdb\u4f4d\u52a0\u6cd5\u5668\u3001\u5176\u6784\u9020\u4e2d\u4f7f\u7528\u7684\u6784\u5efa\u5757\u3001\u8fdb\u4f4d\u4f20\u64ad\u8fc7\u7a0b\u7684\u6027\u8d28\u4ee5\u53ca\u8ba1\u6570\u7684\u7279\u6b8a\u60c5\u51b5\u3002 \u4e3b\u9898\u5305\u62ec\uff1a</p> <ul> <li>5.1 \u4f4d\u4e32\u884c\u52a0\u6cd5\u5668\u4e0e\u9010\u4f4d\u8fdb\u4f4d\u52a0\u6cd5\u5668 BIT SERIAL AND RIPPLE-CARRY ADDERS</li> <li>5.2 \u6761\u4ef6\u4e0e\u5f02\u5e38 CONDITIONS AND EXCEPTIONS</li> <li>5.3 \u8fdb\u4f4d\u4f20\u64ad\u5206\u6790 ANALYSIS OF CARRY PROPAGATION</li> <li>5.4 \u8fdb\u4f4d\u5b8c\u6210\u7684\u68c0\u6d4b CARRY-COMPLETION DETECTION</li> <li>5.5 \u52a0\u4e0a\u4e00\u4e2a\u5e38\u6570:\u8ba1\u6570\u5668 ADDITION OF A CONSTANT: COUNTERS</li> <li>5.6 \u66fc\u5f7b\u65af\u7279\u8fdb\u4f4d\u94fe\u4e0e\u52a0\u6cd5\u5668 MANCHESTER CARRY CHAINS AND ADDERS</li> </ul>"},{"location":"Part_02/05/#51","title":"5.1 \u4f4d\u4e32\u884c\u52a0\u6cd5\u5668\u4e0e\u9010\u4f4d\u8fdb\u4f4d\u52a0\u6cd5\u5668","text":"<p>Single-bit half-adders (HAs) and full adders (FAs) are versatile building blocks that are used in synthesizing adders and many other arithmetic circuits. A HA receives two input bits x and y, producing a sum bit s = x \u2295 y = xy \u2228 xy and a carry bit c = xy. Figure 5.1 depicts three of the many possible logic realizations of a HA. A HA can be viewed as a single-bit binary adder that produces the 2-bit sum of its 1-bit inputs, namely, \\(x + y = (c_{out}\\ s)_{two}\\), where the plus sign in this expression stands for arithmetic sum rather than logical OR.</p> <p>\u5355\u6bd4\u7279\u534a\u52a0\u5668 (HA) \u548c\u5168\u52a0\u5668 (FA) \u662f\u901a\u7528\u6784\u5efa\u6a21\u5757\uff0c\u7528\u4e8e\u5408\u6210\u52a0\u6cd5\u5668\u548c\u8bb8\u591a\u5176\u4ed6\u7b97\u672f\u7535\u8def\u3002 HA \u63a5\u6536\u4e24\u4e2a\u8f93\u5165\u4f4d x \u548c y\uff0c\u4ea7\u751f\u548c \\(s = x \u2295 y = xy \u2228 xy\\) \u4e0e\u8fdb\u4f4d \\(c = xy\\)\u3002\u56fe 5.1 \u63cf\u8ff0\u4e86 HA \u7684\u591a\u79cd\u53ef\u80fd\u903b\u8f91\u5b9e\u73b0\u4e2d\u7684\u4e09\u79cd\u3002 HA \u53ef\u4ee5\u88ab\u89c6\u4e3a\u4e00\u4f4d\u4e8c\u8fdb\u5236\u52a0\u6cd5\u5668\uff0c\u5b83\u4ea7\u751f 1 \u4f4d\u8f93\u5165\u7684 2 \u4f4d\u548c\uff0c\u5373 \\(x + y = (c_{out}\\ s)_2\\)\uff0c\u5176\u4e2d\u8be5\u8868\u8fbe\u5f0f\u4e2d\u7684\u52a0\u53f7\u4ee3\u8868\u7b97\u672f\u548c\u800c\u4e0d\u662f\u903b\u8f91\u6216\u3002</p> <p></p> <p>\u4e00\u6bd4\u7279\u7684\u5168\u52a0\u5668 FA\u5b9a\u4e49\u4e3a\uff1a</p> \\[ \\begin{array}{l} \\text{\u8f93\u5165: } &amp;\\text{\u64cd\u4f5c\u6570 x, y \u548c\u8f93\u5165\u8fdb\u4f4d }c_{in} &amp;(\\text{\u6216\u7b2ci\u7ea7\u7684 }x_i, y_i, c_i)\\\\ \\text{\u8f93\u51fa: } &amp;\\text{\u52a0\u6cd5\u7684\u548c s \u548c\u8f93\u51fa\u8fdb\u4f4d}c_{out} &amp;(\\text{\u6216\u7b2ci\u7ea7\u7684 }s_i, c_{i+1}) \\\\ &amp; s=x \\oplus y \\oplus c_{in} &amp;(\\text{\u5947\u6570\u6821\u9a8c\u51fd\u6570 odd parity function}) \\\\ &amp; \\ \\ = xyc_{in} \\vee \\bar{x}\\bar{y}c_{in} \\vee \\bar{x}y\\bar{c_{in}} \\vee x\\bar{y}\\bar{c_{in}} \\\\ &amp; c_{out}=xy \\vee xc_{in} \\vee yc_{in} &amp;(\\text{\u591a\u6570\u51fd\u6570 majority function}) \\end{array} \\] <p>An FA can be implemented by using two HAs and an OR gate as shown in Fig. 5.2a. The OR gate in Fig. 5.2a can be replaced with a NAND gate if the two HAs are NAND-gate HAs with complemented carry outputs. Alternatively, one can implement an FA as two-level AND-OR/NAND-NAND circuits according to the preceding logic equations for  s  and  c out (Fig. 5.2b). Because of the importance of the FA as an arithmetic building block, many optimized FA designs exist for a variety of implementation technologies. Figure 5.2c shows an FA, built of seven inverters and two 4-to-1 multiplexers (mux), that is suitable for complementary metal-oxide semiconductor (CMOS) transmission-gate logic implementation. </p> <p>FA \u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u4e24\u4e2a HA \u548c\u4e00\u4e2a OR \u95e8\u6765\u5b9e\u73b0\uff0c\u5982\u56fe 5.2a \u6240\u793a\u3002 \u5982\u679c\u4e24\u4e2a HA \u662f\u5177\u6709\u4e92\u8865\u8fdb\u4f4d\u8f93\u51fa\u7684 NAND \u95e8 HA\uff0c\u5219\u56fe 5.2a \u4e2d\u7684 OR \u95e8\u53ef\u4ee5\u7528 NAND \u95e8\u4ee3\u66ff\u3002 \u6216\u8005\uff0c\u53ef\u4ee5\u6839\u636e\u524d\u9762\u7684 s \u548c c out \u903b\u8f91\u65b9\u7a0b\u5c06 FA \u5b9e\u73b0\u4e3a\u4e24\u7ea7 AND-OR/NAND-NAND \u7535\u8def\uff08\u56fe 5.2b\uff09\u3002 \u7531\u4e8e FA \u4f5c\u4e3a\u7b97\u672f\u6784\u5efa\u6a21\u5757\u7684\u91cd\u8981\u6027\uff0c\u56e0\u6b64\u9488\u5bf9\u5404\u79cd\u5b9e\u73b0\u6280\u672f\u5b58\u5728\u8bb8\u591a\u4f18\u5316\u7684 FA \u8bbe\u8ba1\u3002 \u56fe 5.2c \u663e\u793a\u4e86\u7531\u4e03\u4e2a\u53cd\u76f8\u5668\u548c\u4e24\u4e2a 4 \u9009 1 \u591a\u8def\u590d\u7528\u5668 (mux) \u6784\u6210\u7684 FA\uff0c\u9002\u7528\u4e8e\u4e92\u8865\u91d1\u5c5e\u6c27\u5316\u7269\u534a\u5bfc\u4f53 (CMOS) \u4f20\u8f93\u95e8\u903b\u8f91\u5b9e\u73b0\u3002</p> <p></p> <p>Full and half-adders can be used for realizing a variety of arithmetic functions. We will see many examples in this and the following chapters. For instance, a bit-serial adder can be built from an FA and a carry flip-flop, as shown in Fig. 5.3a. The operands are supplied to the FA 1 bit per clock cycle, beginning with the least-significant bit, from a pair of shift registers, and the sum is shifted into a result register. Addition of k-bit numbers can thus be completed in  k  clock cycles. A  k-bit ripple-carry binary adder requires  k  FAs, with the carry-out of the  i th FA connected to the carry-in input of the ( i + 1)th FA. The resulting  k-bit adder produces a  k-bit sum output and a carry-out; alternatively,  c out can be viewed as the most-significant bit of a ( k + 1)-bit sum. Figure 5.3b shows a ripple-carry adder for 4-bit operands, producing a 4-bit or 5-bit sum. </p> <p>\u5168\u52a0\u5668\u548c\u534a\u52a0\u5668\u53ef\u7528\u4e8e\u5b9e\u73b0\u591a\u79cd\u7b97\u672f\u529f\u80fd\u3002\u6211\u4eec\u5c06\u5728\u672c\u7ae0\u548c\u540e\u7eed\u7ae0\u8282\u4e2d\u770b\u5230\u8bb8\u591a\u793a\u4f8b\u3002\u4f8b\u5982\uff0c\u4f4d\u4e32\u884c\u52a0\u6cd5\u5668\u53ef\u4ee5\u7531 FA \u548c\u8fdb\u4f4d\u89e6\u53d1\u5668\u6784\u5efa\uff0c\u5982\u56fe 5.3a \u6240\u793a\u3002\u6bcf\u4e2a\u65f6\u949f\u5468\u671f\u4ece\u6700\u4f4e\u6709\u6548\u4f4d\u5f00\u59cb\uff0c\u4ece\u4e00\u5bf9\u79fb\u4f4d\u5bc4\u5b58\u5668\u5411 FA \u63d0\u4f9b 1 \u4f4d\u64cd\u4f5c\u6570\uff0c\u5e76\u5c06\u603b\u548c\u79fb\u5165\u7ed3\u679c\u5bc4\u5b58\u5668\u3002\u56e0\u6b64\uff0ck\u4f4d\u6570\u7684\u52a0\u6cd5\u53ef\u4ee5\u5728k\u4e2a\u65f6\u949f\u5468\u671f\u5185\u5b8c\u6210\u3002 k \u4f4d\u7eb9\u6ce2\u8fdb\u4f4d\u4e8c\u8fdb\u5236\u52a0\u6cd5\u5668\u9700\u8981 k \u4e2a FA\uff0c\u7b2c i \u4e2a FA \u7684\u8fdb\u4f4d\u8f93\u51fa\u8fde\u63a5\u5230\u7b2c ( i + 1) \u4e2a FA \u7684\u8fdb\u4f4d\u8f93\u5165\u3002\u7531\u6b64\u4ea7\u751f\u7684 k \u4f4d\u52a0\u6cd5\u5668\u4ea7\u751f k \u4f4d\u548c\u8f93\u51fa\u548c\u8fdb\u4f4d\u8f93\u51fa\uff1b\u6216\u8005\uff0cc out \u53ef\u4ee5\u88ab\u89c6\u4e3a ( k + 1) \u4f4d\u548c\u7684\u6700\u9ad8\u6709\u6548\u4f4d\u3002\u56fe 5.3b \u663e\u793a\u4e86 4 \u4f4d\u64cd\u4f5c\u6570\u7684\u7eb9\u6ce2\u8fdb\u4f4d\u52a0\u6cd5\u5668\uff0c\u4ea7\u751f 4 \u4f4d\u6216 5 \u4f4d\u548c\u3002</p> <p></p> <p>The ripple-carry adder shown in Fig. 5.3b leads directly to a CMOS implementation with transmission-gate logic using the FA design of Fig. 5.2c. A possible layout is depicted in Fig. 5.4, which also shows the approximate area requirements for the 4-bit ripple-carry adder in units of \u03bb (half the minimum feature size). For details of this particular design, refer to [Puck94, pp. 213\u2013223].</p> <p>\u56fe 5.3b \u6240\u793a\u7684\u7eb9\u6ce2\u8fdb\u4f4d\u52a0\u6cd5\u5668\u76f4\u63a5\u5bfc\u81f4\u4f7f\u7528\u56fe 5.2c \u7684 FA \u8bbe\u8ba1\u7684\u5e26\u6709\u4f20\u8f93\u95e8\u903b\u8f91\u7684 CMOS \u5b9e\u73b0\u3002\u56fe 5.4 \u63cf\u8ff0\u4e86\u4e00\u79cd\u53ef\u80fd\u7684\u5e03\u5c40\uff0c\u5176\u4e2d\u8fd8\u663e\u793a\u4e86 4 \u4f4d\u7eb9\u6ce2\u8fdb\u4f4d\u52a0\u6cd5\u5668\u7684\u5927\u81f4\u9762\u79ef\u8981\u6c42\uff0c\u5355\u4f4d\u4e3a \u03bb\uff08\u6700\u5c0f\u7279\u5f81\u5c3a\u5bf8\u7684\u4e00\u534a\uff09\u3002\u6709\u5173\u6b64\u7279\u5b9a\u8bbe\u8ba1\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 [Puck94\uff0c\u7b2c 213\u2013223 \u9875]\u3002</p> <p></p> <p>The latency of a  k-bit ripple-carry adder can be derived by considering the worst-case signal propagation path. As shown in Fig. 5.5, the critical path usually begins at the  x 0 or  y 0 input, proceeds through the carry-propagation chain to the leftmost FA, and terminates at the  sk\u22121 output. Of course, it is possible that for some FA implementations, the critical path might begin at  c 0 and/or terminate at  ck . However, given that the delay from carry-in to carry-out is more important than from  x  to carry-out or from carry-in to s, FA designs often minimize the delay from carry-in to carry-out, making the path shown in Fig. 5.5 the one with the largest delay. </p> <p>\\(k\\) \u4f4d\u7eb9\u6ce2\u8fdb\u4f4d\u52a0\u6cd5\u5668\u7684\u5ef6\u8fdf\u53ef\u4ee5\u901a\u8fc7\u8003\u8651\u6700\u574f\u60c5\u51b5\u7684\u4fe1\u53f7\u4f20\u64ad\u8def\u5f84\u6765\u5f97\u51fa\u3002\u5982\u56fe 5.5 \u6240\u793a\uff0c\u5173\u952e\u8def\u5f84\u901a\u5e38\u4ece x 0 \u6216 y 0 \u8f93\u5165\u5f00\u59cb\uff0c\u901a\u8fc7\u8fdb\u4f4d\u4f20\u64ad\u94fe\u5230\u8fbe\u6700\u5de6\u8fb9\u7684 FA\uff0c\u5e76\u5728 \\(s_{k\u22121}\\) \u8f93\u51fa\u5904\u7ec8\u6b62\u3002\u5f53\u7136\uff0c\u5bf9\u4e8e\u67d0\u4e9b FA \u5b9e\u73b0\uff0c\u5173\u952e\u8def\u5f84\u53ef\u80fd\u59cb\u4e8e \\(c_0\\) \u4e0e/\u6216\u7ec8\u6b62\u4e8e \\(c_k\\) \u3002\u7136\u800c\uff0c\u8003\u8651\u5230\u4ece\u8fdb\u4f4d\u5230\u8fdb\u4f4d\u7684\u5ef6\u8fdf\u6bd4\u4ecex\u5230\u8fdb\u4f4d\u6216\u4ece\u8fdb\u4f4d\u5230s\u66f4\u91cd\u8981\uff0cFA\u8bbe\u8ba1\u901a\u5e38\u4f1a\u6700\u5c0f\u5316\u4ece\u8fdb\u4f4d\u5230\u8fdb\u4f4d\u7684\u5ef6\u8fdf\uff0c\u4f7f\u56fe5.5\u6240\u793a\u7684\u8def\u5f84\u6210\u4e3a\u5ef6\u8fdf\u6700\u5927\u7684\u8def\u5f84\u3002</p> <p></p> <p>We can thus write the following expression for the latency of a  k-bit ripple-carry adder:</p> <p>\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3a k \u4f4d\u7eb9\u6ce2\u8fdb\u4f4d\u52a0\u6cd5\u5668\u7684\u5ef6\u8fdf\u7f16\u5199\u4ee5\u4e0b\u8868\u8fbe\u5f0f\uff1a</p> \\[ T_{ripple\u2212add} = T_{FA} (x, y \u2192 c out ) + (k \u2212 2 ) \u00d7 T_{FA} (c_{in} \u2192 c_{out} ) + T_{FA} (c_{in} \u2192 s)  \\] <p>where  \\(T_{FA}(input \u2192 output)\\) represents the latency of an FA on the path between its specified input and output. As an approximation to the foregoing, we can say that the latency of a ripple-carry adder is \\(kT _{FA}\\) </p> <p>\u5176\u4e2d \\(T_{FA}(\u8f93\u5165 \u2192 \u8f93\u51fa)\\) \u8868\u793a FA \u5728\u5176\u6307\u5b9a\u8f93\u5165\u548c\u8f93\u51fa\u4e4b\u95f4\u7684\u8def\u5f84\u4e0a\u7684\u5ef6\u8fdf\u3002\u4f5c\u4e3a\u524d\u8ff0\u7684\u8fd1\u4f3c\uff0c\u6211\u4eec\u53ef\u4ee5\u8bf4\u884c\u6ce2\u8fdb\u4f4d\u52a0\u6cd5\u5668\u7684\u5ef6\u8fdf\u4e3a \\(kT _{FA}\\) \u3002</p> <p>We see that the latency grows linearly with  k, making the ripple-carry design undesirable for large  k  or for high-performance arithmetic units. Note that the latency of a bit-serial adder is also O( k), although the constant of proportionality is larger here because of the latching and clocking overheads. </p> <p>\u6211\u4eec\u770b\u5230\u5ef6\u8fdf\u968f k \u7ebf\u6027\u589e\u957f\uff0c\u4f7f\u5f97\u7eb9\u6ce2\u8fdb\u4f4d\u8bbe\u8ba1\u5bf9\u4e8e\u5927 k \u6216\u9ad8\u6027\u80fd\u7b97\u672f\u5355\u5143\u6765\u8bf4\u662f\u4e0d\u53ef\u53d6\u7684\u3002\u8bf7\u6ce8\u610f\uff0c\u4f4d\u4e32\u884c\u52a0\u6cd5\u5668\u7684\u5ef6\u8fdf\u4e5f\u662f \\(O(k)\\)\uff0c\u5c3d\u7ba1\u7531\u4e8e\u9501\u5b58\u548c\u65f6\u949f\u5f00\u9500\uff0c\u6bd4\u4f8b\u5e38\u6570\u5728\u8fd9\u91cc\u8f83\u5927\u3002</p> <p>Full and half-adders, as well as multibit binary adders, are powerful building blocks that can also be used in realizing nonarithmetic functions if the need arises. For example, a 4-bit binary adder with  c in, two 4-bit operand inputs,  c out, and a 4-bit sum output can be used to synthesize the four-variable logic function  w \u2228  xyz  and its complement, as depicted and justified in Fig. 5.6. The logic expressions written next to the arrows in Fig. 5.6 represent the carries between various stages. Note, however, that the 4-bit adder need not be implemented as a ripple-carry adder for the results at the outputs to be valid.</p> <p>\u5168\u52a0\u6cd5\u5668\u548c\u534a\u52a0\u6cd5\u5668\u4ee5\u53ca\u591a\u4f4d\u4e8c\u8fdb\u5236\u52a0\u6cd5\u5668\u662f\u529f\u80fd\u5f3a\u5927\u7684\u6784\u5efa\u5757\uff0c\u5982\u679c\u9700\u8981\uff0c\u4e5f\u53ef\u7528\u4e8e\u5b9e\u73b0\u975e\u7b97\u672f\u51fd\u6570\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a\u5177\u6709 \\(c_{in}\\) \u3001\u4e24\u4e2a 4 \u4f4d\u64cd\u4f5c\u6570\u8f93\u5165, \\(c_{out}\\) \u548c\u4e00\u4e2a 4 \u4f4d\u548c\u8f93\u51fa\u7684 4 \u4f4d\u4e8c\u8fdb\u5236\u52a0\u6cd5\u5668\u53ef\u7528\u4e8e\u5408\u6210\u56db\u53d8\u91cf\u903b\u8f91\u51fd\u6570$ w \u2228 xyz$ \u53ca\u5176\u6c42\u53cd\uff0c\u5982\u56fe 5.6 \u6240\u793a\u548c\u8bc1\u660e\u3002\u7bad\u5934\u65c1\u8fb9\u5199\u7684\u903b\u8f91\u8868\u8fbe\u5f0f\u8868\u793a\u5404\u4e2a\u9636\u6bb5\u4e4b\u95f4\u7684\u8fdb\u4f4d\u3002\u4f46\u8bf7\u6ce8\u610f\u7684\u662f4 \u4f4d\u52a0\u6cd5\u5668\u4e0d\u4e00\u5b9a\u5b9e\u73b0\u4e3a\u7eb9\u6ce2\u8fdb\u4f4d\u52a0\u6cd5\u5668\uff0c\u8f93\u51fa\u7ed3\u679c\u8fd8\u662f\u540c\u6837\u6709\u6548\u7684\u3002</p> <p></p>"},{"location":"Part_02/05/#52","title":"5.2 \u6761\u4ef6\u4e0e\u5f02\u5e38","text":"<p>When a  k-bit adder is used in an arithmetic/logic unit (ALU), it is customary to provide the  k-bit sum along with information about the following outcomes, which are associated with flag bits within a condition/exception register:</p> <p>\u5f53\u7b97\u672f/\u903b\u8f91\u5355\u5143 (ALU) \u4e2d\u4f7f\u7528 k \u4f4d\u52a0\u6cd5\u5668\u65f6\uff0c\u901a\u5e38\u4f1a\u63d0\u4f9b k \u4f4d\u548c\u4ee5\u53ca\u6709\u5173\u4ee5\u4e0b\u7ed3\u679c\u7684\u4fe1\u606f\uff0c\u8fd9\u4e9b\u7ed3\u679c\u4e0e\u6761\u4ef6/\u5f02\u5e38\u5bc4\u5b58\u5668\u4e2d\u7684\u6807\u5fd7\u4f4d\u76f8\u5173\u8054\uff1a</p> \\[ \\begin{array}{l} c_{out}  &amp; \\text{\u8868\u793a\u4ea7\u751f\u4e86 1 \u7684\u8fdb\u4f4d\u8f93\u51fa} \\\\ Overflow &amp; \\text{\u8868\u793a\u8f93\u51fa\u7684\u548c\u4e0d\u6b63\u786e} \\\\ Negative &amp; \\text{\u8868\u793a\u76f8\u52a0\u7ed3\u679c\u4e3a\u8d1f} \\\\ Zero     &amp; \\text{\u8868\u793a\u76f8\u52a0\u7ed3\u679c\u4e3a\u96f6} \\\\ \\end{array} \\] <p>When we are adding unsigned numbers,  c out and \u201coverflow\u201d are one and the same, and the \u201csign\u201d condition is obviously irrelevant. For 2\u2019s-complement addition, overflow occurs when two numbers of like sign are added and a result of the opposite sign is produced. Thus</p> <p>\u5f53\u6211\u4eec\u5bf9\u65e0\u7b26\u53f7\u6570\u8fdb\u884c\u52a0\u6cd5\u65f6\uff0c\\(c_{out}\\) \u548c\u201coverflow\u201d\u662f\u4e00\u56de\u4e8b\uff0c\u800c\u201csign\u201d\u6761\u4ef6\u663e\u7136\u662f\u4e0d\u76f8\u5173\u7684\u3002\u5bf9\u4e8e 2 \u7684\u8865\u7801\u52a0\u6cd5\uff0c\u5f53\u4e24\u4e2a\u76f8\u540c\u7b26\u53f7\u7684\u6570\u5b57\u76f8\u52a0\u5e76\u4ea7\u751f\u76f8\u53cd\u7b26\u53f7\u7684\u7ed3\u679c\u65f6\uff0c\u5c31\u4f1a\u53d1\u751f\u6ea2\u51fa\u3002\u56e0\u6b64</p> <p>\u200b       \\(Overflow_{2\u2019s-compl} = x_{k\u22121} y_{k\u22121} \\bar{s}_{k\u22121} \\vee \\bar{x}_{k\u22121} \\bar{y}_{k\u22121} s_{k\u22121}\\)</p> <p>It is fairly easy to show that overflow in 2\u2019s-complement addition can be detected from the leftmost two carries as follows:</p> <p>\u5f88\u5bb9\u6613\u8bc1\u660e\uff0c\u53ef\u4ee5\u4ece\u6700\u5de6\u8fb9\u7684\u4e24\u4e2a\u8fdb\u4f4d\u68c0\u6d4b\u5230 2 \u8865\u7801\u52a0\u6cd5\u4e2d\u7684\u6ea2\u51fa\uff0c\u5982\u4e0b\u6240\u793a\uff1a</p> <p>\u200b       \\(Overflow_{2\u2019s-compl} = c_k \\oplus c_{k\u22121} = c_k\\bar{c}_{k\u22121} \\vee \\bar{c}_kc_{k\u22121}\\)</p> <p>In 2\u2019s-complement addition,  c out has no significance. However, since a single adder is frequently used to add both unsigned and 2\u2019s-complement numbers,  c out is a useful output as well. Figure 5.7 shows a ripple-carry implementation of an unsigned or 2\u2019s-complement adder with auxiliary outputs for conditions and exceptions. Because of the large number of inputs into the NOR gate that tests for 0, it must be implemented as an OR tree followed by an inverter. </p> <p>\u5728 2 \u7684\u8865\u7801\u52a0\u6cd5\u4e2d\uff0c\\(c_{out}\\) \u6ca1\u6709\u610f\u4e49\u3002\u7136\u800c\uff0c\u7531\u4e8e\u5355\u4e2a\u52a0\u6cd5\u5668\u7ecf\u5e38\u7528\u4e8e\u5c06\u65e0\u7b26\u53f7\u6570\u548c 2 \u8865\u7801\u6570\u76f8\u52a0\uff0c\u56e0\u6b64 \\(c_{out}\\) \u4e5f\u662f\u4e00\u4e2a\u6709\u7528\u7684\u8f93\u51fa\u3002\u56fe 5.7 \u663e\u793a\u4e86\u5e26\u6761\u4ef6\u548c\u5f02\u5e38\u8f85\u52a9\u8f93\u51fa\u7684\u65e0\u7b26\u53f7\u6216 2 \u8865\u7801\u52a0\u6cd5\u5668\u7684\u7eb9\u6ce2\u8fdb\u4f4d\u5b9e\u73b0\u3002\u7531\u4e8e\u6d4b\u8bd5 0 \u7684 NOR \u95e8\u6709\u5927\u91cf\u8f93\u5165\uff0c\u56e0\u6b64\u5fc5\u987b\u5c06\u5176\u5b9e\u73b0\u4e3a OR \u6811\uff0c\u540e\u8ddf\u4e00\u4e2a\u53cd\u76f8\u5668\u3002</p> <p></p> <p>When the sum of unsigned input operands is too large for representation in  k  bits, an overflow exception is indicated by the  c out signal in Fig. 5.5 and a \u201cwrapped\u201d value, which is 2 k  less than the correct sum, appears as the output. A similar wrapped value may appear for signed addition in the event of overflow. In certain applications, a \u201csaturated\u201d  value would be more appropriate than a wrapped value because a saturated value at least maintains the proper ordering of various sums. For example, if the numbers being manipulated represent the pixel intensities in an image, then an intensity value that is too large should be represented as the maximum possible intensity level, rather than as a wrapped value that could be much smaller. A saturating unsigned adder can be obtained from any unsigned adder design by using a multiplexer at the output, with its control input tied to the adder\u2019s overflow signal. A signed saturating adder can be similarly designed.</p> <p>\u5f53\u65e0\u7b26\u53f7\u8f93\u5165\u64cd\u4f5c\u6570\u7684\u603b\u548c\u592a\u5927\u800c\u65e0\u6cd5\u7528 k \u4f4d\u8868\u793a\u65f6\uff0c\u56fe 5.5 \u4e2d\u7684 \\(c_{out}\\) \u4fe1\u53f7\u4f1a\u6307\u793a\u6ea2\u51fa\u5f02\u5e38\uff0c\u5e76\u4e14\u8f93\u51fa\u4f1a\u51fa\u73b0\u6bd4\u6b63\u786e\u603b\u548c\u5c0f \\(2^k\\) \u7684\u201c\u7ed5\u56de\u201d\u7684\u622a\u65ad\u503c\u3002\uff0c\u6709\u7b26\u53f7\u52a0\u6cd5\u5982\u679c\u53d1\u751f\u6ea2\u51fa\u4e5f\u53ef\u80fd\u4f1a\u51fa\u73b0\u7c7b\u4f3c\u7684\u7ed5\u56de\u503c\u3002\u5728\u67d0\u4e9b\u5e94\u7528\u4e2d\uff0c\u201c\u9971\u548c\u201d\u503c\u6bd4\u7ed5\u56de\u503c\u66f4\u5408\u9002\uff0c\u56e0\u4e3a\u9971\u548c\u503c\u81f3\u5c11\u7ef4\u6301\u4e86\u7ed3\u679c\u7684\u6b63\u786e\u6392\u5e8f\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6240\u64cd\u4f5c\u7684\u6570\u5b57\u8868\u793a\u56fe\u50cf\u4e2d\u7684\u50cf\u7d20\u5f3a\u5ea6\uff0c\u5219\u592a\u5927\u7684\u5f3a\u5ea6\u503c\u5e94\u8868\u793a\u4e3a\u6700\u5927\u53ef\u80fd\u7684\u5f3a\u5ea6\u7ea7\u522b\uff0c\u800c\u4e0d\u662f\u8868\u793a\u4e3a\u53ef\u80fd\u5c0f\u5f97\u591a\u7684\u7ed5\u56de\u503c\u3002\u901a\u8fc7\u5728\u8f93\u51fa\u5904\u4f7f\u7528\u591a\u8def\u590d\u7528\u5668\uff0c\u5176\u63a7\u5236\u8f93\u5165\u4e0e\u52a0\u6cd5\u5668\u7684\u6ea2\u51fa\u4fe1\u53f7\u76f8\u5173\u8054\uff0c\u53ef\u4ee5\u4ece\u4efb\u4f55\u65e0\u7b26\u53f7\u52a0\u6cd5\u5668\u8bbe\u8ba1\u4e2d\u83b7\u5f97\u9971\u548c\u65e0\u7b26\u53f7\u52a0\u6cd5\u5668\u3002\u6709\u7b26\u53f7\u9971\u548c\u52a0\u6cd5\u5668\u53ef\u4ee5\u7c7b\u4f3c\u5730\u8bbe\u8ba1\u3002</p>"},{"location":"Part_02/05/#53","title":"5.3 \u8fdb\u4f4d\u4f20\u64ad\u5206\u6790","text":"<p>Various ways of dealing with the carry problem were enumerated in Section 3.1. Some of the methods already discussed include limiting the propagation of carries (hybrid signed-digit, residue number system) or eliminating carry propagation altogether (redundant representation). The latter approach, when used for adding a set of numbers in carry-save form, can be viewed as a way of amortizing the propagation delay of the final conversion step over many additions, thus making the per-add contribution of the carry-propagation delay quite small. What remains to be discussed, in this and the following two chapters, is how one can speed up a single addition operation involving conventional (binary) operands. </p> <p>3.1 \u8282\u5217\u4e3e\u4e86\u5904\u7406\u8fdb\u4f4d\u95ee\u9898\u7684\u5404\u79cd\u65b9\u6cd5\u3002\u5df2\u7ecf\u8ba8\u8bba\u7684\u4e00\u4e9b\u65b9\u6cd5\u5305\u62ec\u9650\u5236\u8fdb\u4f4d\u4f20\u64ad\uff08\u6df7\u5408\u6709\u7b26\u53f7\u6570\u5b57\u3001\u5269\u4f59\u6570\u7cfb\u7edf\uff09\u6216\u5b8c\u5168\u6d88\u9664\u8fdb\u4f4d\u4f20\u64ad\uff08\u5197\u4f59\u8868\u793a\uff09\u3002\u540e\u4e00\u79cd\u65b9\u6cd5\uff0c\u5f53\u7528\u4e8e\u4ee5\u8fdb\u4f4d\u4fdd\u5b58\u5f62\u5f0f\u6dfb\u52a0\u4e00\u7ec4\u6570\u5b57\u65f6\uff0c\u53ef\u4ee5\u88ab\u89c6\u4e3a\u4e00\u79cd\u5c06\u6700\u7ec8\u8f6c\u6362\u6b65\u9aa4\u7684\u4f20\u64ad\u5ef6\u8fdf\u5206\u644a\u5230\u591a\u6b21\u52a0\u6cd5\u4e0a\u7684\u65b9\u6cd5\uff0c\u4ece\u800c\u4f7f\u8fdb\u4f4d\u4f20\u64ad\u5ef6\u8fdf\u7684\u6bcf\u6b21\u6dfb\u52a0\u8d21\u732e\u76f8\u5f53\u5c0f\u3002\u5728\u672c\u7ae0\u548c\u63a5\u4e0b\u6765\u7684\u4e24\u7ae0\u4e2d\uff0c\u4ecd\u6709\u5f85\u8ba8\u8bba\u7684\u662f\u5982\u4f55\u52a0\u901f\u6d89\u53ca\u4f20\u7edf\uff08\u4e8c\u8fdb\u5236\uff09\u64cd\u4f5c\u6570\u7684\u5355\u4e2a\u52a0\u6cd5\u8fd0\u7b97\u3002</p> <p>We begin by analyzing how and to what extent carries propagate when adding two binary numbers. Consider the example addition of 16-bit binary numbers depicted in Fig. 5.8, where the carry chains of lengths 2, 3, 6, and 4 are shown. The length of a carry chain is the number of digit positions from where the carry is generated up to and including where it is finally absorbed or annihilated. A carry chain of length 0 thus means \u201cno carry production,\u201d and a chain of length 1 means that the carry is absorbed in the next position. We are interested in the length of the longest propagation chain (6 in Fig. 5.8), which dictates the adder\u2019s latency. </p> <p>\u6211\u4eec\u9996\u5148\u5206\u6790\u6dfb\u52a0\u4e24\u4e2a\u4e8c\u8fdb\u5236\u6570\u65f6\u8fdb\u4f4d\u5982\u4f55\u4f20\u64ad\u4ee5\u53ca\u4f20\u64ad\u5230\u4ec0\u4e48\u7a0b\u5ea6\u3002\u8003\u8651\u56fe 5.8 \u4e2d\u6240\u793a\u7684 16 \u4f4d\u4e8c\u8fdb\u5236\u6570\u52a0\u6cd5\u793a\u4f8b\uff0c\u5176\u4e2d\u663e\u793a\u4e86\u957f\u5ea6\u4e3a 2\u30013\u30016 \u548c 4 \u7684\u8fdb\u4f4d\u94fe\u3002\u8fdb\u4f4d\u94fe\u7684\u957f\u5ea6\u662f\u6307\u4ece\u751f\u6210\u8fdb\u4f4d\u5230\uff08\u5305\u62ec\u8fdb\u4f4d\u6700\u7ec8\u88ab\u5438\u6536\u6216\u6d88\u9664\uff09\u7684\u4f4d\u6570\u4f4d\u7f6e\u3002\u56e0\u6b64\uff0c\u957f\u5ea6\u4e3a 0 \u7684\u8fdb\u4f4d\u94fe\u610f\u5473\u7740\u201c\u65e0\u8fdb\u4f4d\u4ea7\u751f\u201d\uff0c\u957f\u5ea6\u4e3a 1 \u7684\u8fdb\u4f4d\u94fe\u610f\u5473\u7740\u8fdb\u4f4d\u88ab\u5438\u6536\u5230\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u3002\u6211\u4eec\u611f\u5174\u8da3\u7684\u662f\u6700\u957f\u4f20\u64ad\u94fe\u7684\u957f\u5ea6\uff08\u5982\u56fe 5.8 \u4e2d\u76846\uff09\uff0c\u5b83\u51b3\u5b9a\u4e86\u52a0\u6cd5\u5668\u7684\u5ef6\u8fdf\u3002</p> <p></p> <p>Given binary numbers with random bit values, for each position  i  we have </p> <ul> <li>Probability of carry generation = 1 / 4</li> <li>Probability of carry annihilation = 1 / 4</li> <li>Probability of carry propagation = 1 / 2</li> </ul> <p>\u7ed9\u5b9a\u5177\u6709\u968f\u673a\u4f4d\u503c\u7684\u4e8c\u8fdb\u5236\u6570\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u4f4d\u7f6e \\(i\\)\uff0c\u6211\u4eec\u6709</p> <ul> <li>\u8fdb\u4f4d\u751f\u6210\u7684\u6982\u7387 = 1 / 4</li> <li>\u8fdb\u4f4d\u6e6e\u6ca1\u7684\u6982\u7387 = 1 / 4 </li> <li>\u8fdb\u4f4d\u4f20\u64ad\u7684\u6982\u7387 = 1 / 2</li> </ul> <p>The probability that a carry generated at position i will propagate up to and including position j \u2212 1 and stop at position j (j &gt; i) is 2\u2212 (j\u22121\u2212 i) \u00d7 1 / 2 = 2\u2212 (j\u2212 i). The expected length of the carry chain that starts at bit position i is, therefore, given by k\u22121</p> <p>\u4f4d\u7f6e \\(i\\) \u751f\u6210\u7684\u8fdb\u4f4d\u4f20\u64ad\u5230\u4f4d\u7f6e \\(j \u2212 1\\)\uff08\u5305\u62ec\u4f4d\u7f6e \\(j \u2212 1\\)\uff09\u5e76\u505c\u6b62\u5728\u4f4d\u7f6e \\(j (j &gt; i)\\) \u7684\u6982\u7387\u4e3a \\(2^{\u2212 (j\u22121\u2212 i)} \u00d7 1 / 2 = 2^{\u2212 (j\u2212 i)}\\)\u3002\u56e0\u6b64\uff0c\u4ece\u4f4d\u4f4d\u7f6e$ i$ \u5f00\u59cb\u7684\u8fdb\u4f4d\u94fe\u7684\u957f\u5ea6\u671f\u671b\u503c\u5982\u4e0b\u7ed9\u51fa</p> \\[ \\begin{array}{l} \\sum_{j=i+1}^{k-1}(j-i)2^{-(j-i)} &amp;+(k-i)2^{-(k-1-i)} = \\\\ \\sum_{l=1}^{k-1-i}l2^{-l} &amp;+(k-i)2^{-(k-1-i)} = \\\\ 2 - (k-i+1)2^{-(k-1-i)}   &amp;+ (k-i)2^{-(k-1-i)} = \\\\ 2 - 2^{-(k-i-1)} \\end{array} \\] <p>\u5176\u4e2d\u7b80\u5316\u662f\u57fa\u4e8e\u7b49\u5f0f \\(\\sum_{l=1}^{p}l2^l=2-(p+2)2^{-p}\\)\u3002</p> <p>preceding derivation, the term  (k \u2212 i)  2\u2212 (k\u22121\u2212 i)  is added to the summation because carry definitely stops at position  k; so we do not multiply the term 2\u2212 (k\u22121\u2212 i)  by \u00bd, as was done for the terms within the summation. </p> <p>\u5728\u524d\u9762\u7684\u63a8\u5bfc\u4e2d\uff0c\u7531\u4e8e\u8fdb\u4f4d\u80af\u5b9a\u5728\u4f4d\u7f6e k \u5904\u505c\u6b62\uff0c\u56e0\u6b64\u5c06 \\((k \u2212 i) 2^{\u2212 (k\u22121\u2212 i)}\\) \u9879\u6dfb\u52a0\u5230\u6c42\u548c\u4e2d\uff1b\u56e0\u6b64\uff0c\u6211\u4eec\u4e0d\u4f1a\u50cf\u5bf9\u6c42\u548c\u4e2d\u7684\u9879\u90a3\u6837\u5c06 \\(2^{\u2212 (k\u22121\u2212 i)}\\) \u9879\u4e58\u4ee5 \u00bd\u3002</p> <p>The preceding result indicates that for  i k, the expected length of the carry chain that starts at position  i  is approximately 2. Note that the formula checks out for the extreme case of  i =  k \u2212 1, since in this case, the exact carry chain length, and thus its expected value, is 1. We conclude that carry chains are usually quite short. </p> <p>\u524d\u9762\u7684\u7ed3\u679c\u8868\u660e\uff0c\u5bf9\u4e8e \\(i \\ll k\\)\uff0c\u4ece\u4f4d\u7f6e i \u5f00\u59cb\u7684\u8fdb\u4f4d\u94fe\u7684\u9884\u671f\u957f\u5ea6\u7ea6\u4e3a 2\u3002\u8bf7\u6ce8\u610f\uff0c\u8be5\u516c\u5f0f\u68c0\u67e5\u4e86 \\(i = k \u2212 1\\) \u7684\u6781\u7aef\u60c5\u51b5\uff0c\u56e0\u4e3a\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u51c6\u786e\u7684\u8fdb\u4f4d\u94fe\u957f\u5ea6\u53ca\u5176\u9884\u671f\u503c\u662f 1\u3002\u6211\u4eec\u5f97\u51fa\u7ed3\u8bba\uff0c\u8fdb\u4f4d\u94fe\u901a\u5e38\u76f8\u5f53\u77ed\u3002</p> <p>On the average, the longest carry chain in adding  k-bit numbers is of length log2  k. This was first observed and proved by Burks, Goldstine, and von Neumann in their classic report defining the structure of a stored-program computer [Burk46]. An interesting analysis based on Kolmogorov complexity theory has been offered in [Beig98]. The latter paper also cites past attempts at providing alternate or more complete proofs of the proposition. </p> <p>\u5e73\u5747\u800c\u8a00\uff0ck \u4f4d\u6570\u5b57\u76f8\u52a0\u65f6\u6700\u957f\u7684\u8fdb\u4f4d\u94fe\u957f\u5ea6\u4e3a \\(\\log_2 k\\)\u3002Burks\u3001Goldstine \u548c von Neumann \u5728\u5b9a\u4e49\u5b58\u50a8\u7a0b\u5e8f\u8ba1\u7b97\u673a\u7ed3\u6784\u7684\u7ecf\u5178\u62a5\u544a\u4e2d\u9996\u6b21\u89c2\u5bdf\u5230\u5e76\u8bc1\u660e\u4e86\u8fd9\u4e00\u70b9 [Burk46]\u3002 [Beig98] \u4e2d\u63d0\u4f9b\u4e86\u57fa\u4e8e \u67ef\u5c14\u83ab\u54e5\u6d1b\u592b\u590d\u6742\u5ea6\u7406\u8bba\u7684\u6709\u8da3\u5206\u6790\u3002\u540e\u4e00\u7bc7\u8bba\u6587\u8fd8\u5f15\u7528\u4e86\u8fc7\u53bb\u4e3a\u8be5\u547d\u9898\u63d0\u4f9b\u66ff\u4ee3\u6216\u66f4\u5b8c\u6574\u8bc1\u660e\u7684\u5c1d\u8bd5\u3002</p> <p>Here is one way to prove the logarithmic average length of the worst-case carry chain. The reader can skip the rest of this section without any loss of continuity. </p> <p>\u8fd9\u662f\u8bc1\u660e\u6700\u574f\u60c5\u51b5\u8fdb\u4f4d\u94fe\u7684\u5bf9\u6570\u5e73\u5747\u957f\u5ea6\u7684\u4e00\u79cd\u65b9\u6cd5\u3002\u8bfb\u8005\u53ef\u4ee5\u8df3\u8fc7\u672c\u8282\u7684\u5176\u4f59\u90e8\u5206\uff0c\u800c\u4e0d\u4f1a\u5931\u53bb\u4efb\u4f55\u8fde\u7eed\u6027\u3002</p> <p>Let  \u03b7k (h)  be the probability that the longest carry chain in a  k-bit addition is of length h  or more. Clearly, the probability of the longest carry chain being of length exactly  h  is \u03b7k(h) \u2212  \u03b7k(h + 1 ). We can use a recursive formulation to find  \u03b7k(h). The longest carry chain can be of length  h  or more in two mutually exclusive ways:</p> <p>a. The least-significant  k \u2212 1 bits have a carry chain of length  h  or more. </p> <p>b. The least-significant  k \u2212 1 bits do not have such a carry chain, but the most significant  h  bits, including the last bit, have a chain of the exact length  h. </p> <p>Thus, we have</p> <p>\u200b        \\(\u03b7_k(h) \u2264 \u03b7_{k\u22121} (h) + 2^{\u2212 (h+1 )}\\) </p> <p>where 2\u2212 (h+1 )  is the product of \u00bc (representing the probability of carry generation) and 2\u2212 (h\u22121 ) (probability that carry propagates across  h \u2212 2 intermediate positions and stops in the last one). The inequality occurs because the second term is not multiplied by a probability as discussed above. Hence, assuming  \u03b7i(h) = 0 for  i &lt; h: </p> <p>\u200b       \\(\\eta_k(h)=\\sum_{i=h}^{k}[\\eta_i(h)-\\eta_{i-1}(h)] \\le (k-h+1)2^{-(h+l)} \\le 2^{-(h+1)}k\\)</p> <p>To complete our derivation of the expected length \u03bb of the longest carry chain, we note that</p> <p>\u4ee4 \\(\u03b7_k (h)\\) \u4e3a k \u4f4d\u52a0\u6cd5\u4e2d\u6700\u957f\u8fdb\u4f4d\u94fe\u957f\u5ea6\u4e3a h \u6216\u66f4\u957f\u7684\u6982\u7387\u3002\u663e\u7136\uff0c\u6700\u957f\u8fdb\u4f4d\u94fe\u7684\u957f\u5ea6\u6070\u597d\u4e3a h \u7684\u6982\u7387\u4e3a \\(\u03b7_k(h) \u2212 \u03b7_k(h + 1 )\\)\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u9012\u5f52\u516c\u5f0f\u6765\u6c42 \\(\u03b7_k(h)\\)\u3002\u6700\u957f\u7684\u8fdb\u4f4d\u94fe\u53ef\u4ee5\u901a\u8fc7\u4e24\u79cd\u4e92\u65a5\u7684\u65b9\u5f0f\u8fbe\u5230 \\(h\\) \u6216\u66f4\u957f\u7684\u957f\u5ea6\uff1a</p> <p>a. \u6700\u4f4e\u6709\u6548 \\(k \u2212 1\\) \u4f4d\u5177\u6709\u957f\u5ea6\u4e3a h \u6216\u66f4\u957f\u7684\u8fdb\u4f4d\u94fe\u3002</p> <p>b. \u6700\u4f4e\u6709\u6548 \\(k \u2212 1\\) \u4f4d\u6ca1\u6709\u8fd9\u6837\u7684\u8fdb\u4f4d\u94fe\uff0c\u4f46\u6700\u9ad8\u6709\u6548 h \u4f4d\uff08\u5305\u62ec\u6700\u540e\u4e00\u4f4d\uff09\u5177\u6709\u7cbe\u786e\u957f\u5ea6\u4e3a h \u7684\u94fe\u3002</p> <p>\u56e0\u6b64\uff0c\u6211\u4eec\u6709</p> <p>\u200b       \\(\u03b7_k(h) \u2264 \u03b7_{k\u22121} (h) + 2^{\u2212 (h+1 )}\\) </p> <p>\u5176\u4e2d 2^{\u2212 (h+1 )} \u662f \u00bc\uff08\u8868\u793a\u8fdb\u4f4d\u751f\u6210\u7684\u6982\u7387\uff09\u548c 2^{\u2212 (h\u22121 )} \uff08\u8fdb\u4f4d\u4f20\u64ad\u7a7f\u8fc7 \\(h \u2212 2\\) \u4e2a\u4e2d\u95f4\u4f4d\u7f6e\u5e76\u5728\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u505c\u6b62\u7684\u6982\u7387\uff09\u7684\u4e58\u79ef\u3002\u51fa\u73b0\u4e0d\u7b49\u5f0f\u662f\u56e0\u4e3a\u7b2c\u4e8c\u9879\u6ca1\u6709\u4e58\u4ee5\u4e0a\u9762\u8ba8\u8bba\u7684\u6982\u7387\u3002\u56e0\u6b64\uff0c\u5047\u8bbe \\(\u03b7_i(h) = 0\\) for \\(i &lt; h\\): </p> <p>\u200b       \\(\\eta_k(h)=\\sum_{i=h}^{k}[\\eta_i(h)-\\eta_{i-1}(h)] \\le (k-h+1)2^{-(h+l)} \\le 2^{-(h+1)}k\\)</p> <p>\u4e3a\u4e86\u5b8c\u6210\u6700\u957f\u8fdb\u4f4d\u94fe\u7684\u9884\u671f\u957f\u5ea6 \u03bb \u7684\u63a8\u5bfc\uff0c\u6211\u4eec\u8bb0\u4e3a</p> \\[ \\begin{array}{l} \\lambda &amp;= \\sum_{h=1}^{k}h[\\eta_k(h)-\\eta_k(h+1)] \\\\         &amp;= [\\eta_k(1)-\\eta_k(2)]  + 2[\\eta_k(2)-\\eta_k(3)] + \\cdots + k[\\eta_k(k)-0] \\\\         &amp;= \\sum_{h=1}^{k}\\eta_k(h) \\end{array} \\] <p>We next break the final summation above into two parts: the first \u03b3 = log2 k\u2212 1 terms and the remaining k \u2212 \u03b3 terms. Using the upper bound 1 for terms in the first part and 2\u2212 (h+1 )k for terms in the second part, we get</p> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u4e0a\u9762\u7684\u6700\u7ec8\u6c42\u548c\u5206\u4e3a\u4e24\u90e8\u5206\uff1a\u7b2c\u4e00\u4e2a \\(\u03b3 = \\left \\lfloor \\log_2 k \\right \\rfloor \u2212 1\\) \u9879\u548c\u5176\u4f59\u7684 \\(k \u2212 \u03b3\\) \u9879\u3002\u5bf9\u7b2c\u4e00\u90e8\u5206\u4e2d\u7684\u9879\u4f7f\u7528\u4e0a\u9650 1\uff0c\u5bf9\u7b2c\u4e8c\u90e8\u5206\u4e2d\u7684\u9879\u4f7f\u7528 \\(2^{\u2212 (h+1 )}k\\)\uff0c\u6211\u4eec\u5f97\u5230</p> <p>\u200b       \\(\\lambda = \\sum_{h=1}^{k}\\eta_k(h) \\le \\sum_{h=1}^{\\gamma}1+\\sum_{h=\\gamma+1}^{k}2^{-(h+1)}k \\lt \\gamma + 2^{-(\\gamma+1)}k\\)</p> <p>Now let  \u03b5 = log2  k \u2212log2  k or  \u03b3 = log2  k \u22121\u2212 \u03b5, where 0 \u2264  \u03b5 &lt;  1. Then, substituting the latter expression for  \u03b3  in the preceding inequality and noting that 2log2  k =  k  and 2 \u03b5 &lt;  1 +  \u03b5, we get  \u03bb &lt;  log2  k \u2212 1 \u2212  \u03b5 + 2 \u03b5 &lt;  log2  k</p> <p>\u73b0\u5728\u4ee4 \\(\u03b5 = \\log_2 k \u2212 \\left \\lfloor \\log_2 k \\right \\rfloor\\) \u6216 \\(\u03b3 = \\log_2 k \u22121\u2212 \u03b5\\)\uff0c\u5176\u4e2d \\(0 \u2264 \u03b5 &lt; 1\\)\u3002\u7136\u540e\uff0c\u5c06\u540e\u4e00\u4e2a\u8868\u8fbe\u5f0f\u66ff\u6362\u524d\u9762\u4e0d\u7b49\u5f0f\u4e2d\u7684 \u03b3\uff0c\u5e76\u6ce8\u610f\u5230 \\(2^{\\log_2 k} = k\\) \u548c \\(2^\u03b5 &lt; 1 + \u03b5\\)\uff0c\u6211\u4eec\u5f97\u5230</p> <p>\u200b       \\(\u03bb &lt; \\log_2 k \u2212 1 \u2212 \u03b5 + 2^\u03b5 &lt; \\log_2 k\\)</p> <p>This concludes our derivation of the result that the expected length of the worst-case carry chain in a  k-bit addition with random operands is upper-bounded by log2  k. Experimental results verify the log2  k  approximation to the length of the worst-case carry chain and suggest that log2(1.25 k) is a better estimate [Hend61]. </p> <p>\u8fd9\u5f97\u51fa\u4e86\u6211\u4eec\u5bf9\u7ed3\u679c\u7684\u63a8\u5bfc\uff0c\u5373\u4e0e\u968f\u673a\u64cd\u4f5c\u6570\u8fdb\u884c k \u4f4d\u52a0\u6cd5\u65f6\u6700\u574f\u60c5\u51b5\u8fdb\u4f4d\u94fe\u7684\u9884\u671f\u957f\u5ea6\u4e0a\u9650\u4e3a \\(\\log_2 k\\)\u3002\u5b9e\u9a8c\u7ed3\u679c\u9a8c\u8bc1\u4e86\u6700\u574f\u60c5\u51b5\u8fdb\u4f4d\u94fe\u957f\u5ea6\u7684 \\(\\log_2 k\\) \u8fd1\u4f3c\u503c\uff0c\u5e76\u8868\u660e \\(\\log_2(1.25 k)\\) \u662f\u66f4\u597d\u7684\u4f30\u8ba1 [Hend61]\u3002</p>"},{"location":"Part_02/05/#54","title":"5.4 \u8fdb\u4f4d\u5b8c\u6210\u7684\u68c0\u6d4b","text":"<p>A ripple-carry adder is the simplest and slowest adder design. For  k-bit operands, both the worst-case delay and the implementation cost of a ripple-carry adder are linear in  k.  However, based on the analysis in Section 5.3, the worst-case carry-propagation chain of length  k  almost never materializes. </p> <p>\u884c\u6ce2\u8fdb\u4f4d\u52a0\u6cd5\u5668\u662f\u6700\u7b80\u5355\u4e14\u6700\u6162\u7684\u52a0\u6cd5\u5668\u8bbe\u8ba1\u3002\u5bf9\u4e8e k \u4f4d\u64cd\u4f5c\u6570\uff0c\u6700\u574f\u60c5\u51b5\u7684\u5ef6\u8fdf\u548c\u7eb9\u6ce2\u8fdb\u4f4d\u52a0\u6cd5\u5668\u7684\u5b9e\u73b0\u6210\u672c\u4e0e k \u6210\u7ebf\u6027\u5173\u7cfb\u3002\u7136\u800c\uff0c\u6839\u636e 5.3 \u8282\u7684\u5206\u6790\uff0c\u957f\u5ea6\u4e3a k \u7684\u6700\u574f\u60c5\u51b5\u8fdb\u4f4d\u4f20\u64ad\u94fe\u51e0\u4e4e\u6c38\u8fdc\u4e0d\u4f1a\u51fa\u73b0\u3002</p> <p>A carry-completion detection adder takes advantage of the log2  k  average length of the longest carry chain to add two  k-bit binary numbers in O(log  k) time on the average. It is essentially a ripple-carry adder in which a carry of 0 is also explicitly represented and allowed to propagate between stages. The carry into stage  i  is represented by the two-rail code:</p> <p>\u8fdb\u4f4d\u5b8c\u6210\u68c0\u6d4b\u52a0\u6cd5\u5668\u5229\u7528\u6700\u957f\u8fdb\u4f4d\u94fe\u7684 \\(\\log_2 k\\) \u5e73\u5747\u957f\u5ea6\uff0c\u5e73\u5747\u5728 \\(O(\\log k)\\) \u65f6\u95f4\u5185\u5c06\u4e24\u4e2a k \u4f4d\u4e8c\u8fdb\u5236\u6570\u76f8\u52a0\u3002\u5b83\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u6ce2\u7eb9\u8fdb\u4f4d\u52a0\u6cd5\u5668\uff0c\u5176\u4e2d\u4e5f\u660e\u786e\u8868\u793a\u4e86\u8fdb\u4f4d 0 \u5e76\u5141\u8bb8\u5728\u7ea7\u4e4b\u95f4\u4f20\u64ad\u3002\u8fdb\u5165\u9636\u6bb5 i \u7684\u8fdb\u4f4d\u7531\u4e24\u8f68\u7f16\u7801\u8868\u793a\uff1a</p> <p>\\((b_i, c_i) =\\) </p> <p>\u200b       (0, 0) \u8fdb\u4f4d\u672a\u77e5</p> <p>\u200b       (0, 1) \u8fdb\u4f4d\u786e\u5b9a\u4e3a1</p> <p>\u200b       (1, 0) \u8fdb\u4f4d\u786e\u5b9a\u4e3a0</p> <p>Thus, just as two 1s in the operands generate a carry of 1 that propagates to the left, two 0s would produce a carry of 0. Initially, all carries are (0, 0) or unknown.  After initialization, a bit position with  xi =  yi  makes the no-carry/carry determination and injects the appropriate carry ( bi+1,  ci+1 ) =  (xi \u2228  yi,  xiyi)  into the carry-propagation chain of Fig. 5.9 via the OR gates. The carry  (c in,  c in )  is injected at the right end. When every carry has assumed one of the values (0, 1) or (1, 0), carry propagation is complete.  The local \u201cdone\u201d signals  di =  bi \u2228  ci  are combined by a global AND function into alldone, which indicates the end of carry propagation. </p> <p>\u56e0\u6b64\uff0c\u6b63\u5982\u64cd\u4f5c\u6570\u4e2d\u7684\u4e24\u4e2a 1 \u751f\u6210\u5411\u5de6\u4f20\u64ad\u7684\u8fdb\u4f4d 1 \u4e00\u6837\uff0c\u4e24\u4e2a 0 \u5c06\u751f\u6210\u8fdb\u4f4d 0\u3002\u6700\u521d\uff0c\u6240\u6709\u8fdb\u4f4d\u90fd\u662f (0, 0) \u6216\u672a\u77e5\u3002\u521d\u59cb\u5316\u540e\uff0c\\(x_i = y_i\\) \u7684\u4f4d\u4f4d\u7f6e\u53ef\u4ee5\u5224\u5b9a\u662f\u65e0\u8fdb\u4f4d/\u8fdb\u4f4d\uff0c\u5e76\u901a\u8fc7\u6216\u95e8\u5c06\u9002\u5f53\u7684\u8fdb\u4f4d \\((b_{i+1}, c_{i+1}) = (x_i \u2228 y_i, x_iy_i)\\) \u6ce8\u5165\u56fe 5.9 \u7684\u8fdb\u4f4d\u4f20\u64ad\u94fe\u4e2d\u3002\u8fdb\u4f4d \\((\\bar{c} _{in}, c _{in} )\\) \u5728\u53f3\u7aef\u6ce8\u5165\u3002\u5f53\u6bcf\u4e2a\u8fdb\u4f4d\u90fd\u53d6\u503c (0, 1) \u6216 (1, 0) \u4e4b\u4e00\u65f6\uff0c\u8fdb\u4f4d\u4f20\u64ad\u5c31\u5b8c\u6210\u4e86\u3002\u5c40\u90e8\u201cdone\u201d\u4fe1\u53f7 \\(d_i = b_i \u2228 c_i\\) \u901a\u8fc7\u5168\u5c40 AND \u51fd\u6570\u7ec4\u5408\u6210 alldone\uff0c\u8868\u793a\u8fdb\u4f4d\u4f20\u64ad\u7ed3\u675f\u3002</p> <p></p> <p>In designing carry-completion adders, care must be taken to avoid hazards that might lead to a spurious  alldone  signal. Initialization of all carries to 0 through clearing of input bits and simultaneous application of all input data is one way of ensuring hazard-free operation. </p> <p>\u5728\u8bbe\u8ba1\u8fdb\u4f4d\u5b8c\u6210\u52a0\u6cd5\u5668\u65f6\uff0c\u5fc5\u987b\u5c0f\u5fc3\u907f\u514d\u53ef\u80fd\u5bfc\u81f4\u865a\u5047 alldone \u4fe1\u53f7\u7684\u5371\u9669\u3002\u901a\u8fc7\u6e05\u9664\u8f93\u5165\u4f4d\u5e76\u540c\u65f6\u5e94\u7528\u6240\u6709\u8f93\u5165\u6570\u636e\u5c06\u6240\u6709\u8fdb\u4f4d\u521d\u59cb\u5316\u4e3a 0\uff0c\u662f\u786e\u4fdd\u65e0\u5371\u9669\u64cd\u4f5c\u7684\u4e00\u79cd\u65b9\u6cd5\u3002</p> <p>Excluding the initialization and carry-completion detection times, which must be considered and are the same in all cases, the latency of a  k-bit carry-completion adder ranges from 1 gate delay in the best case (no carry propagation at all: i.e., when adding a number to itself) to 2 k + 1 gate delays in the worst case (full carry propagation from  c in to cout), with the average latency being about \\(2 \\log_2  k + 1\\) gate delays. Note that once the final carries have arrived in all bit positions, the derivation of the sum bits is overlapped with completion detection and is thus not accounted for in the preceding latencies. </p> <p>\u6392\u9664\u521d\u59cb\u5316\u548c\u8fdb\u4f4d\u5b8c\u6210\u68c0\u6d4b\u65f6\u95f4\uff08\u5fc5\u987b\u8003\u8651\u8fd9\u4e9b\u65f6\u95f4\u5e76\u4e14\u5728\u6240\u6709\u60c5\u51b5\u4e0b\u90fd\u662f\u76f8\u540c\u7684\uff09\uff0ck \u4f4d\u8fdb\u4f4d\u5b8c\u6210\u52a0\u6cd5\u5668\u7684\u5ef6\u8fdf\u8303\u56f4\u4ece\u6700\u597d\u60c5\u51b5\u4e0b\u7684 1 \u4e2a\u95e8\u5ef6\u8fdf\uff08\u6839\u672c\u6ca1\u6709\u8fdb\u4f4d\u4f20\u64ad\uff1a\u5373\uff0c\u5f53\u5c06\u6570\u5b57\u6dfb\u52a0\u5230\u81ea\u8eab\u65f6\uff09\u5230\u6700\u574f\u60c5\u51b5\u4e0b\u7684 \\(2k + 1\\) \u4e2a\u95e8\u5ef6\u8fdf\uff08\u4ece \\(c_{in}\\) \u5230 \\(c_{out}\\) \u7684\u5168\u8fdb\u4f4d\u4f20\u64ad\uff09\u5e73\u5747\u5ef6\u8fdf\u7ea6\u4e3a \\(2 \\log_2  k + 1\\) \u4e2a\u95e8\u5ef6\u8fdf\u3002\u8bf7\u6ce8\u610f\uff0c\u4e00\u65e6\u6700\u7ec8\u8fdb\u4f4d\u5230\u8fbe\u6240\u6709\u4f4d\u4f4d\u7f6e\uff0c\u548c\u7684\u5bfc\u51fa\u4e0e\u5b8c\u6210\u68c0\u6d4b\u91cd\u53e0\uff0c\u56e0\u6b64\u4e0d\u4f1a\u7b97\u5728\u524d\u9762\u5f97\u5230\u7684\u5ef6\u8fdf\u4e2d\u3002</p> <p>Because the latency of the carry-completion adder is data-dependent, the design of Fig. 5.9 is suitable for use in asynchronous systems. Most modern computers, however, use synchronous logic and thus cannot take advantage of the high average speed of a carry-completion adder. </p> <p>\u7531\u4e8e\u8fdb\u4f4d\u5b8c\u6210\u52a0\u6cd5\u5668\u7684\u5ef6\u8fdf\u53d6\u51b3\u4e8e\u6570\u636e\uff0c\u56e0\u6b64\u56fe 5.9 \u7684\u8bbe\u8ba1\u9002\u5408\u5728\u5f02\u6b65\u7cfb\u7edf\u4e2d\u4f7f\u7528\u3002\u7136\u800c\uff0c\u5927\u591a\u6570\u73b0\u4ee3\u8ba1\u7b97\u673a\u4f7f\u7528\u540c\u6b65\u903b\u8f91\uff0c\u56e0\u6b64\u65e0\u6cd5\u5229\u7528\u8fdb\u4f4d\u5b8c\u6210\u52a0\u6cd5\u5668\u7684\u9ad8\u5e73\u5747\u901f\u5ea6\u3002</p>"},{"location":"Part_02/05/#55","title":"5.5 \u52a0\u4e0a\u4e00\u4e2a\u5e38\u6570:\u8ba1\u6570\u5668","text":"<p>When one input of the addition operation is a constant number, the design can be simplified or optimized compared with that of a general two-operand adder. With binary arithmetic, we can assume that the constant  y  to be added to  x  is odd, since in the addition s =  x +  y even =  x +  (y odd \u00d7 2 h), one can ignore the  h  rightmost bits in  x  and add  y odd to the remaining bits. The special case of  y = 1 corresponds to standard counters, while y = \u00b11 yields an up/down counter. </p> <p>\u5f53\u52a0\u6cd5\u8fd0\u7b97\u7684\u4e00\u4e2a\u8f93\u5165\u4e3a\u5e38\u6570\u65f6\uff0c\u4e0e\u4e00\u822c\u7684\u4e8c\u64cd\u4f5c\u6570\u52a0\u6cd5\u5668\u76f8\u6bd4\uff0c\u53ef\u4ee5\u7b80\u5316\u6216\u4f18\u5316\u8bbe\u8ba1\u3002\u5bf9\u4e8e\u4e8c\u8fdb\u5236\u7b97\u672f\uff0c\u6211\u4eec\u53ef\u4ee5\u5047\u8bbe\u8981\u4e0e x \u76f8\u52a0\u7684\u5e38\u6570 y \u662f\u5947\u6570\uff0c\u56e0\u4e3a\u5728\u52a0\u6cd5 \\(s = x + y_{even} = x + (y_{odd} \u00d7 2^h)\\) \u4e2d\uff0c\u53ef\u4ee5\u5ffd\u7565 x \u4e2d\u6700\u53f3\u8fb9\u7684 h \u4f4d\u5e76\u5c06 \\(y_{odd}\\) \u52a0\u5230\u5176\u4f59\u4f4d\u3002 y = 1 \u7684\u7279\u6b8a\u60c5\u51b5\u5bf9\u5e94\u4e8e\u6807\u51c6\u8ba1\u6570\u5668\uff0c\u800c y = \u00b11 \u5219\u4ea7\u751f\u5411\u4e0a/\u5411\u4e0b\u8ba1\u6570\u5668\u3002</p> <p>Let the constant to be added to  x =  (xk\u22121 \u00b7 \u00b7 \u00b7  x 2 x 1 x 0 ) two be  y =  (yk\u22121 \u00b7 \u00b7 \u00b7  y 2 y 1 1 ) two.  The least-significant bit of the sum is  x 0. The remaining bits of  s  can be determined by a ( k \u2212 1)-bit ripple-carry adder, with  c in =  x 0, each of its cells being a HA ( yi = 0) or a modified HA ( yi = 1). The fast-adder designs to be covered in Chapters 6 and 7 can similarly be optimized to take advantage of the known bits of  y. </p> <p>\u8bbe\u4e0e\\(x = (x_{k\u22121} \u00b7 \u00b7 \u00b7 x _2 x _1 x _0 )_2\\) \u76f8\u52a0\u7684\u5e38\u6570\u4e3a\\(y = (y_{k\u22121} \u00b7 \u00b7 \u00b7 y _2 y _1 1 ) _2\\)\u3002\u548c\u7684\u6700\u4f4e\u6709\u6548\u4f4d\u662f \\(\\bar{x}_0\\)\u3002 s \u7684\u5176\u4f59\u4f4d\u53ef\u4ee5\u7531 \\(( k \u2212 1)\\) \u4f4d\u7eb9\u6ce2\u8fdb\u4f4d\u52a0\u6cd5\u5668\u786e\u5b9a\uff0c\u5176\u4e2d \\(c_{in} = x_0\\)\uff0c\u5176\u6bcf\u4e2a\u5355\u5143\u90fd\u662f HA \\(( y_i = 0)\\) \u6216\u4fee\u6539\u7684 \\(HA ( y_i = 1)\\)\u3002\u7b2c 6 \u7ae0\u548c\u7b2c 7 \u7ae0\u4e2d\u4ecb\u7ecd\u7684\u5feb\u901f\u52a0\u6cd5\u5668\u8bbe\u8ba1\u53ef\u4ee5\u7c7b\u4f3c\u5730\u8fdb\u884c\u4f18\u5316\uff0c\u4ee5\u5229\u7528 y \u7684\u5df2\u77e5\u4f4d\u3002</p> <p>When  y = 1 (\u22121 ), the resulting circuit is known as an  incrementer ( decrementer) and is used in the design of up (down) counters. Figure 5.10 depicts an up counter, with parallel load capability, built of a register, an incrementer, and a multiplexer. The design shown in Fig. 5.10 can be easily converted to an up/down counter by using an incrementer/decrementer and an extra control signal. Supplying the details is left as an exercise. </p> <p>\u5f53 y = 1 (\u22121) \u65f6\uff0c\u6240\u5f97\u7535\u8def\u79f0\u4e3a\u589e\u91cf\u5668\uff08\u51cf\u91cf\u5668\uff09\uff0c\u5e76\u7528\u4e8e\u5411\u4e0a\uff08\u5411\u4e0b\uff09\u8ba1\u6570\u5668\u7684\u8bbe\u8ba1\u3002\u56fe 5.10 \u63cf\u8ff0\u4e86\u4e00\u4e2a\u5177\u6709\u5e76\u884c\u52a0\u8f7d\u80fd\u529b\u7684\u5411\u4e0a\u8ba1\u6570\u5668\uff0c\u7531\u5bc4\u5b58\u5668\u3001\u589e\u91cf\u5668\u548c\u591a\u8def\u590d\u7528\u5668\u7ec4\u6210\u3002\u901a\u8fc7\u4f7f\u7528\u589e\u91cf\u5668/\u51cf\u91cf\u5668\u548c\u989d\u5916\u7684\u63a7\u5236\u4fe1\u53f7\uff0c\u56fe 5.10 \u6240\u793a\u7684\u8bbe\u8ba1\u53ef\u4ee5\u8f7b\u677e\u8f6c\u6362\u4e3a\u52a0/\u51cf\u8ba1\u6570\u5668\u3002\u7559\u7ed9\u8bfb\u8005\u7559\u4f5c\u7ec3\u4e60\u3002</p> <p></p> <p>Many designs for fast counters are available [Ober81]. Conventional synchronous designs are based on full carry propagation in each increment/decrement cycle, thus limiting the counter\u2019s operating speed. In some cases, special features of the storage elements used can lead to simplifications. Figure 5.11 depicts an asynchronous counter built of cascaded negative-edge-triggered T (toggle) flip-flops. Each input pulse toggles the flip-flop at the least significant position, each 1-to-0 transition of the least-significant bit flip-flop toggles the next flip-flop, and so on. The next input pulse can be accepted before the carry has propagated all the way to the left. </p> <p>\u8bb8\u591a\u5feb\u901f\u8ba1\u6570\u5668\u7684\u8bbe\u8ba1\u90fd\u662f\u53ef\u7528\u7684[Ober81]\u3002\u4f20\u7edf\u7684\u540c\u6b65\u8bbe\u8ba1\u57fa\u4e8e\u6bcf\u4e2a\u9012\u589e/\u9012\u51cf\u5468\u671f\u4e2d\u7684\u5168\u8fdb\u4f4d\u4f20\u64ad\uff0c\u56e0\u6b64\u9650\u5236\u8ba1\u6570\u5668\u7684\u8fd0\u884c\u901f\u5ea6\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6240\u4f7f\u7528\u7684\u5b58\u50a8\u5143\u4ef6\u7684\u7279\u6b8a\u529f\u80fd\u53ef\u4ee5\u5bfc\u81f4\u7b80\u5316\u3002\u56fe 5.11 \u63cf\u8ff0\u4e86\u7531\u7ea7\u8054\u8d1f\u8fb9\u6cbf\u89e6\u53d1 T\uff08\u7ffb\u8f6c\uff09\u89e6\u53d1\u5668\u6784\u5efa\u7684\u5f02\u6b65\u8ba1\u6570\u5668\u3002\u6bcf\u4e2a\u8f93\u5165\u8109\u51b2\u90fd\u4f1a\u5728\u6700\u4f4e\u6709\u6548\u4f4d\u89e6\u53d1\u89e6\u53d1\u5668\uff0c\u6700\u4f4e\u6709\u6548\u4f4d\u89e6\u53d1\u5668\u7684\u6bcf\u4e2a 1 \u5230 0 \u8f6c\u6362\u90fd\u4f1a\u89e6\u53d1\u4e0b\u4e00\u4e2a\u89e6\u53d1\u5668\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\u5728\u8fdb\u4f4d\u4e00\u76f4\u5411\u5de6\u4f20\u64ad\u4e4b\u524d\uff0c\u53ef\u4ee5\u63a5\u53d7\u4e0b\u4e00\u4e2a\u8f93\u5165\u8109\u51b2\u3002</p> <p></p> <p>Certain applications require high-speed counting, with the count potentially becoming quite large. In such cases, a high-speed incrementer must be used. Methods of designing fast adders (Chapters 6 and 7) can all be adapted for building fast incrementers. When even the highest-speed incrementer cannot keep up with the input rate or when cost considerations preclude the use of an ultrafast incrementer, the frequency of the input can be reduced by applying it to a prescaler. The lower-frequency output of the prescaler can then be counted with less stringent speed requirements. In the latter case, the resulting count will be approximate. </p> <p>\u67d0\u4e9b\u5e94\u7528\u9700\u8981\u9ad8\u901f\u8ba1\u6570\uff0c\u8ba1\u6570\u53ef\u80fd\u4f1a\u53d8\u5f97\u76f8\u5f53\u5927\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5fc5\u987b\u4f7f\u7528\u9ad8\u901f\u589e\u91cf\u5668\u3002\u8bbe\u8ba1\u5feb\u901f\u52a0\u6cd5\u5668\u7684\u65b9\u6cd5\uff08\u7b2c 6 \u7ae0\u548c\u7b2c 7 \u7ae0\uff09\u90fd\u53ef\u4ee5\u7528\u4e8e\u6784\u5efa\u5feb\u901f\u589e\u91cf\u5668\u3002\u5f53\u5373\u4f7f\u662f\u6700\u9ad8\u901f\u5ea6\u7684\u589e\u91cf\u5668\u4e5f\u65e0\u6cd5\u8ddf\u4e0a\u8f93\u5165\u901f\u7387\uff0c\u6216\u8005\u5f53\u51fa\u4e8e\u6210\u672c\u8003\u8651\u800c\u65e0\u6cd5\u4f7f\u7528\u8d85\u5feb\u589e\u91cf\u5668\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u5c06\u5176\u5e94\u7528\u4e8e\u9884\u5206\u9891\u5668\u6765\u964d\u4f4e\u8f93\u5165\u9891\u7387\u3002\u7136\u540e\u53ef\u4ee5\u4ee5\u4e0d\u592a\u4e25\u683c\u7684\u901f\u5ea6\u8981\u6c42\u6765\u8ba1\u7b97\u9884\u5206\u9891\u5668\u7684\u8f83\u4f4e\u9891\u7387\u8f93\u51fa\u3002\u5728\u540e\u4e00\u79cd\u60c5\u51b5\u4e0b\uff0c\u6240\u5f97\u8ba1\u6570\u5c06\u662f\u8fd1\u4f3c\u503c\u3002</p> <p>Obviously, the count value can be represented in redundant format, allowing carry-free increment or decrement in constant time [Parh87]. However, with a redundant format, reading out the stored count involves some delay to allow for conversion of the internal representation to standard binary. Alternatively, one can design the counter as a cascade that begins with a very narrow, and thus fast, counter and continues with increasingly wider counters [Vuil91]. The wider counters on the left are incremented only occasionally and thus need not be very fast (their incremented counts can be precomputed by a slow incrementer and then simply loaded into the register when required). Figure 5.12 shows this principle applied to the design of a three-stage counter. Some details of this design, as well as its extension to up/down counting, will be explored in the end-of-chapter problems. </p> <p>\u663e\u7136\uff0c\u8ba1\u6570\u503c\u53ef\u4ee5\u7528\u5197\u4f59\u683c\u5f0f\u8868\u793a\uff0c\u5141\u8bb8\u5728\u6052\u5b9a\u65f6\u95f4\u5185\u8fdb\u884c\u65e0\u8fdb\u4f4d\u9012\u589e\u6216\u9012\u51cf[Parh87]\u3002\u7136\u800c\uff0c\u4f7f\u7528\u5197\u4f59\u683c\u5f0f\u65f6\uff0c\u8bfb\u51fa\u5b58\u50a8\u7684\u8ba1\u6570\u4f1a\u6d89\u53ca\u4e00\u4e9b\u5ef6\u8fdf\uff0c\u4ee5\u5141\u8bb8\u5c06\u5185\u90e8\u8868\u793a\u8f6c\u6362\u4e3a\u6807\u51c6\u4e8c\u8fdb\u5236\u3002\u6216\u8005\uff0c\u53ef\u4ee5\u5c06\u8ba1\u6570\u5668\u8bbe\u8ba1\u4e3a\u7ea7\u8054\uff0c\u4ece\u975e\u5e38\u7a84\u4e14\u56e0\u6b64\u901f\u5ea6\u5feb\u7684\u8ba1\u6570\u5668\u5f00\u59cb\uff0c\u7136\u540e\u4ee5\u8d8a\u6765\u8d8a\u5bbd\u7684\u8ba1\u6570\u5668\u7ee7\u7eed[Vuil91]\u3002\u5de6\u4fa7\u8f83\u5bbd\u7684\u8ba1\u6570\u5668\u4ec5\u5076\u5c14\u9012\u589e\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u975e\u5e38\u5feb\uff08\u5b83\u4eec\u7684\u9012\u589e\u8ba1\u6570\u53ef\u4ee5\u7531\u6162\u901f\u9012\u589e\u5668\u9884\u5148\u8ba1\u7b97\uff0c\u7136\u540e\u5728\u9700\u8981\u65f6\u7b80\u5355\u5730\u52a0\u8f7d\u5230\u5bc4\u5b58\u5668\u4e2d\uff09\u3002\u56fe 5.12 \u663e\u793a\u4e86\u8be5\u539f\u7406\u5e94\u7528\u4e8e\u4e09\u7ea7\u8ba1\u6570\u5668\u7684\u8bbe\u8ba1\u3002\u8fd9\u4e2a\u8bbe\u8ba1\u7684\u4e00\u4e9b\u7ec6\u8282\uff0c\u4ee5\u53ca\u5b83\u5bf9\u52a0/\u51cf\u8ba1\u6570\u7684\u6269\u5c55\uff0c\u5c06\u5728\u7ae0\u672b\u7684\u95ee\u9898\u4e2d\u63a2\u8ba8\u3002</p> <p></p>"},{"location":"Part_02/05/#56","title":"5.6 \u66fc\u5f7b\u65af\u7279\u8fdb\u4f4d\u94fe\u4e0e\u52a0\u6cd5\u5668","text":"<p>In the next three chapters, we will examine methods for speeding up the addition process for two operands (Chapters 6 and 7) and for multiple operands (Chapter 8). For two operands, the key to fast addition is a low-latency carry network, since once the carry into position  i  is known, the sum digit can be determined from the operand digits  xi  and yi  and the incoming carry  ci  in constant time through modular addtition: si =  (xi +  yi +  ci)  mod  r</p> <p>\u5728\u63a5\u4e0b\u6765\u7684\u4e09\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u7814\u7a76\u52a0\u901f\u4e24\u4e2a\u64cd\u4f5c\u6570\uff08\u7b2c 6 \u7ae0\u548c\u7b2c 7 \u7ae0\uff09\u548c\u591a\u4e2a\u64cd\u4f5c\u6570\uff08\u7b2c 8 \u7ae0\uff09\u7684\u52a0\u6cd5\u8fc7\u7a0b\u7684\u65b9\u6cd5\u3002\u5bf9\u4e8e\u4e24\u4e2a\u64cd\u4f5c\u6570\uff0c\u5feb\u901f\u52a0\u6cd5\u7684\u5173\u952e\u662f\u4f4e\u5ef6\u8fdf\u8fdb\u4f4d\u7f51\u7edc\uff0c\u56e0\u4e3a\u4e00\u65e6\u77e5\u9053\u4f4d\u7f6e i \u7684\u8fdb\u4f4d\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u6a21\u52a0\u6cd5\u5728\u6052\u5b9a\u65f6\u95f4\u5185\u6839\u636e\u64cd\u4f5c\u6570\u4f4d xi \u548c yi \u4ee5\u53ca\u4f20\u5165\u7684\u8fdb\u4f4d ci \u786e\u5b9a\u548c\u4f4d\uff1a </p> <p>\u200b       \\(s_i = (x_i + y_i + c_i) \\mod r\\)</p> <p>In the special case of radix 2, the relation above reduces to</p> <p>\u5728\u57fa\u6570\u4e3a 2 \u7684\u7279\u6b8a\u60c5\u51b5\u4e0b\uff0c\u4e0a\u9762\u7684\u5173\u7cfb\u7b80\u5316\u4e3a</p> <p>\u200b       \\(s_i = x_i \u2295 y_i \u2295 c_i\\)</p> <p>So, the primary problem in the design of two-operand adders is the computation of the k  carries  ci+1 based on the 2 k  operand digits  xi  and  yi, 0 \u2264  i &lt; k. </p> <p>\u56e0\u6b64\uff0c\u53cc\u64cd\u4f5c\u6570\u52a0\u6cd5\u5668\u8bbe\u8ba1\u7684\u9996\u8981\u95ee\u9898\u662f\u6839\u636e \\(2 k\\) \u4e2a\u64cd\u4f5c\u6570\u4f4d \\(x_i\\) \u548c \\(y_i\\) \u8ba1\u7b97 \\(k\\) \u4e2a\u8fdb\u4f4d \\(c_{i+1}\\)\uff0c\\(0 \u2264 i &lt; k\\)\u3002</p> <p>From the point of view of carry propagation and the design of a carry network, the actual operand digits are not important. What matters is whether in a given position a carry is generated, propagated, or annihilated (absorbed). In the case of binary addition, the generate,  propagate, and  annihilate ( absorb) signals are characterized by the following logic equations:</p> <p>\u4ece\u8fdb\u4f4d\u4f20\u64ad\u548c\u8fdb\u4f4d\u7f51\u7edc\u8bbe\u8ba1\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u5b9e\u9645\u7684\u64cd\u4f5c\u6570\u5e76\u4e0d\u91cd\u8981\u3002\u91cd\u8981\u7684\u662f\u5728\u7ed9\u5b9a\u4f4d\u7f6e\u662f\u5426\u4ea7\u751f\u3001\u4f20\u64ad\u6216\u6d88\u9664\uff08\u5438\u6536\uff09\u8fdb\u4f4d\u3002\u5728\u4e8c\u8fdb\u5236\u52a0\u6cd5\u7684\u60c5\u51b5\u4e0b\uff0c\u751f\u6210\u3001\u4f20\u64ad\u548c\u6d88\u9664\uff08\u5438\u6536\uff09\u4fe1\u53f7\u7531\u4ee5\u4e0b\u903b\u8f91\u65b9\u7a0b\u8868\u5f81\uff1a</p> <p>\\(g_i = x_iy_i\\)</p> <p>\\(p_i = x_i \u2295 y_i\\)</p> <p>\\(a_i = \\bar{x}_i\\bar{y}_i = \\overline{x_i \u2228 y_i}\\)</p> <p>It is also helpful to define a  transfer  signal corresponding to the event that the carry-out will be 1, given that the carry-in is 1:</p> <p>\u5047\u8bbe\u8fdb\u4f4d\u4e3a 1\uff0c\u5b9a\u4e49\u4e0e\u8fdb\u4f4d\u4e3a 1 \u7684\u4e8b\u4ef6\u76f8\u5bf9\u5e94\u7684\u4f20\u8f93\u4fe1\u53f7\u4e5f\u5f88\u6709\u5e2e\u52a9\uff1a</p> <p>\\(t_i = g_i \u2228 p_i = \\bar a_i = x_i \u2228 y_i\\)</p> <p>More generally, for radix  r, we have</p> <p>\u66f4\u4e00\u822c\u5730\uff0c\u5bf9\u4e8e\u57fa\u6570 r\uff0c\u6211\u4eec\u6709</p> <p>\\(g_i = 1 \\iff x_i + y_i \u2265 r\\)</p> <p>\\(p_i = 1 \\iff x_i + y_i = r \u2212 1\\)</p> <p>\\(a_i = 1 \\iff x_i + y_i &lt; r \u2212 1\\)</p> <p>Thus, assuming that the signals above are produced and made available, the rest of the carry network design can be based on them and becomes completely independent of the operands or even the number representation radix. </p> <p>\u56e0\u6b64\uff0c\u5047\u8bbe\u4e0a\u8ff0\u4fe1\u53f7\u5df2\u4ea7\u751f\u5e76\u53ef\u7528\uff0c\u5219\u8fdb\u4f4d\u7f51\u7edc\u8bbe\u8ba1\u7684\u5176\u4f59\u90e8\u5206\u53ef\u4ee5\u57fa\u4e8e\u5b83\u4eec\uff0c\u5e76\u4e14\u5b8c\u5168\u72ec\u7acb\u4e8e\u64cd\u4f5c\u6570\u751a\u81f3\u6570\u5b57\u8868\u793a\u57fa\u6570\u3002</p> <p>Using the preceding signals, the  carry recurrence  can be written as follows:</p> <p>\u4f7f\u7528\u524d\u9762\u7684\u4fe1\u53f7\uff0c\u8fdb\u4f4d\u9012\u63a8\u53ef\u4ee5\u5199\u6210\u5982\u4e0b\uff1a </p> <p>\\(c_{i+1} = g_i \u2228 c_ip_i\\)</p> <p>The carry recurrence essentially states that a carry will enter stage  i + 1 if it is generated in stage  i  or it enters stage  i  and is propagated by that stage. Since </p> <p>\u8fdb\u4f4d\u9012\u5f52\u672c\u8d28\u4e0a\u662f\u6307\u5982\u679c\u8fdb\u4f4d\u662f\u5728\u9636\u6bb5 i \u4e2d\u751f\u6210\u7684\uff0c\u6216\u8005\u8fdb\u5165\u9636\u6bb5 i \u5e76\u7531\u8be5\u9636\u6bb5\u4f20\u64ad\u7684\uff0c\u5219\u8fdb\u4f4d\u5c06\u8fdb\u5165\u9636\u6bb5 i + 1\u3002\u56e0\u4e3a </p> \\[ c_{i+1} = g_i \u2228 c_ip_i = g_i \u2228 c_ig_i \u2228 c_ip_i \\\\ = g_i \u2228 c_i(g_i \u2228 p_i) = g_i \u2228 c_it_i \\] <p>the carry recurrence can be written in terms of  ti  instead of  pi. This latter version of the carry recurrence leads to slightly faster adders because in binary addition,  ti  is easier to produce than  pi (OR instead of XOR). </p> <p>\u8fdb\u4f4d\u9012\u63a8\u53ef\u4ee5\u7528 \\(t_i\\) \u800c\u4e0d\u662f \\(p_i\\) \u6765\u5199\u3002\u8fdb\u4f4d\u5faa\u73af\u7684\u540e\u4e00\u4e2a\u7248\u672c\u5bfc\u81f4\u52a0\u6cd5\u5668\u7a0d\u5feb\u4e00\u4e9b\uff0c\u56e0\u4e3a\u5728\u4e8c\u8fdb\u5236\u52a0\u6cd5\u4e2d\uff0c\\(t_i\\) \u6bd4 \\(p_i\\) \u66f4\u5bb9\u6613\u751f\u6210\uff08OR \u800c\u4e0d\u662f XOR\uff09\u3002</p> <p>In what follows, we always deal with the carry recurrence in its original form  ci+1 = gi \u2228  cipi, since it is more intuitive, but we keep in mind that in most cases,  pi  can be replaced by  ti  if desired. </p> <p>\u5728\u4e0b\u6587\u4e2d\uff0c\u6211\u4eec\u59cb\u7ec8\u4ee5\u539f\u59cb\u5f62\u5f0f\u5904\u7406\u8fdb\u4f4d\u9012\u63a8 \\(c_{i+1} = g_i \u2228 c_ip_i\\)\uff0c\u56e0\u4e3a\u5b83\u66f4\u76f4\u89c2\uff0c\u4f46\u6211\u4eec\u8bf7\u8bb0\u4f4f\uff0c\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u9700\u8981\uff0c\u53ef\u4ee5\u7528 \\(t_i\\) \u4ee3\u66ff \\(p_i\\)\u3002</p> <p>The carry recurrence forms the basis of a simple carry network known as  Manchester carry chain. A  Manchester adder  is one that uses a Manchester carry chain as its carry network. Each stage of a Manchester carry chain can be viewed as consisting of three switches controlled by the signals  pi,  gi, and  ai, so that the switch closes (conducts electricity) when the corresponding control signal is 1. As shown in Fig. 5.13a, the carry-out signal  ci+1 is connected to 0 if  ai = 1, to 1 if  gi = 1, and to  ci  if  pi = 1, thus assuming the correct logical value  ci+1 =  gi \u2228  cipi. Note that one, and only one, of the signals  pi,  gi, and  ai  is 1. </p> <p>\u8fdb\u4f4d\u5faa\u73af\u6784\u6210\u4e86\u79f0\u4e3a*\u66fc\u5f7b\u65af\u7279\u8fdb\u4f4d\u94fe*\u7684\u7b80\u5355\u8fdb\u4f4d\u7f51\u7edc\u7684\u57fa\u7840\u3002\u66fc\u5f7b\u65af\u7279\u52a0\u6cd5\u5668\u662f\u4e00\u79cd\u4f7f\u7528\u66fc\u5f7b\u65af\u7279\u8fdb\u4f4d\u94fe\u4f5c\u4e3a\u5176\u8fdb\u4f4d\u7f51\u7edc\u7684\u52a0\u6cd5\u5668\u3002\u66fc\u5f7b\u65af\u7279\u8fdb\u4f4d\u94fe\u7684\u6bcf\u4e00\u7ea7\u53ef\u4ee5\u770b\u4f5c\u7531\u4fe1\u53f7 \\(p_i\\)\u3001\\(g_i\\) \u548c \\(a_i\\) \u63a7\u5236\u7684\u4e09\u4e2a\u5f00\u5173\u7ec4\u6210\uff0c\u56e0\u6b64\u5f53\u76f8\u5e94\u7684\u63a7\u5236\u4fe1\u53f7\u4e3a 1 \u65f6\uff0c\u5f00\u5173\u95ed\u5408\uff08\u5bfc\u901a\uff09\u3002\u5982\u56fe 5.13a \u6240\u793a\uff0c\u5982\u679c \\(a_i = 1\\)\uff0c\u5219\u8fdb\u4f4d\u4fe1\u53f7 \\(c_{i+1}\\) \u8fde\u63a5\u5230 0\uff0c\u5982\u679c \\(g_i = 1\\)\uff0c\u5219\u8fde\u63a5\u5230 1\uff0c\u5982\u679c \\(p_i = 1\\)\uff0c\u5219\u8fde\u63a5\u5230 \\(c_i\\)\uff0c\u4e5f\u5c31\u5f97\u5230\u6b63\u786e\u7684\u903b\u8f91\u503c \\(c_{i+1} = g_i \u2228 c_ip_i\\)\u3002\u8bf7\u6ce8\u610f\uff0c\u4fe1\u53f7 \\(p_i\u3001g_i \u548c a_i\\) \u4e2d\u53ea\u6709\u4e00\u4e2a\u662f 1\u3002</p> <p>Figure 5.13b shows how a Manchester carry chain might be implemented in CMOS. When the clock is low, the  c  nodes precharge. Then, when the clock goes high, if  gi  is high,  ci+1 is asserted or drawn low. To prevent  gi  from affecting  ci, the signal  pi  must be computed as the XOR (rather than OR) of  xi  and  yi. This is not a problem because we need the XOR of  xi  and  yi  for computing the sum anyway. </p> <p>\u56fe 5.13b \u663e\u793a\u4e86\u5982\u4f55\u5728 CMOS \u4e2d\u5b9e\u73b0\u66fc\u5f7b\u65af\u7279\u8fdb\u4f4d\u94fe\u3002\u5f53\u65f6\u949f\u4e3a\u4f4e\u7535\u5e73\u65f6\uff0cc \u8282\u70b9\u9884\u5145\u7535\u3002\u7136\u540e\uff0c\u5f53\u65f6\u949f\u53d8\u9ad8\u65f6\uff0c\u5982\u679c \\(g_i\\) \u4e3a\u9ad8\uff0c\u5219 \\(c_{i+1}\\) \u88ab\u65ad\u8a00\u6216\u62c9\u4f4e\u3002\u4e3a\u4e86\u9632\u6b62 \\(g_i\\) \u5f71\u54cd \\(c_i\\)\uff0c\u4fe1\u53f7 \\(p_i\\) \u5fc5\u987b\u8ba1\u7b97\u4e3a \\(x_i\\) \u548c \\(y_i\\) \u7684\u5f02\u6216\uff08\u800c\u4e0d\u662f\u6216\uff09\u3002\u8fd9\u4e0d\u662f\u95ee\u9898\uff0c\u56e0\u4e3a\u65e0\u8bba\u5982\u4f55\u6211\u4eec\u90fd\u9700\u8981 \\(x_i\\) \u548c \\(y_i\\) \u7684\u5f02\u6216\u6765\u8ba1\u7b97\u603b\u548c\u3002</p> <p></p> <p>For a  k-bit Manchester carry chain, the total delay consists of three components: </p> <ol> <li> <p>The time to form the switch control signals. </p> </li> <li> <p>The setup time for the switches. </p> </li> <li> <p>Signal propagation delay through  k  switches in the worst case. </p> </li> </ol> <p>\u5bf9\u4e8e k \u4f4d\u66fc\u5f7b\u65af\u7279\u8fdb\u4f4d\u94fe\uff0c\u603b\u5ef6\u8fdf\u7531\u4e09\u4e2a\u90e8\u5206\u7ec4\u6210\uff1a</p> <ol> <li> <p>\u5f62\u6210\u5f00\u5173\u63a7\u5236\u4fe1\u53f7\u7684\u65f6\u95f4\u3002</p> </li> <li> <p>\u5f00\u5173\u7684\u5efa\u7acb\u65f6\u95f4\u3002</p> </li> <li> <p>\u6700\u574f\u60c5\u51b5\u4e0b\u901a\u8fc7 k \u4e2a\u5f00\u5173\u7684\u4fe1\u53f7\u4f20\u64ad\u5ef6\u8fdf\u3002</p> </li> </ol> <p>The first two components of delay are small, constant terms. The delay is thus dominated by the third component, which is at best linear in  k. For modern CMOS technology, the delay is roughly proportional to  k 2 (as  k  pass transistors are connected in series), making the method undesirable for direct realization of fast adders. However, when the delay is in fact linear in  k, speed is gained over gate-based ripple-carry adders because we have one switch delay rather than two gate delays per stage. The linear or superlinear delay of a Manchester carry chain limits its usefulness for wide words or in high-performance designs. Its main application is in implementing short chains (say, up to 8 bits) as building blocks for use with a variety of fast addition schemes and certain hybrid designs. </p> <p>\u5ef6\u8fdf\u7684\u524d\u4e24\u4e2a\u5206\u91cf\u662f\u5c0f\u7684\u5e38\u6570\u9879\u3002\u56e0\u6b64\uff0c\u5ef6\u8fdf\u4e3b\u8981\u7531\u7b2c\u4e09\u4e2a\u5206\u91cf\u51b3\u5b9a\uff0c\u8be5\u5206\u91cf\u81f3\u591a\u4e0e k \u5448\u7ebf\u6027\u5173\u7cfb\u3002\u5bf9\u4e8e\u73b0\u4ee3 CMOS \u6280\u672f\uff0c\u5ef6\u8fdf\u5927\u81f4\u4e0e \\(k^2\\) (\u56e0\u4e3a k \u4e2a\u4f20\u8f93\u6676\u4f53\u7ba1\u4e32\u8054\u8fde\u63a5)\u6210\u6b63\u6bd4\uff0c\u4f7f\u5f97\u8be5\u65b9\u6cd5\u4e0d\u9002\u5408\u76f4\u63a5\u5b9e\u73b0\u5feb\u901f\u52a0\u6cd5\u5668\u3002\u7136\u800c\uff0c\u5f53\u5ef6\u8fdf\u5b9e\u9645\u4e0a\u4ee5 k \u4e3a\u7ebf\u6027\u65f6\uff0c\u901f\u5ea6\u6bd4\u57fa\u4e8e\u95e8\u7684\u7eb9\u6ce2\u8fdb\u4f4d\u52a0\u6cd5\u5668\u83b7\u5f97\u4e86\u63d0\u9ad8\uff0c\u56e0\u4e3a\u6211\u4eec\u6bcf\u7ea7\u6709\u4e00\u4e2a\u5f00\u5173\u5ef6\u8fdf\u800c\u4e0d\u662f\u4e24\u4e2a\u95e8\u5ef6\u8fdf\u3002\u66fc\u5f7b\u65af\u7279\u8fdb\u4f4d\u94fe\u7684\u7ebf\u6027\u6216\u8d85\u7ebf\u6027\u5ef6\u8fdf\u9650\u5236\u4e86\u5176\u5728\u5bbd\u5b57\u6216\u9ad8\u6027\u80fd\u8bbe\u8ba1\u4e2d\u7684\u7528\u9014\u3002\u5b83\u7684\u4e3b\u8981\u5e94\u7528\u662f\u5b9e\u73b0\u77ed\u94fe\uff08\u4f8b\u5982\uff0c\u6700\u591a 8 \u4f4d\uff09\u4f5c\u4e3a\u6784\u5efa\u5757\uff0c\u4ee5\u4e0e\u5404\u79cd\u5feb\u901f\u52a0\u6cd5\u65b9\u6848\u548c\u67d0\u4e9b\u6df7\u5408\u8bbe\u8ba1\u4e00\u8d77\u4f7f\u7528\u3002</p> <p>We conclude this chapter by setting the stage for fast addition schemes to follow in Chapters 6 and 7. Taking advantage of generate and propagate signals defined in this section, an adder design can be viewed in the generic form of Fig. 5.14. Any adder will have the two sets of AND and XOR gates at the top to form the  gi  and  pi  signals, and it will have a set of XOR gates at the bottom to produce the sum bits  si. It will differ, however, in the design of its carry network, which is represented by the large oval block in Fig. 5.14. For example, a ripple-carry adder can be viewed as having the carry network shown in Fig. 5.15. Inserting this carry network into the generic design of Fig. 5.14 will produce a complete adder. Thus, in our subsequent discussions, we will focus on different designs for the carry network, and we will compare adders with respect to latency and cost of the carry network only.</p> <p>\u6211\u4eec\u901a\u8fc7\u4e3a\u7b2c 6 \u7ae0\u548c\u7b2c 7 \u7ae0\u4e2d\u7684\u5feb\u901f\u52a0\u6cd5\u65b9\u6848\u5960\u5b9a\u57fa\u7840\u6765\u7ed3\u675f\u672c\u7ae0\u3002\u5229\u7528\u672c\u8282\u4e2d\u5b9a\u4e49\u7684\u751f\u6210\u548c\u4f20\u64ad\u4fe1\u53f7\uff0c\u53ef\u4ee5\u4ee5\u56fe 5.14 \u7684\u901a\u7528\u5f62\u5f0f\u67e5\u770b\u52a0\u6cd5\u5668\u8bbe\u8ba1\u3002\u4efb\u4f55\u52a0\u6cd5\u5668\u90fd\u4f1a\u5728\u9876\u90e8\u5177\u6709\u4e24\u7ec4 AND \u548c XOR \u95e8\u4ee5\u5f62\u6210 \\(g_i\\) \u548c \\(p_i\\) \u4fe1\u53f7\uff0c\u5e76\u4e14\u5728\u5e95\u90e8\u5177\u6709\u4e00\u7ec4 XOR \u95e8\u4ee5\u4ea7\u751f\u548c\u4f4d \\(s_i\\)\u3002\u7136\u800c\uff0c\u5b83\u7684\u8fdb\u4f4d\u7f51\u7edc\u7684\u8bbe\u8ba1\u6709\u6240\u4e0d\u540c\uff0c\u5982\u56fe 5.14 \u4e2d\u7684\u5927\u692d\u5706\u5f62\u5757\u6240\u793a\u3002\u4f8b\u5982\uff0c\u7eb9\u6ce2\u8fdb\u4f4d\u52a0\u6cd5\u5668\u53ef\u4ee5\u88ab\u89c6\u4e3a\u5177\u6709\u56fe 5.15 \u6240\u793a\u7684\u8fdb\u4f4d\u7f51\u7edc\u3002\u5c06\u6b64\u8fdb\u4f4d\u7f51\u7edc\u63d2\u5165\u56fe 5.14 \u7684\u901a\u7528\u8bbe\u8ba1\u5c06\u4ea7\u751f\u4e00\u4e2a\u5b8c\u6574\u7684\u52a0\u6cd5\u5668\u3002\u56e0\u6b64\uff0c\u5728\u540e\u7eed\u8ba8\u8bba\u4e2d\uff0c\u6211\u4eec\u5c06\u91cd\u70b9\u5173\u6ce8\u8fdb\u4f4d\u7f51\u7edc\u7684\u4e0d\u540c\u8bbe\u8ba1\uff0c\u5e76\u4e14\u6211\u4eec\u5c06\u4ec5\u6839\u636e\u8fdb\u4f4d\u7f51\u7edc\u7684\u5ef6\u8fdf\u548c\u6210\u672c\u6765\u6bd4\u8f83\u52a0\u6cd5\u5668\u3002</p> <p></p> <p></p>"},{"location":"Part_02/05/#_1","title":"\u95ee\u9898\uff08\u7565\uff09","text":""},{"location":"Part_02/05/#_2","title":"\u53c2\u8003\u6587\u732e\u548c\u8fdb\u4e00\u6b65\u9605\u8bfb","text":"<pre><code>[Beig98] Beigel, R., B. Gasarch, M. Li, and L. Zhang, \u201cAddition in log2n + O(1) Steps on\n         Average: A Simple Analysis,\u201d Theoretical Computer Science, Vol. 191, Nos. 1\u20132,\n         pp. 245\u2013248, 1998.\n[Bui02]  Bui, H. T., Y. Wang, and Y. Jiang, \u201cDesign and Analysis of Low-Power 10-Transistor\n         Full Adders Using Novel XOR-XNOR Gates,\u201d IEEE Trans. Circuits and Systems II,\n         Vol. 49, No. 1, pp. 25\u201330, 2002.\n[Burk46] Burks, A. W., H. H. Goldstine, and J. von Neumann, \u201cPreliminary Discussion of the\n         Logical Design of an Electronic Computing Instrument,\u201d Institute for Advanced\n         Study, Princeton, NJ, 1946.\n[Gilc55] Gilchrist, B., J. H. Pomerene, and S. Y. Wong, \u201cFast Carry Logic for Digital\n         Computers,\u201d IRE Trans. Electronic Computers, Vol. 4, pp. 133\u2013136, 1955.\n[Hend61] Hendrickson, H. C., \u201cFast High-Accuracy Binary Parallel Addition,\u201d IRE Trans.\n         Electronic Computers, Vol. 10, pp. 465\u2013468, 1961.\n[Jian04] Jiang, Y., A. Al-Sheraidah, Y. Wang, E. Sha, and J.-G. Chung, \u201cA Novel\n         Multiplexer-Based Low-Power Full Adder,\u201d IEEE Trans. Circuits and Systems II,\n         Vol. 51, No. 7, pp. 345\u2013353, 2004.\n[Kilb60] Kilburn, T., D. B. G. Edwards, and D. Aspinall, \u201cA Parallel Arithmetic Unit Using a\n         Saturated Transistor Fast-Carry Circuit,\u201d Proc. IEE, Vol. 107B, pp. 573\u2013584,\n         1960.\n[Laps97] Lapsley, P., DSP Processor Fundamentals: Architectures and Features, IEEE Press,\n         1997.\n[Lin07]  Lin, J. F., Y.-T. Hwang, M.-H. Sheu, and C.-C. Ho, \u201cA Novel High-Speed and Energy\n         Efficient 10-Transistor Full Adder Design,\u201d IEEE Trans. Circuits and Systems I,\n         Vol. 54, No. 5, pp. 1050\u20131059, 2007.\n[Ober81] Oberman, R. M. M., Counting and Counters, Macmillan, London, 1981.\n[Parh87] Parhami, B., \u201cSystolic Up/Down Counters with Zero and Sign Detection,\u201d Proc.\n         Symp. Computer Arithmetic, pp. 174\u2013178, 1987.\n[Puck94] Pucknell, D. A., and K. Eshraghian, Basic VLSI Design, 3rd ed., Prentice-Hall, 1994.\n[Stel98] Stelling, P. F., C. U. Martel, V. G. Oklobdzija, and R. Ravi, \u201cOptimal Circuits for\n         Parallel Multipliers,\u201d IEEE Trans. Computers, Vol. 47, No. 3, pp. 273\u2013285, 1998.\n[Vuil91] Vuillemin, J. E., \u201cConstant Time Arbitrary Length Synchronous Binary Counters,\u201d\n         Proc. Symp. Computer Arithmetic, pp. 180\u2013183, 1991.\n</code></pre>"},{"location":"Part_02/06/","title":"6. \u8d85\u524d\u8fdb\u4f4d\u52a0\u6cd5\u5668","text":"<p>Cary-Lookahead Adders</p> <ul> <li>6.1 \u5c55\u5f00\u8fdb\u4f4d\u9012\u5f52 UNROLLING THE CARRY RECURRENCE</li> <li>6.2 \u8d85\u524d\u8fdb\u4f4d\u52a0\u6cd5\u5668\u7684\u8bbe\u8ba1 CARRY-LOOKAHEAD ADDER DESIGN</li> <li>6.3 LING\u578b\u52a0\u6cd5\u5668\u4e0e\u76f8\u5173\u8bbe\u8ba1 LING ADDER AND RELATED DESIGNS</li> <li>6.4 \u5e76\u884c\u524d\u7f00\u8fdb\u4f4d\u8ba1\u7b97 CARRY DETERMINATION AS PREFIX COMPUTATION</li> <li>6.5 \u6df7\u5408\u7684\u5e76\u884c\u524d\u7f00\u8fdb\u4f4d\u7f51\u7edc ALTERNATIVE PARALLEL PREFIX NETWORKS</li> <li>6.6 VLSI\u5b9e\u73b0\u76f8\u5173 VLSI IMPLEMENTATION ASPECTS</li> </ul>"},{"location":"Part_02/07/","title":"7. \u5176\u5b83\u9ad8\u901f\u52a0\u6cd5\u5668","text":"<p>Variations in Fast Adders</p> <ul> <li>7.1 \u7b80\u5355\u7684\u8fdb\u4f4d\u8df3\u8dc3\u52a0\u6cd5\u5668 SIMPLE CARRY SKIP ADDERS</li> <li>7.2 \u591a\u5c42\u6b21\u7684\u8fdb\u4f4d\u8df3\u8dc3\u52a0\u6cd5\u5668 MULTILEVEL CARRY SKIP ADDERS</li> <li>7.3 \u8fdb\u4f4d\u9009\u62e9\u52a0\u6cd5\u5668 CARRY-SELECT ADDERS</li> <li>7.4 \u6761\u4ef6\u548c\u52a0\u6cd5\u5668 CONDITIONAL-SUM ADDER</li> <li>7.5 \u6df7\u5408\u8bbe\u8ba1\u4e0e\u4f18\u5316 HYBRID DESIGNS AND OPTIMIZATIONS</li> <li>7.6 \u4e8c\u64cd\u4f5c\u6570\u6a21\u52a0\u6cd5\u5668 MODULAR TWO-OPERAND ADDERS</li> </ul>"},{"location":"Part_02/08/","title":"8. \u591a\u64cd\u4f5c\u6570\u52a0\u6cd5","text":"<p>Multioperand Addition</p> <ul> <li>8.1 \u57fa\u4e8e\u4e8c\u64cd\u4f5c\u6570\u52a0\u6cd5\u5668 USING TWO OPERAND ADDERS</li> <li>8.2 \u8fdb\u4f4d\u4fdd\u7559\u52a0\u6cd5\u5668 CARRY-SAVE ADDERS</li> <li>8.3 \u534e\u83b1\u571f\u6811\u4e0e\u8fbe\u8fbe\u6811 WALLACE AND DADDA TREES</li> <li>8.4 \u5e76\u884c\u8ba1\u6570\u5668\u4e0e\u5e76\u884c\u538b\u7f29\u5668 PARALLEL COUNTERS AND COMPRESSORS</li> <li>8.5 \u591a\u4e2a\u6709\u7b26\u53f7\u6570\u4e4b\u548c ADDING MULTIPLE SIGNED NUMBERS</li> <li>8.6 \u591a\u64cd\u4f5c\u6570\u6a21\u52a0\u6cd5\u5668 MODULAR MULTIOPERAND ADDERS</li> </ul>"},{"location":"Part_03/","title":"\u4e58\u6cd5","text":"<p>MULTIPLICATION</p> <p>\u201cAt least one good reason for studying multiplication and division is that there is an infinite number of ways of performing these operations and hence there is an infinite number of PhDs (or expenses-paid visits to conferences in the USA) to be won from inventing new forms of multiplier.\u201d               \u2014 ALAN CLEMENTS , THE PRINCIPLES OF COMPUTER  HARDWARE , 1986</p> <p>\u201cCivilization is a limitless multiplication of unnecessary necessaries.\u201d               \u2014 MARK TWAIN</p> <p>\u201c\u7814\u7a76\u4e58\u6cd5\u548c\u9664\u6cd5\u7684\u81f3\u5c11\u4e00\u4e2a\u5145\u5206\u7406\u7531\u662f\uff0c\u6267\u884c\u8fd9\u4e9b\u8fd0\u7b97\u7684\u65b9\u6cd5\u6709\u65e0\u6570\u79cd\uff0c\u56e0\u6b64\u53ef\u4ee5\u901a\u8fc7\u53d1\u660e\u65b0\u5f62\u5f0f\u7684\u4e58\u6cd5\u8d62\u5f97\u65e0\u6570\u7684\u535a\u58eb\u5b66\u4f4d\uff08\u6216\u514d\u8d39\u8bbf\u95ee\u7f8e\u56fd\u7684\u4f1a\u8bae\uff09\u7684\u673a\u4f1a\u3002 \u201d               \u2014 \u827e\u4f26\u00b7\u514b\u83b1\u95e8\u8328\uff0c\u300a\u8ba1\u7b97\u673a\u786c\u4ef6\u539f\u7406\u300b\uff0c1986 \u5e74</p> <p>\u201c\u6587\u660e\u662f\u4e0d\u5fc5\u8981\u7684\u5fc5\u9700\u54c1\u7684\u65e0\u9650\u589e\u6b96\u3002\u201d               \u2014 \u9a6c\u514b\u00b7\u5410\u6e29</p> <p>MULTIPLICATION, OFTEN REALIZED BY k CYCLES OF SHIFTING AND ADDING , IS a heavily used arithmetic operation that figures prominently in signal processing and scientific applications. In this part, after examining shift/add multiplication schemes and their various implementations, we note that there are but two ways to speed up the underlying multioperand addition: reducing the number of operands to be added leads to high-radix multipliers, and devising hardware multioperand adders that minimize the latency and/or maximize the throughput leads to tree and array multipliers. Of course, speed is not the only criterion of interest. Cost, chip area, and pin limitations favor bit-serial designs, while the desire to use available building blocks leads to designs based on additive multiply modules. Finally, the special case of squaring is of interest as it leads to considerable simplification. This part consists of the following four chapters:</p> <p>**\u4e58\u6cd5\u901a\u5e38\u901a\u8fc7 k \u4e2a\u79fb\u4f4d\u548c\u52a0\u6cd5\u5faa\u73af\u6765\u5b9e\u73b0\uff0c\u662f**\u4e00\u79cd\u5e7f\u6cdb\u4f7f\u7528\u7684\u7b97\u672f\u8fd0\u7b97\uff0c\u5728\u4fe1\u53f7\u5904\u7406\u548c\u79d1\u5b66\u5e94\u7528\u4e2d\u5360\u6709\u91cd\u8981\u5730\u4f4d\u3002 \u5728\u8fd9\u4e00\u90e8\u5206\u4e2d\uff0c\u5728\u68c0\u67e5\u4e86\u79fb\u4f4d/\u52a0\u6cd5\u4e58\u6cd5\u65b9\u6848\u53ca\u5176\u5404\u79cd\u5b9e\u73b0\u4e4b\u540e\uff0c\u6211\u4eec\u6ce8\u610f\u5230\u53ea\u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u52a0\u901f\u5e95\u5c42\u591a\u64cd\u4f5c\u6570\u52a0\u6cd5\uff1a\u51cf\u5c11\u8981\u6dfb\u52a0\u7684\u64cd\u4f5c\u6570\u6570\u91cf\u5bfc\u81f4\u9ad8\u57fa\u6570\u4e58\u6cd5\u5668\uff0c\u4ee5\u53ca\u8bbe\u8ba1\u6700\u5c0f\u5316\u5ef6\u8fdf\u548c/\u6216\u6700\u5927\u5316\u541e\u5410\u91cf\u7684\u786c\u4ef6\u591a\u64cd\u4f5c\u6570\u52a0\u6cd5\u5668\u5bfc\u81f4\u6811\u548c\u6570\u7ec4\u4e58\u6cd5\u5668\u3002 \u5f53\u7136\uff0c\u901f\u5ea6\u5e76\u4e0d\u662f\u5174\u8da3\u7684\u552f\u4e00\u6807\u51c6\u3002 \u6210\u672c\u3001\u82af\u7247\u9762\u79ef\u548c\u5f15\u811a\u9650\u5236\u6709\u5229\u4e8e\u4f4d\u4e32\u884c\u8bbe\u8ba1\uff0c\u800c\u4f7f\u7528\u53ef\u7528\u6784\u5efa\u5757\u7684\u613f\u671b\u5bfc\u81f4\u57fa\u4e8e\u52a0\u6cd5\u4e58\u6cd5\u6a21\u5757\u7684\u8bbe\u8ba1\u3002 \u6700\u540e\uff0c\u5e73\u65b9\u7684\u7279\u6b8a\u60c5\u51b5\u5f88\u6709\u8da3\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u5e26\u6765\u76f8\u5f53\u5927\u7684\u7b80\u5316\u3002 \u672c\u90e8\u5206\u7531\u4ee5\u4e0b\u56db\u7ae0\u7ec4\u6210\uff1a</p> <ul> <li>\u7b2c\u4e5d\u7ae0 \u57fa\u7840\u7684\u4e58\u6cd5\u65b9\u6848 Basic Mutiplication Schemes</li> <li>\u7b2c\u5341\u7ae0 \u9ad8\u57fa\u4e58\u6cd5\u5668 High-Radix Mutipliers</li> <li>\u7b2c\u5341\u4e00\u7ae0 \u6811\u578b\u4e58\u6cd5\u5668\u4e0e\u9635\u5217\u4e58\u6cd5\u5668 Tree and Array Multipliers</li> <li>\u7b2c\u5341\u4e8c\u7ae0 \u5176\u5b83\u4e58\u6cd5\u5668 Variations in Multipliers</li> </ul>"},{"location":"Part_03/09/","title":"9. \u57fa\u7840\u7684\u4e58\u6cd5\u65b9\u6848","text":"<p>Basic Mutiplication Schemes</p> <ul> <li>9.1 \u79fb\u4f4d\u76f8\u52a0\u4e58\u6cd5\u7b97\u6cd5 SHIFT-ADD MULTIPLICATION ALGORITHMS</li> <li>9.2 \u7a0b\u5e8f\u5b9e\u73b0\u7684\u4e58\u6cd5 PROGRAMMED MULTIPLICATION</li> <li>9.3 \u57fa\u7840\u786c\u4ef6\u4e58\u6cd5\u5668 BASIC HARDWARE MULTIPLIERS</li> <li>9.4 \u6709\u7b26\u53f7\u6570\u4e58\u6cd5 MULTIPLICATION OF SIGNED NUMBERS</li> <li>9.5 \u4e58\u4e0e\u4e00\u4e2a\u5e38\u6570 MULTIPLICATION BY CONSTANTS</li> <li>9.6 \u9ad8\u901f\u4e58\u6cd5\u5668\u7684\u9884\u89c8 PREVIEW OF FAST MULTIPLIERS</li> </ul>"},{"location":"Part_03/10/","title":"10. \u9ad8\u57fa\u4e58\u6cd5\u5668","text":"<p>High-Radix Mutipliers</p> <ul> <li>10.1 \u57fa 4 \u4e58\u6cd5 RADIX 4 MULTIPLICATION</li> <li>10.2 \u6539\u8fdb\u7684\u5e03\u65af\u7f16\u7801 MODIFIED BOOTH'S RECODING</li> <li>10.3 \u5e94\u7528\u8fdb\u4f4d\u4fdd\u7559\u52a0\u6cd5\u5668 USING CARRY SAVE ADDERS</li> <li>10.4 \u57fa 8 \u4e0e\u57fa 16 \u4e58\u6cd5\u5668 RADIX 8 AND RADIX-16 MULTIPLIERS</li> <li>10.5 \u591a\u8282\u62cd\u4e58\u6cd5\u5668 MULTIBEAT MULTIPLIERS</li> <li>10.6 VLSI\u590d\u6742\u6027\u5206\u6790\u4e3b\u9898 VLSI COMPLEXITY ISSUES</li> </ul>"},{"location":"Part_03/11/","title":"11. \u6811\u578b\u4e58\u6cd5\u5668\u4e0e\u9635\u5217\u4e58\u6cd5\u5668","text":"<p>Tree and Array Multipliers</p> <ul> <li>11.1 \u6ee1\u6811\u4e58\u6cd5\u5668 FULL-TREE MULTIPLIERS</li> <li>11.2 \u9009\u62e9\u8fd8\u539f\u6811 ALTERNATIVE REDUCTION TREES</li> <li>11.3 \u6709\u7b26\u53f7\u6570\u7684\u6811\u578b\u4e58\u6cd5\u5668 TREE MULTIPLIERS FOR SIGNED NUMBERS</li> <li>11.4 \u622a\u65ad\u4e58\u6cd5\u5668\u4e0e\u6811\u578b\u4e58\u6cd5\u5668 PARTIAL-TREE AND TRUNCATED MULTIPLIER</li> <li>11.5 \u9635\u5217\u4e58\u6cd5\u5668 ARRAY MULTIPLIERS</li> <li>11.6 \u6d41\u6c34\u5316\u4e58\u6cd5\u5668\u4e0e\u9635\u5217\u4e58\u6cd5\u5668 PIPELINED TREE AND ARRAY MULTIPLIERS</li> </ul>"},{"location":"Part_03/12/","title":"12. \u5176\u5b83\u4e58\u6cd5\u5668","text":"<p>Variations in Multipliers</p>"},{"location":"Part_04/","title":"\u9664\u6cd5","text":"<p>DIVISION</p> <p>\u201cProbably nothing in the modern world could have more astonished a Greek mathematician than to learn that . . . a large proportion of the population of Western Europe could perform the operation of division for the largest numbers.\u201d               \u2014 ALFRED WHITEHEAD , AN INTRODUCTION TO MATHEMATICS , 1911</p> <p>\u201cTo divide one\u2019s life by years is of course to tumble into a trap set by our own arithmetic.\u201d               \u2014 CLIFTON FADIMAN</p> <p>\u201c\u5728\u73b0\u4ee3\u4e16\u754c\u4e2d\uff0c\u4e5f\u8bb8\u6ca1\u6709\u4ec0\u4e48\u6bd4\u5f97\u77e5\u8fd9\u4e00\u70b9\u66f4\u8ba9\u5e0c\u814a\u6570\u5b66\u5bb6\u611f\u5230\u60ca\u8bb6\u7684\u4e86\u2026\u2026 \u897f\u6b27\u7684\u5f88\u5927\u4e00\u90e8\u5206\u4eba\u53e3\u53ef\u4ee5\u8fdb\u884c\u6700\u5927\u6570\u7684\u9664\u6cd5\u8fd0\u7b97\u3002\u201d           \u2014 \u963f\u5c14\u5f17\u96f7\u5fb7\u00b7\u6000\u7279\u6d77\u5fb7\uff0c\u300a\u6570\u5b66\u5bfc\u8bba\u300b\uff0c1911</p> <p>\u201c\u7528\u5c81\u6708\u6765\u5212\u5206\u4e00\u4e2a\u4eba\u7684\u751f\u547d\uff0c\u5f53\u7136\u4f1a\u9677\u5165\u6211\u4eec\u81ea\u5df1\u7b97\u672f\u8bbe\u7f6e\u7684\u9677\u9631\u3002\u201d           \u2014 \u514b\u5229\u592b\u987f\u00b7\u6cd5\u8fea\u66fc</p> <p>DIVISION IS THE MOST COMPLEX OF THE FOUR BASIC ARITHMETIC OPERATIONS and the hardest one to speed up. Thus, dividers are more expensive and/or slower than multipliers. Fortunately, division operations are also less common than multiplications.Two classes of dividers are discussed here. In digit-recurrence schemes, the quotient is generated one digit at a time, beginning at the mostsignificant end. Binary versions of digit-recurrence division can be implemented through shifting and addition, in much the same way as shift/add multiplication schemes. Determining the digits of the quotient from the most-significant end allows us to\u201cconverge\u201d to a k-digit quotient in k cycles. Speeding up of division via reducing the number of shift/add cycles leads to high-radix dividers. Array dividers as well as convergence methods that require far fewer than k iterations, with each iteration being more complex, are also discussed. This part is composed of the following four chapters:</p> <p>\u9664\u6cd5\u662f\u56db\u79cd\u57fa\u672c\u7b97\u672f\u8fd0\u7b97\u4e2d\u6700\u590d\u6742\u7684\u8fd0\u7b97\uff0c\u4e5f\u662f\u6700\u96be\u52a0\u901f\u7684\u8fd0\u7b97\u3002 \u56e0\u6b64\uff0c\u9664\u6cd5\u5668\u6bd4\u4e58\u6cd5\u5668\u66f4\u6602\u8d35\u548c/\u6216\u66f4\u6162\u3002 \u5e78\u8fd0\u7684\u662f\uff0c\u9664\u6cd5\u8fd0\u7b97\u4e5f\u4e0d\u5982\u4e58\u6cd5\u5e38\u89c1\u3002\u8fd9\u91cc\u8ba8\u8bba\u4e24\u7c7b\u9664\u6cd5\u5668\u3002 \u5728\u6570\u5b57\u5faa\u73af\u65b9\u6848\u4e2d\uff0c\u5546\u4ece\u6700\u9ad8\u6709\u6548\u7aef\u5f00\u59cb\u4e00\u6b21\u751f\u6210\u4e00\u4f4d\u6570\u5b57\u3002 \u4e8c\u8fdb\u5236\u7248\u672c\u7684\u6570\u5b57\u5faa\u73af\u9664\u6cd5\u53ef\u4ee5\u901a\u8fc7\u79fb\u4f4d\u548c\u52a0\u6cd5\u6765\u5b9e\u73b0\uff0c\u5176\u65b9\u5f0f\u4e0e\u79fb\u4f4d/\u52a0\u6cd5\u4e58\u6cd5\u65b9\u6848\u975e\u5e38\u76f8\u4f3c\u3002\u4ece\u6700\u9ad8\u6709\u6548\u7aef\u786e\u5b9a\u5546\u7684\u6570\u5b57\u4f7f\u6211\u4eec\u80fd\u591f\u7528 k \u5468\u671f\u201c\u6536\u655b\u201d\u4e3a k \u4f4d\u6570\u5b57\u7684\u5546\u3002 \u901a\u8fc7\u51cf\u5c11\u79fb\u4f4d/\u52a0\u6cd5\u5468\u671f\u7684\u6570\u91cf\u6765\u52a0\u901f\u9664\u6cd5\uff0c\u5c31\u662f\u9ad8\u57fa\u6570\u9664\u6cd5\u5668\u3002 \u8fd8\u8ba8\u8bba\u4e86\u6570\u7ec4\u9664\u6cd5\u5668\u4ee5\u53ca\u9700\u8981\u8fdc\u5c11\u4e8e k \u6b21\u8fed\u4ee3\u7684\u6536\u655b\u65b9\u6cd5\uff0c\u5e76\u4e14\u6bcf\u6b21\u8fed\u4ee3\u90fd\u66f4\u52a0\u590d\u6742\u3002 \u672c\u90e8\u5206\u7531\u4ee5\u4e0b\u56db\u7ae0\u7ec4\u6210\uff1a</p> <ul> <li>\u7b2c\u5341\u4e09\u7ae0 \u57fa\u7840\u9664\u6cd5\u65b9\u6848 Basic Division Schemes</li> <li>\u7b2c\u5341\u56db\u7ae0 \u9ad8\u57fa\u9664\u6cd5\u5668 High-Radix Dividers</li> <li>\u7b2c\u5341\u4e94\u7ae0 \u5176\u5b83\u9664\u6cd5\u5668 Variations in Dividers</li> <li>\u7b2c\u5341\u516d\u7ae0 \u9664\u6cd5\u7684\u6536\u655b\u7b97\u6cd5 Division by Convergence</li> </ul>"},{"location":"Part_04/13/","title":"13. \u57fa\u7840\u9664\u6cd5\u65b9\u6848","text":"<p>Basic Division Schemes</p> <ul> <li>13.1 \u79fb\u4f4d\u76f8\u51cf\u9664\u6cd5\u7b97\u6cd5 SHIFT/SUBTRACT DIVISION ALGORITHMS</li> <li>13.2 \u7a0b\u5e8f\u5b9e\u73b0\u7684\u9664\u6cd5\u7b97\u6cd5 PROGRAMMED DIVISION</li> <li>13.3 \u6062\u590d\u4f59\u6570\u9664\u6cd5\u5668 RESTORING HARDWARE DIVIDERS</li> <li>13.4 \u4e0d\u6062\u590d\u4f59\u6570\u9664\u6cd5\u5668\u4e0e\u6709\u7b26\u53f7\u6570\u9664\u6cd5 NONRESTORING AND SIGNED DIVISION</li> <li>13.5 \u9664\u4ee5\u4e00\u4e2a\u5e38\u6570 DIVISION BY CONSTANTS</li> <li>13.6 \u57fa2 SRT\u9664\u6cd5 RADIX-2 SRT DIVISION</li> </ul>"},{"location":"Part_04/14/","title":"14. \u9ad8\u57fa\u9664\u6cd5\u5668","text":"<p>High-Radix Dividers</p> <ul> <li>14.1 \u57fa\u7840\u9ad8\u57fa\u9664\u6cd5\u5668 BASICS OF HIGH-RADIX DIVISION</li> <li>14.2 \u8fd0\u7528\u8fdb\u4f4d\u4fdd\u7559\u52a0\u6cd5\u5668 USING CARRY SAVE ADDERS</li> <li>14.3 \u57fa4 SRT\u9664\u6cd5 RADIX-4 SRT DIVISION</li> <li>14.4 \u4e00\u822c\u9ad8\u57fa\u9664\u6cd5\u5668 GENERAL HIGH-RADIX DIVIDERS</li> <li>14.5 \u5546\u4f4d\u9009\u62e9 QUOTIENT DIGIT SELECTION</li> <li>14.5 p-d\u56fe\u7684\u5e94\u7528 USING p-d PLOTS IN PRACTICE</li> </ul>"},{"location":"Part_04/15/","title":"15. \u5176\u5b83\u9664\u6cd5\u5668","text":"<p>Variations in Dividers</p> <ul> <li>15.1 \u7f29\u653e\u540e\u7684\u9664\u6cd5 DIVISION WITH PRESCALING</li> <li>15.2 \u91cd\u53e0\u5546\u4f4d\u9009\u62e9 OVERLAPPED QUOTIENT DIGIT SELECTION</li> <li>15.3 \u7ec4\u5408\u4e0e\u9635\u5217\u9664\u6cd5\u5668 COMBINATIONAL AND ARRAY DIVMIDERS</li> <li>15.4 \u6a21\u9664\u6cd5\u5668\u4e0e\u538b\u7f29\u5668 MODULAR DIVIDERS AND REDUCERS</li> <li>15.5 \u5012\u6570\u8fd0\u7b97\u5668 THE SPECIAL CASE OF RECIPROCATION</li> <li>15.6 \u4e58\u9664\u6df7\u5408\u5355\u5143 COMBINED MULTIPLY/DIVIDE UNITS</li> </ul>"},{"location":"Part_04/16/","title":"16. \u9664\u6cd5\u7684\u6536\u655b\u7b97\u6cd5","text":"<p>Division by Convergence</p> <ul> <li>16.1 \u4e00\u822c\u6536\u655b\u7b97\u6cd5 GENERAL CONVERGENCE METHODS</li> <li>16.2 \u9664\u6cd5\u7684\u91cd\u590d\u76f8\u4e58\u7b97\u6cd5 DIVISION BY REPEATED MULTIPLICATIONS</li> <li>16.3 \u9664\u6cd5\u7684\u8fed\u4ee3\u7b97\u6cd5 DIVISION BY RECIPROCATION</li> <li>16.4 \u52a0\u901f\u9664\u6cd5\u6536\u655b SPEEDUP OF CONVERGENCE DIVISION</li> <li>16.5 \u786c\u4ef6\u5b9e\u73b0 HARDWARE IMPLEMENTATION</li> <li>16.6 \u67e5\u627e\u8868\u5c3a\u5bf8\u5206\u6790 ANALYSIS OF LOOKUP TABLE SIZE</li> </ul>"},{"location":"Part_05/","title":"\u5b9e\u6570\u7b97\u6570","text":"<p>REAL ARITHMETIC </p> <p>\u201cIt is the mark of an educated man to look for precision in each class of things just so far as the nature of the subject admits.\u201d               \u2014 ARISTOTLE</p> <p>\u201cAll exact science is dominated by the idea of approximation.\u201d               \u2014 BERTRANDA . RUSSELL</p> <p>\u201c\u53d7\u8fc7\u6559\u80b2\u7684\u4eba\u7684\u6807\u5fd7\u662f\u5728\u6bcf\u4e00\u7c7b\u4e8b\u7269\u7684\u672c\u8d28\u5141\u8bb8\u7684\u8303\u56f4\u5185\u5bfb\u6c42\u7cbe\u786e\u6027\u3002\u201d               \u2014 \u4e9a\u91cc\u58eb\u591a\u5fb7 \u201c\u6240\u6709\u7cbe\u786e\u79d1\u5b66\u90fd\u53d7\u8fd1\u4f3c\u601d\u60f3\u7684\u652f\u914d\u3002\u201d               \u2014 \u8d1d\u7279\u5170\u8fbe.\u7f57\u7d20</p> <p>IN MANY SCIENTIFIC AND ENGINEERING COMPUTATIONS, NUMBERS IN A WIDE RANGE, from very small to extremely large, are processed. Fixed-point number representations and arithmetic are ill-suited to such applications. For example, a fixed-point decimal number system capable of representing both \\(10^{\u221220}\\) and \\(10^{20}\\) would require at least 40 decimal digits and even then, would not offer much precision with numbers close to \\(10^{\u221220}\\).Thus,we need special number representations that possess both a wide range and acceptable precision. Floating-point numbers constitute the primary mode of real arithmetic in most digital systems. In this part, we discuss key topics in floating-point number representation, arithmetic, and computational errors.Additionally,we cover alternative representations,such as logarithmic and rational number systems,that can offer certain advantages in range and/or accuracy. This part is composed of the following four chapters:</p> <p>\u5728\u8bb8\u591a\u79d1\u5b66\u548c\u5de5\u7a0b\u8ba1\u7b97\u4e2d\uff0c\u90fd\u4f1a\u5904\u7406\u4ece\u975e\u5e38\u5c0f\u5230\u6781\u5927\u7684\u5404\u79cd\u6570\u5b57\u3002 \u5b9a\u70b9\u6570\u8868\u793a\u548c\u7b97\u672f\u4e0d\u9002\u5408\u6b64\u7c7b\u5e94\u7528\u3002 \u4f8b\u5982\uff0c\u80fd\u591f\u8868\u793a \\(10^{\u221220}\\) \u548c \\(10^{20}\\) \u7684\u5b9a\u70b9\u5341\u8fdb\u5236\u6570\u5b57\u7cfb\u7edf\u5c06\u9700\u8981\u81f3\u5c11 40 \u4f4d\u5341\u8fdb\u5236\u6570\u5b57\uff0c\u5373\u4f7f\u5982\u6b64\uff0c\u4e5f\u65e0\u6cd5\u4e3a\u63a5\u8fd1 \\(10^{\u221220}\\) \u7684\u6570\u5b57\u63d0\u4f9b\u592a\u591a\u7cbe\u5ea6\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u7279\u6b8a\u7684\u6570\u5b57\u8868\u793a\u5f62\u5f0f\u53ef\u4ee5\u540c\u65f6\u8868\u8fbe\u5f88\u5927\u7684\u8303\u56f4\u548c\u53ef\u63a5\u53d7\u7684\u7cbe\u5ea6\u3002\u6d6e\u70b9\u6570\u6784\u6210\u4e86\u5927\u591a\u6570\u6570\u5b57\u7cfb\u7edf\u4e2d\u5b9e\u9645\u7b97\u672f\u7684\u4e3b\u8981\u6a21\u5f0f\u3002 \u5728\u8fd9\u4e00\u90e8\u5206\u4e2d\uff0c\u6211\u4eec\u8ba8\u8bba\u6d6e\u70b9\u6570\u8868\u793a\u3001\u7b97\u672f\u548c\u8ba1\u7b97\u8bef\u5dee\u65b9\u9762\u7684\u5173\u952e\u4e3b\u9898\u3002\u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u4ecb\u7ecd\u4e86\u5176\u4ed6\u53d8\u79cd\u8868\u793a\uff0c\u4f8b\u5982\u5bf9\u6570\u548c\u6709\u7406\u6570\u7cfb\u7edf\uff0c\u5b83\u4eec\u53ef\u4ee5\u5728\u8303\u56f4\u548c/\u6216\u7cbe\u5ea6\u65b9\u9762\u63d0\u4f9b\u4e00\u5b9a\u7684\u4f18\u52bf\u3002 \u672c\u90e8\u5206\u7531\u4ee5\u4e0b\u56db\u7ae0\u7ec4\u6210\uff1a</p> <ul> <li>\u7b2c\u5341\u4e03\u7ae0 \u6d6e\u70b9\u6570\u8868\u793a Floating-Point Representations</li> <li>\u7b2c\u5341\u516b\u7ae0 \u6d6e\u70b9\u6570\u8fd0\u7b97 Floating-Point Operations</li> <li>\u7b2c\u5341\u4e5d\u7ae0 \u8bef\u5dee\u4e0e\u8bef\u5dee\u63a7\u5236 Errors and Error Control</li> <li>\u7b2c\u4e8c\u5341\u7ae0 \u7cbe\u786e\u53ef\u9760\u7684\u7b97\u672f Precise and Certifiable Arithmetic</li> </ul>"},{"location":"Part_05/17/","title":"17. \u6d6e\u70b9\u6570\u8868\u793a","text":"<p>Floating-Point Representations</p> <ul> <li>17.1 \u6d6e\u70b9\u6570 FLOATING POINT NUMBERS</li> <li>17.2 IEEE\u6d6e\u70b9\u6570\u6807\u51c6 THE IEEE FLOATING POINT STANDARD</li> <li>17.3 \u57fa\u7840\u6d6e\u70b9\u6570\u7b97\u672f BASIC FLOATING POINT ALGORITHMS</li> <li>17.4 \u820d\u5165\u4e0e\u5f02\u5e38 CONVERSIONS AND EXCEPTIONS</li> <li>17.5 \u820d\u5165\u65b9\u6cd5 ROUNDING SCHEMES</li> <li>17.6 \u5bf9\u6570\u8868\u793a\u7cfb\u7edf LOGARITHMIC NUMBER SYSTEMS</li> </ul>"},{"location":"Part_05/18/","title":"18. \u6d6e\u70b9\u6570\u8fd0\u7b97","text":"<p>Floating-Point Operations</p> <ul> <li>18.1 \u6d6e\u70b9\u6570\u52a0\u51cf\u6cd5 FLOATING-POINT ADDERS/SUBTRACTORS</li> <li>18.2 \u6d6e\u70b9\u6570\u7684\u9884\u3001\u540e\u79fb\u4f4d PRE- AND POSTSHIFTING</li> <li>18.3 \u8f6c\u6362\u4e0e\u5f02\u5e38 ROUNDING AND EXCEPTIONS</li> <li>18.4 \u6d6e\u70b9\u4e58\u6cd5\u5668\u4e0e\u9664\u6cd5\u5668 FLOATING-POINT MULTIPLIERS AND DIVIDERS</li> <li>18.5 \u4e58\u52a0\u5355\u5143(p=ax+b) FUSED MULTIPLY-ADD UNITS</li> <li>18.6 \u5bf9\u6570\u8868\u793a\u7cfb\u7edf\u7684\u8fd0\u7b97\u5355\u5143 OGARITHMIC ARITHMETIC UNT</li> </ul>"},{"location":"Part_05/19/","title":"19. \u8bef\u5dee\u4e0e\u8bef\u5dee\u63a7\u5236","text":"<p>Errors and Error Control</p> <ul> <li>19.1 \u8ba1\u7b97\u8bef\u5dee\u7684\u6765\u6e90 SOURCES OF COMPUTATIONAL ERRORS</li> <li>19.2 \u4ee3\u6570\u6cd5\u5219\u5931\u6548\u7684\u60c5\u51b5 INVALIDATED LAWS OF ALGEBRA</li> <li>19.3 \u6700\u574f\u8bef\u5dee\u7d2f\u8ba1 WORST-CASE ERROR ACCUMULATION</li> <li>19.4 \u8bef\u5dee\u5206\u5e03\u4e0e\u671f\u671b\u8bef\u5dee ERROR DISTRIBUTION AND EXPECTED ERRORS</li> <li> <p>19.5 \u524d\u5411\u8bef\u5dee\u5206\u6790 FORWARD ERROR ANALYSIS</p> <ul> <li>\u81ea\u52a8\u9519\u8bef\u5206\u6790 Automatic error analysis</li> <li>\u5c3e\u6570\u7b97\u672f Significance arithmetic</li> <li>\u566a\u58f0\u6a21\u5f0f\u8ba1\u7b97 Noisy mode computation</li> <li>\u533a\u95f4\u7b97\u6570 Interval arithmetic</li> </ul> </li> <li> <p>19.6 \u540e\u5411\u8bef\u5dee\u5206\u6790 BACKWARD ERROR ANALYSIS</p> </li> </ul>"},{"location":"Part_05/20/","title":"20. \u7cbe\u786e\u53ef\u9760\u7684\u7b97\u672f","text":"<p>Precise and Certifiable Arithmetic</p> <ul> <li>20.1 \u9ad8\u7cbe\u5ea6\u4e0e\u9ad8\u53ef\u9760\u6027 HIGH PRECISION AND CERTIFIABILITY</li> <li> <p>20.2 \u7cbe\u786e\u7b97\u6570 EXACT ARITHMETIC</p> <ul> <li>\u8fde\u5206\u6570 Continued fractions</li> <li>\u5b9a\u5206\u6570\u8868\u793a\u7cfb\u7edf Fixed-slash number systems</li> <li>\u6d6e\u5206\u6570\u8868\u793a\u7cfb\u7edf Floating-slash number systems</li> </ul> </li> <li> <p>20.3 \u591a\u500d\u7cbe\u5ea6\u7684\u7b97\u672f MULTIPRECISION ARITHMETIC</p> </li> <li>20.4 \u7cbe\u5ea6\u53ef\u53d8\u7684\u7b97\u672f VARIABLE PRECISION ARITHMETIC</li> <li>20.5 \u8bef\u5dee\u8fb9\u754c\u4e0e\u533a\u95f4\u7b97\u672f ERROR BOUNDING VIA INTERVAL ARITHMETIC</li> <li>20.6 \u81ea\u9002\u5e94\u4e0e\u60c5\u6027\u7b97\u672f ADAPTIVE AND LAZY ARITHMETIC</li> </ul>"},{"location":"Part_06/","title":"\u7279\u6b8a\u51fd\u6570\u6c42\u503c","text":"<p>FUNCTION EVALUATION</p> <p>\u201cI wrote this book and compiled in it everything that is necessary for the computer, avoiding both boring verbosity and misleading brevity.\u201d               \u2014 GHIYATH AL-DIN JAMSHID AL-KASHI, THE KEY TO COMPUTING (MIFTAH AL-HISABI ) , 1427</p> <p>\u201cSomeone told me that each equation I included in the book would halve the sales.\u201d               \u2014 STEPHEN HAWKING , A BRIEF HISTORY OF TIME , 1988</p> <p>\u201c\u6211\u5199\u4e86\u8fd9\u672c\u4e66\uff0c\u5e76\u5728\u5176\u4e2d\u6c47\u7f16\u4e86\u8ba1\u7b97\u673a\u6240\u9700\u7684\u6240\u6709\u5185\u5bb9\uff0c\u907f\u514d\u4e86\u65e0\u804a\u7684\u5197\u957f\u548c\u8bef\u5bfc\u6027\u7684\u7b80\u6d01\u3002\u201d               \u2014 GHIYATH AL-DIN JAMSHID AL-KASHI\uff0c\u8ba1\u7b97\u7684\u5173\u952e (MIFTAH AL-HISABI)\uff0c1427</p> <p>\u201c\u6709\u4eba\u544a\u8bc9\u6211\uff0c\u6211\u5728\u4e66\u4e2d\u5305\u542b\u7684\u6bcf\u4e2a\u65b9\u7a0b\u5f0f\u90fd\u4f1a\u4f7f\u9500\u552e\u989d\u51cf\u534a\u3002\u201d               \u2014 \u53f2\u8482\u82ac\u00b7\u970d\u91d1\uff0c\u300a\u65f6\u95f4\u7b80\u53f2\u300b\uff0c1988</p> <p>ONE WAY OF COMPUTING FUNCTIONS SUCH AS  \u221ax, SIN x, TANH x, LN x, AND \\(e^x\\) IS to evaluate their series expansions by means of addition, multiplication, and division operations. Another is through convergence computations of the type used for evaluating the  functions z/d and 1/d in Chapter 16. In this part, we introduce several methods for evaluating elementary and other functions.We begin by examining the important operation of extracting the square root of a number, covering both digit-recurrence and convergence square-rooting methods. We then devote two chapters to coordinate rotation digital computer (CORDIC) algorithms, other convergence methods, approximations, and merged arithmetic. We conclude by discussing versatile, and highly flexible, tablelookup schemes,which are assuming increasingly important roles as advances in digital technology lead to ever cheaper and denser memories.This part is composed of the following four chapters:</p> <p>\u8ba1\u7b97 \u221ax\u3001SIN x\u3001TANH x\u3001LN x \u548c \\(e^x\\) \u7b49\u51fd\u6570\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u901a\u8fc7\u52a0\u6cd5\u3001\u4e58\u6cd5\u548c\u9664\u6cd5\u8fd0\u7b97\u6765\u8ba1\u7b97\u5b83\u4eec\u7684\u7ea7\u6570\u5c55\u5f00\u5f0f\u3002 \u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u901a\u8fc7\u7b2c 16 \u7ae0\u4e2d\u7528\u4e8e\u6c42\u51fd\u6570 \\(z/d\\) \u548c \\(1/d\\) \u7684\u7c7b\u578b\u7684\u6536\u655b\u8ba1\u7b97\u3002\u5728\u8fd9\u4e00\u90e8\u5206\u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u51e0\u79cd\u8bc4\u4f30\u521d\u7b49\u51fd\u6570\u548c\u5176\u4ed6\u51fd\u6570\u7684\u65b9\u6cd5\u3002\u6211\u4eec\u9996\u5148\u68c0\u67e5\u63d0\u53d6\u5e73\u65b9\u7684\u91cd\u8981\u64cd\u4f5c \u6570\u5b57\u7684\u6839\uff0c\u6db5\u76d6\u6570\u5b57\u9012\u5f52\u548c\u6536\u655b\u5e73\u65b9\u6839\u65b9\u6cd5\u3002 \u7136\u540e\uff0c\u6211\u4eec\u7528\u4e24\u7ae0\u6765\u4ecb\u7ecd\u5750\u6807\u65cb\u8f6c\u6570\u5b57\u8ba1\u7b97\u673a\uff08CORDIC\uff09\u7b97\u6cd5\u3001\u5176\u4ed6\u6536\u655b\u65b9\u6cd5\u3001\u8fd1\u4f3c\u548c\u5408\u5e76\u7b97\u6cd5\u3002 \u6700\u540e\uff0c\u6211\u4eec\u8ba8\u8bba\u4e86\u901a\u7528\u4e14\u9ad8\u5ea6\u7075\u6d3b\u7684\u67e5\u8868\u65b9\u6848\uff0c\u968f\u7740\u6570\u5b57\u6280\u672f\u7684\u8fdb\u6b65\u5bfc\u81f4\u5b58\u50a8\u5668\u53d8\u5f97\u66f4\u52a0\u4fbf\u5b9c\u548c\u5bc6\u96c6\uff0c\u8fd9\u4e9b\u65b9\u6848\u6b63\u5728\u53d1\u6325\u8d8a\u6765\u8d8a\u91cd\u8981\u7684\u4f5c\u7528\u3002\u8fd9\u90e8\u5206\u7531\u4ee5\u4e0b\u56db\u7ae0\u7ec4\u6210\uff1a</p> <ul> <li>\u7b2c\u4e8c\u5341\u4e00\u7ae0 \u5e73\u65b9\u6839\u7b97\u6cd5 Square Rooting Methods</li> <li>\u7b2c\u4e8c\u5341\u4e8c\u7ae0 CORDIC\u7b97\u6cd5 The CORDIC Algorithms</li> <li>\u7b2c\u4e8c\u5341\u4e09\u7ae0 \u5176\u5b83\u51fd\u6570\u6c42\u503c\u65b9\u6cd5 Variations in Function Evaluation</li> <li>\u7b2c\u4e8c\u5341\u56db\u7ae0 \u67e5\u8868\u6cd5\u7b97\u672f Arithmetic by Table Lookup</li> </ul>"},{"location":"Part_06/21/","title":"21. \u5e73\u65b9\u6839\u7b97\u6cd5","text":"<p>Square Rooting Methods</p> <ul> <li>21.1 \u7eb8\u7b14\u7b97\u6cd5 THE PENCIL-AND PAPER ALGORITHM</li> <li>21.2 \u6062\u590d\u4f59\u6570\u79fb\u4f4d\u76f8\u51cf\u7b97\u6cd5 RESTORING SHIFT/SUBTRACT ALGORITHM</li> <li>21.3 \u4e8c\u8fdb\u5236\u4e0d\u6062\u590d\u4f59\u6570\u7b97\u6cd5 BINARY NONRESTORING ALGORITHM</li> <li>21.4 \u9ad8\u57fa\u5e73\u65b9\u6839\u7b97\u6cd5 HIGH-RADIX SQUARE ROOTING</li> <li>21.5 \u5e73\u65b9\u6839\u7684\u6536\u655b\u7b97\u6cd5 SQUARE ROOTING BY CONVERGENCE</li> <li>21.6 \u9ad8\u901f\u5e73\u65b9\u6839\u8fd0\u7b97\u5668 FAST HARDWARE SQUARE ROOTERS</li> </ul>"},{"location":"Part_06/22/","title":"22. CORDIC\u7b97\u6cd5","text":"<p>The CORDIC Algorithms</p> <ul> <li>22.1 \u65cb\u8f6c\u4e0e\u4f2a\u65cb\u8f6c ROTATIONS AND PSEUDOROTATIONS</li> <li>22.2 CORDIC\u7684\u57fa\u672c\u8fed\u4ee3\u8fc7\u7a0b BASIC CORDIC ITERATIONS</li> <li>22.3 CORDIC\u7684\u786c\u4ef6\u5b9e\u73b0 CORDIC HARDWARE</li> <li>22.4 \u5e7f\u4e49CORDIC\u7b97\u6cd5 GENERALIZED CORDIC</li> <li>22.5 CORDIC\u7684\u5e94\u7528 USING THE CORDIC METHOD</li> <li>22.6 \u4e00\u4e9b\u4ee3\u6570\u516c\u5f0f AN ALGEBRAIC FORMULATION</li> </ul>"},{"location":"Part_06/23/","title":"23. \u5176\u5b83\u51fd\u6570\u6c42\u503c\u65b9\u6cd5","text":"<p>Variations in Function Evaluation</p> <ul> <li>23.1 \u7ea6\u5316\u4e0e\u7f29\u5c0f\u8303\u56f4 NORMALIZATION AND RANGE REDUCTION</li> <li>23.2 \u5bf9\u6570\u6c42\u503c COMPUTING LOGARITHMS</li> <li>23.3 \u6307\u6570\u6c42\u503c EXPONENTIATION</li> <li>23.4 \u518d\u8bba\u9664\u6cd5\u4e0e\u5e73\u65b9\u6839 DIVISION AND SQUARE ROOTING,AGAIN</li> <li>23.5 \u8fd1\u4f3c\u51fd\u6570 USE OF APPROXIMATING FUNCTIONS</li> <li>23.6 \u878d\u5408\u7b97\u672f MERGED ARITHMETIC</li> </ul>"},{"location":"Part_06/24/","title":"24. \u67e5\u8868\u6cd5\u7b97\u672f","text":"<p>Arithmetic by Table Lookup</p> <ul> <li>24.1 \u76f4\u63a5\u67e5\u8868\u4e0e\u95f4\u63a5\u67e5\u8868 DIRECT AND INDIRECT TABLE LOOKUP</li> <li>24.2 \u53cc\u53d8\u91cf\u7ea6\u5316\u4e3a\u4e3a\u5355\u53d8\u91cf BINARY-TO-UNARY REDUCTION</li> <li>24.3 \u4f4d\u4e32\u884c\u7b97\u6570\u4e2d\u7684\u67e5\u627e\u8868 TABLES IN BIT-SERIAL ARITHMETIC</li> <li>24.4 \u63d2\u503c\u5b58\u50a8 INTERPOL ATING MEMORY</li> <li>24.5 \u5206\u6bb5\u67e5\u8868 PIECEWISE LOOKUP TABLES</li> <li>24.6 \u591a\u90e8\u8868 MULTIPARTITE TABLE METHODS</li> </ul>"},{"location":"Part_07/","title":"\u5b9e\u73b0\u76f8\u5173\u4e3b\u9898","text":"<p>IMPLEMENTATION TOPICS</p> <p>\u201cThe scientist describes what is; the engineer creates what never was.\u201d               \u2014 THEODORE VON KARMAN</p> <p>\u201cAlways design a thing by considering it in its next larger context \u2014 a chair in a room,a room in a house, a house in an environment,an environment in a city plan.\u201d               \u2014 ELIEL SAARINEN</p> <p>\u201c\u79d1\u5b66\u5bb6\u63cf\u8ff0\u4e86\u73b0\u5728\u6709\u7684\u4e1c\u897f\uff1b \u5de5\u7a0b\u5e08\u521b\u9020\u4e86\u4ee5\u524d\u6ca1\u6709\u7684\u4e1c\u897f\u3002\u201d               \u2014 \u897f\u5965\u591a\u00b7\u51af\u00b7\u5361\u95e8</p> <p>\u201c\u8bbe\u8ba1\u4e00\u4ef6\u4e1c\u897f\u65f6\uff0c\u603b\u662f\u8981\u8003\u8651\u5b83\u7684\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u80cc\u666f\u2014\u2014\u623f\u95f4\u91cc\u7684\u6905\u5b50\u3001\u623f\u5b50\u91cc\u7684\u623f\u95f4\u3001\u73af\u5883\u4e2d\u7684\u623f\u5b50\u3001\u57ce\u5e02\u89c4\u5212\u4e2d\u7684\u73af\u5883\u3002\u201d               \u2014 \u57c3\u5229\u5c14\u00b7\u8428\u91cc\u5b81</p> <p>WE HAVE THUS FAR IGNORED SEVERAL IMPORTANT TOPICS THAT BEAR ON THE usefulness and overall quality of computer arithmetic units. In some contexts\u2014say, when we want the hardware to support two floating-point arithmetic operations per cycle on the average and do not mind that the result of each operation becomes available after many cycles\u2014throughput might be more important than latency. Pipelining is the mechanism used to achieve high throughput while keeping the cost and size of the circuits in check. In other contexts, the size or power requirements of the arithmetic circuits are of primary concern. In some critical applications,or in harsh operating environments,tolerance to permanent and transient hardware faults might be required. Finally, ease of implementation with flexible hardware components,such as fieldprogrammable gate arrays, rests upon certain special provisions in the design. Our discussions in this part should be viewed as windows into advanced implementation techniques. Each of the following four chapters could be expanded into a book.</p> <p>\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5ffd\u7565\u4e86\u4e0e\u8ba1\u7b97\u673a\u7b97\u672f\u5355\u5143\u7684\u5b9e\u7528\u6027\u548c\u6574\u4f53\u8d28\u91cf\u6709\u5173\u7684\u51e0\u4e2a\u91cd\u8981\u4e3b\u9898\u3002 \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f8b\u5982\uff0c\u5f53\u6211\u4eec\u5e0c\u671b\u786c\u4ef6\u5e73\u5747\u6bcf\u4e2a\u5468\u671f\u652f\u6301\u4e24\u4e2a\u6d6e\u70b9\u7b97\u672f\u8fd0\u7b97\uff0c\u5e76\u4e14\u4e0d\u4ecb\u610f\u6bcf\u4e2a\u8fd0\u7b97\u7684\u7ed3\u679c\u5728\u591a\u4e2a\u5468\u671f\u540e\u624d\u53ef\u7528\u65f6\uff0c\u541e\u5410\u91cf\u53ef\u80fd\u6bd4\u5ef6\u8fdf\u66f4\u91cd\u8981\u3002 \u6d41\u6c34\u7ebf\u662f\u4e00\u79cd\u7528\u4e8e\u5b9e\u73b0\u9ad8\u541e\u5410\u91cf\u540c\u65f6\u63a7\u5236\u7535\u8def\u6210\u672c\u548c\u5c3a\u5bf8\u7684\u673a\u5236\u3002 \u5728\u5176\u4ed6\u60c5\u51b5\u4e0b\uff0c\u8fd0\u7b97\u7535\u8def\u7684\u5c3a\u5bf8\u6216\u529f\u7387\u8981\u6c42\u662f\u9996\u8981\u8003\u8651\u7684\u95ee\u9898\u3002 \u5728\u67d0\u4e9b\u5173\u952e\u5e94\u7528\u7a0b\u5e8f\u6216\u6076\u52a3\u7684\u64cd\u4f5c\u73af\u5883\u4e2d\uff0c\u53ef\u80fd\u9700\u8981\u5bb9\u5fcd\u6c38\u4e45\u6027\u548c\u6682\u65f6\u6027\u786c\u4ef6\u6545\u969c\u3002 \u6700\u540e\uff0c\u7075\u6d3b\u7684\u786c\u4ef6\u7ec4\u4ef6\uff08\u4f8b\u5982\u73b0\u573a\u53ef\u7f16\u7a0b\u95e8\u9635\u5217\uff09\u7684\u6613\u4e8e\u5b9e\u73b0\u53d6\u51b3\u4e8e\u8bbe\u8ba1\u4e2d\u7684\u67d0\u4e9b\u7279\u6b8a\u89c4\u5b9a\u3002 \u6211\u4eec\u5728\u8fd9\u4e00\u90e8\u5206\u7684\u8ba8\u8bba\u5e94\u88ab\u89c6\u4e3a\u4e86\u89e3\u9ad8\u7ea7\u5b9e\u73b0\u6280\u672f\u7684\u7a97\u53e3\u3002 \u4ee5\u4e0b\u56db\u7ae0\u6bcf\u4e00\u7ae0\u90fd\u53ef\u4ee5\u6269\u5145\u6210\u4e00\u672c\u4e66\u3002</p> <ul> <li>\u7b2c\u4e8c\u5341\u4e94\u7ae0 \u9ad8\u541e\u5410\u91cf\u7b97\u672f High-Throughput Arithmetic</li> <li>\u7b2c\u4e8c\u5341\u516d\u7ae0 \u4f4e\u529f\u8017\u7b97\u672f Low Power Arithmetic</li> <li>\u7b2c\u4e8c\u5341\u4e03\u7ae0 \u5bb9\u9519\u7b97\u672f Fault-Tolerant Arithmetic</li> <li>\u7b2c\u4e8c\u5341\u516b\u7ae0 \u53ef\u91cd\u6784\u7b97\u672f Reconfigurable Arithmetic</li> </ul>"},{"location":"Part_07/25/","title":"25. \u9ad8\u541e\u5410\u91cf\u7b97\u672f","text":"<p>High-Throughput Arithmetic</p> <ul> <li> <p>25.1 \u7b97\u672f\u529f\u80fd\u7684\u6d41\u6c34\u5316 PIPELINING OF ARITHMETIC FUNCTIONS</p> </li> <li> <p>25.2 \u65f6\u949f\u9891\u7387\u4e0e\u541e\u5410\u91cf CLOCK RATE AND THROUGHPUT</p> </li> <li> <p>25.3 \u5384\u5c14\u9501\u5b58\u5668 THE EARLE LATCH</p> </li> <li> <p>25.4 \u5e76\u884c\u6d41\u6c34\u7ebf\u4e0e\u4e32\u884c\u6d41\u6c34\u7ebf PARALLEL AND DIGIT SERIAL PIPELINES</p> </li> <li> <p>25.5 \u5373\u65f6\u7b97\u672f\u4e0e\u6570\u4f4d\u6d41\u6c34\u7ebf ON-LINE OR DIGIT-PIPELINED ARITHMETIC</p> </li> <li> <p>25.6 \u8109\u52a8\u7b97\u672f\u5355\u5143 SYSTOLIC ARITHMETIC UNITS</p> </li> </ul>"},{"location":"Part_07/26/","title":"26. \u4f4e\u529f\u8017\u7b97\u672f","text":"<p>Low Power Arithmetic</p> <ul> <li>26.1 \u4f4e\u529f\u8017\u8bbe\u8ba1\u7684\u9700\u6c42 THE NEED FOR LOW-POWER DESIGN</li> <li>26.2 \u529f\u8017\u5f00\u9500\u7684\u6765\u6e90 SOURCES OF POWER CONSUMPTION</li> <li>26.3 \u51cf\u5c11\u80fd\u6e90\u6d6a\u8d39 REDUCTION OF POWERWASTE</li> <li>26.4 \u51cf\u5c11\u6d3b\u52a8 REDUCTION OF ACTIVITY</li> <li>26.5 \u8f6c\u53d8\u4e0e\u6743\u6a2a TRANSFORMATIONS AND TRADE-OFFS</li> <li>26.6 \u65b0\u5174\u65b9\u6cd5 NEW AND EMERGING METHODS</li> </ul>"},{"location":"Part_07/27/","title":"27. \u5bb9\u9519\u7b97\u672f","text":"<p>Fault-Tolerant Arithmetic</p> <ul> <li>27.1 \u6545\u969c\u3001\u68c0\u9519\u4e0e\u7ea0\u9519\u7f16\u7801 FAULTS, ERRORS, AND ERROR CODES</li> <li> <p>27.2 \u7b97\u6570\u9519\u8bef\u68c0\u6d4b\u4ee3\u7801 ARITHMETIC ERROR DETECTING CODES</p> <ul> <li>\u4e58\u79ef\u7f16\u7801 Product codes</li> <li>\u4f59\u6570\u7f16\u7801 Residue codes</li> </ul> </li> <li> <p>27.3 \u7b97\u672f\u7ea0\u9519\u7801 ARITHMETIC ERROR-CORRECTING CODES</p> </li> <li>27.4 \u81ea\u68c0\u529f\u80fd\u5355\u5143 SELF-CHECKING FUNCTION UNITS</li> <li>27.5 \u5bb9\u9519\u7b97\u6cd5 ALGORITHM-BASED FAULT TOLERANCE</li> <li>27.5 \u5bb9\u9519RNS\u7b97\u672f FAULT-TOLERANT RNS ARITHMETIC</li> </ul>"},{"location":"Part_07/28/","title":"28. \u53ef\u91cd\u6784\u7b97\u672f","text":"<p>Reconfigurable Arithmetic</p> <ul> <li>28.1 \u53ef\u7f16\u7a0b\u903b\u8f91\u5668\u4ef6 PROGRAMMABLE LOGIC DEVICES</li> <li>28.2 FPGAs\u7684\u52a0\u6cd5\u5668\u8bbe\u8ba1 ADDER DESIGNS FOR FPGAS</li> <li>28.3 \u4e58\u6cd5\u5668\u4e0e\u9664\u6cd5\u5668\u7684\u8bbe\u8ba1 MULTIPLIER AND DIVIDER DESIGNS</li> <li>28.4 \u67e5\u8868\u6cd5\u4e0e\u5206\u5e03\u5f0f\u7b97\u672f TABULAR AND DISTRIBUTED ARITHMETIC</li> <li>28.5 FPGAs\u4e0a\u7684\u51fd\u6570\u6c42\u503c FUNCTION EVALUATION ON FPGAS</li> <li>28.6 \u7ec6\u7c92\u5ea6\u8bbe\u5907\u4e4b\u4e0a BEYOND FINE-GRAINED DEVICES</li> </ul>"}]}